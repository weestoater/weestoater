{"version":3,"file":"compileAtomicCSSRule.cjs.js","sources":["../../../../packages/core/src/runtime/compileAtomicCSSRule.ts"],"sourcesContent":["import { hyphenateProperty } from './utils/hyphenateProperty';\nimport { normalizeNestedProperty } from './utils/normalizeNestedProperty';\nimport { compileCSSRules } from './compileCSSRules';\n\nexport interface CompileAtomicCSSOptions {\n  className: string;\n\n  selectors: string[];\n  media: string;\n  layer: string;\n  support: string;\n  container: string;\n\n  property: string;\n  value: number | string | Array<number | string>;\n\n  rtlClassName?: string;\n  rtlProperty?: string;\n  rtlValue?: number | string | Array<number | string>;\n}\n\nconst PSEUDO_SELECTOR_REGEX = /,( *[^ &])/g;\n\n/**\n * Normalizes pseudo selectors to always contain &, requires to work properly with comma-separated selectors.\n *\n * @example\n *   \":hover\" => \"&:hover\"\n *   \" :hover\" => \"& :hover\"\n *   \":hover,:focus\" => \"&:hover,&:focus\"\n *   \" :hover, :focus\" => \"& :hover,& :focus\"\n */\nexport function normalizePseudoSelector(pseudoSelector: string): string {\n  return (\n    '&' +\n    normalizeNestedProperty(\n      // Regex there replaces a comma, spaces and an ampersand if it's present with comma and an ampersand.\n      // This allows to normalize input, see examples in JSDoc.\n      pseudoSelector.replace(PSEUDO_SELECTOR_REGEX, ',&$1'),\n    )\n  );\n}\n\nfunction createCSSRule(classNameSelector: string, cssDeclaration: string, pseudos: string[]): string {\n  let cssRule = cssDeclaration;\n\n  if (pseudos.length > 0) {\n    cssRule = pseudos.reduceRight((acc, selector) => {\n      return `${normalizePseudoSelector(selector)} { ${acc} }`;\n    }, cssDeclaration);\n  }\n\n  return `${classNameSelector}{${cssRule}}`;\n}\n\nexport function compileAtomicCSSRule(\n  options: CompileAtomicCSSOptions,\n): [string? /* ltr definition */, string? /* rtl definition */] {\n  const {\n    className,\n    media,\n    layer,\n    selectors,\n    support,\n    property,\n    rtlClassName,\n    rtlProperty,\n    rtlValue,\n    value,\n    container,\n  } = options;\n\n  const classNameSelector = `.${className}`;\n  const cssDeclaration = Array.isArray(value)\n    ? `${value.map(v => `${hyphenateProperty(property)}: ${v}`).join(';')};`\n    : `${hyphenateProperty(property)}: ${value};`;\n\n  let cssRule = createCSSRule(classNameSelector, cssDeclaration, selectors);\n\n  if (rtlProperty && rtlClassName) {\n    const rtlClassNameSelector = `.${rtlClassName}`;\n    const rtlCSSDeclaration = Array.isArray(rtlValue)\n      ? `${rtlValue.map(v => `${hyphenateProperty(rtlProperty)}: ${v}`).join(';')};`\n      : `${hyphenateProperty(rtlProperty)}: ${rtlValue};`;\n\n    cssRule += createCSSRule(rtlClassNameSelector, rtlCSSDeclaration, selectors);\n  }\n\n  if (media) {\n    cssRule = `@media ${media} { ${cssRule} }`;\n  }\n\n  if (layer) {\n    cssRule = `@layer ${layer} { ${cssRule} }`;\n  }\n\n  if (support) {\n    cssRule = `@supports ${support} { ${cssRule} }`;\n  }\n\n  if (container) {\n    cssRule = `@container ${container} { ${cssRule} }`;\n  }\n\n  return compileCSSRules(cssRule, true) as [string?, string?];\n}\n"],"names":["PSEUDO_SELECTOR_REGEX","normalizePseudoSelector","pseudoSelector","normalizeNestedProperty","replace","createCSSRule","classNameSelector","cssDeclaration","pseudos","cssRule","length","reduceRight","acc","selector","compileAtomicCSSRule","options","className","media","layer","selectors","support","property","rtlClassName","rtlProperty","rtlValue","value","container","Array","isArray","map","v","hyphenateProperty","join","rtlClassNameSelector","rtlCSSDeclaration","compileCSSRules"],"mappings":"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"}