{"version":3,"file":"makeStyles.esm.js","sources":["../../../packages/core/src/makeStyles.ts"],"sourcesContent":["import { debugData, isDevToolsEnabled, getSourceURLfromError } from './devtools';\nimport { insertionFactory } from './insertionFactory';\nimport { resolveStyleRulesForSlots } from './resolveStyleRulesForSlots';\nimport { reduceToClassNameForSlots } from './runtime/reduceToClassNameForSlots';\nimport type { CSSClassesMapBySlot, CSSRulesByBucket, GriffelRenderer, StylesBySlots } from './types';\nimport type { GriffelInsertionFactory } from './types';\n\nexport interface MakeStylesOptions {\n  dir: 'ltr' | 'rtl';\n  renderer: GriffelRenderer;\n}\n\nexport function makeStyles<Slots extends string | number>(\n  stylesBySlots: StylesBySlots<Slots>,\n  factory: GriffelInsertionFactory = insertionFactory,\n) {\n  const insertStyles = factory();\n\n  let classesMapBySlot: CSSClassesMapBySlot<Slots> | null = null;\n  let cssRules: CSSRulesByBucket | null = null;\n\n  let ltrClassNamesForSlots: Record<Slots, string> | null = null;\n  let rtlClassNamesForSlots: Record<Slots, string> | null = null;\n\n  let sourceURL: string | undefined;\n  if (process.env.NODE_ENV !== 'production' && isDevToolsEnabled) {\n    sourceURL = getSourceURLfromError();\n  }\n\n  function computeClasses(options: MakeStylesOptions): Record<Slots, string> {\n    const { dir, renderer } = options;\n\n    if (classesMapBySlot === null) {\n      [classesMapBySlot, cssRules] = resolveStyleRulesForSlots(stylesBySlots);\n    }\n\n    const isLTR = dir === 'ltr';\n\n    if (isLTR) {\n      if (ltrClassNamesForSlots === null) {\n        ltrClassNamesForSlots = reduceToClassNameForSlots(classesMapBySlot, dir);\n      }\n    } else {\n      if (rtlClassNamesForSlots === null) {\n        rtlClassNamesForSlots = reduceToClassNameForSlots(classesMapBySlot, dir);\n      }\n    }\n\n    insertStyles(renderer, cssRules!);\n\n    const classNamesForSlots = isLTR\n      ? (ltrClassNamesForSlots as Record<Slots, string>)\n      : (rtlClassNamesForSlots as Record<Slots, string>);\n\n    if (process.env.NODE_ENV !== 'production' && isDevToolsEnabled) {\n      debugData.addSequenceDetails(classNamesForSlots!, sourceURL);\n    }\n\n    return classNamesForSlots;\n  }\n\n  return computeClasses;\n}\n"],"names":["makeStyles","stylesBySlots","factory","insertionFactory","insertStyles","classesMapBySlot","cssRules","ltrClassNamesForSlots","rtlClassNamesForSlots","sourceURL","process","env","NODE_ENV","isDevToolsEnabled","getSourceURLfromError","computeClasses","options","dir","renderer","resolveStyleRulesForSlots","isLTR","reduceToClassNameForSlots","classNamesForSlots","debugData","addSequenceDetails"],"mappings":";;;;;;;AAYO,SAASA,UAAUA,CACxBC,aAAmC,EACnCC,OAAgC,GAAGC,gBAAgB,EACnD;AACA,EAAA,MAAMC,YAAY,GAAGF,OAAO,EAAE,CAAA;EAE9B,IAAIG,gBAAmD,GAAG,IAAI,CAAA;EAC9D,IAAIC,QAAiC,GAAG,IAAI,CAAA;EAE5C,IAAIC,qBAAmD,GAAG,IAAI,CAAA;EAC9D,IAAIC,qBAAmD,GAAG,IAAI,CAAA;AAE9D,EAAA,IAAIC,SAA6B,CAAA;EACjC,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,IAAIC,iBAAiB,EAAE;IAC9DJ,SAAS,GAAGK,qBAAqB,EAAE,CAAA;AACrC,GAAA;EAEA,SAASC,cAAcA,CAACC,OAA0B,EAAyB;IACzE,MAAM;MAAEC,GAAG;AAAEC,MAAAA,QAAAA;AAAS,KAAC,GAAGF,OAAO,CAAA;IAEjC,IAAIX,gBAAgB,KAAK,IAAI,EAAE;MAC7B,CAACA,gBAAgB,EAAEC,QAAQ,CAAC,GAAGa,yBAAyB,CAAClB,aAAa,CAAC,CAAA;AACzE,KAAA;AAEA,IAAA,MAAMmB,KAAK,GAAGH,GAAG,KAAK,KAAK,CAAA;AAE3B,IAAA,IAAIG,KAAK,EAAE;MACT,IAAIb,qBAAqB,KAAK,IAAI,EAAE;AAClCA,QAAAA,qBAAqB,GAAGc,yBAAyB,CAAChB,gBAAgB,EAAEY,GAAG,CAAC,CAAA;AAC1E,OAAA;AACF,KAAC,MAAM;MACL,IAAIT,qBAAqB,KAAK,IAAI,EAAE;AAClCA,QAAAA,qBAAqB,GAAGa,yBAAyB,CAAChB,gBAAgB,EAAEY,GAAG,CAAC,CAAA;AAC1E,OAAA;AACF,KAAA;AAEAb,IAAAA,YAAY,CAACc,QAAQ,EAAEZ,QAAS,CAAC,CAAA;AAEjC,IAAA,MAAMgB,kBAAkB,GAAGF,KAAK,GAC3Bb,qBAAqB,GACrBC,qBAA+C,CAAA;IAEpD,IAAIE,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,IAAIC,iBAAiB,EAAE;AAC9DU,MAAAA,SAAS,CAACC,kBAAkB,CAACF,kBAAkB,EAAGb,SAAS,CAAC,CAAA;AAC9D,KAAA;AAEA,IAAA,OAAOa,kBAAkB,CAAA;AAC3B,GAAA;AAEA,EAAA,OAAOP,cAAc,CAAA;AACvB;;;;"}