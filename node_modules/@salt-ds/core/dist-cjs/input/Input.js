'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var clsx = require('clsx');
var React = require('react');
var styles = require('@salt-ds/styles');
var window = require('@salt-ds/window');
require('../form-field-context/FormFieldContext.js');
var useFormFieldProps = require('../form-field-context/useFormFieldProps.js');
var makePrefixer = require('../utils/makePrefixer.js');
var useControlled = require('../utils/useControlled.js');
require('../utils/useFloatingUI/useFloatingUI.js');
require('../utils/useId.js');
require('../salt-provider/SaltProvider.js');
require('../viewport/ViewportProvider.js');
require('../accordion/AccordionGroup.js');
require('../accordion/AccordionPanel.js');
require('../accordion/Accordion.js');
require('../accordion/AccordionHeader.js');
require('../aria-announcer/AriaAnnouncerContext.js');
require('../avatar/Avatar.js');
require('../badge/Badge.js');
require('../banner/Banner.js');
require('../banner/BannerActions.js');
require('../banner/BannerContent.js');
require('../border-item/BorderItem.js');
require('../border-layout/BorderLayout.js');
require('../button/Button.js');
require('../card/Card.js');
require('../card/InteractableCard.js');
require('../checkbox/Checkbox.js');
require('../checkbox/CheckboxGroup.js');
require('@salt-ds/icons');
require('../combo-box/ComboBox.js');
require('../dialog/Dialog.js');
require('../dialog/DialogHeader.js');
require('../dialog/DialogActions.js');
require('../dialog/DialogContent.js');
require('../dialog/DialogContext.js');
require('../dialog/DialogCloseButton.js');
require('../drawer/Drawer.js');
require('../drawer/DrawerCloseButton.js');
require('../dropdown/Dropdown.js');
require('../file-drop-zone/FileDropZone.js');
require('../file-drop-zone/FileDropZoneIcon.js');
require('../file-drop-zone/FileDropZoneTrigger.js');
require('../flex-item/FlexItem.js');
require('../flex-layout/FlexLayout.js');
require('../flow-layout/FlowLayout.js');
require('../form-field/FormField.js');
require('../status-indicator/StatusIndicator.js');
require('../text/Text.js');
require('../text/Code.js');
require('../text/Display.js');
require('../text/Headings.js');
require('../text/Label.js');
require('../text/TextAction.js');
require('../text/TextNotation.js');
require('../grid-item/GridItem.js');
require('../grid-layout/GridLayout.js');
require('../link/Link.js');
require('../link-card/LinkCard.js');
require('../list-control/ListControlContext.js');
require('../multiline-input/MultilineInput.js');
require('../navigation-item/NavigationItem.js');
require('../option/Option.js');
require('../option/OptionGroup.js');
require('../pagination/Pagination.js');
require('../pagination/Paginator.js');
require('../pagination/CompactInput.js');
require('../pagination/CompactPaginator.js');
require('../pagination/GoToInput.js');
require('../panel/Panel.js');
require('../pill/Pill.js');
require('../progress/CircularProgress/CircularProgress.js');
require('../progress/LinearProgress/LinearProgress.js');
require('../radio-button/RadioButton.js');
require('../radio-button/RadioButtonGroup.js');
require('../scrim/Scrim.js');
require('../spinner/Spinner.js');
require('../stack-layout/StackLayout.js');
var StatusAdornment = require('../status-adornment/StatusAdornment.js');
require('../toast/Toast.js');
require('../toast/ToastContent.js');
require('../split-layout/SplitLayout.js');
require('../switch/Switch.js');
require('../toggle-button/ToggleButton.js');
require('../toggle-button-group/ToggleButtonGroup.js');
require('../toggle-button-group/ToggleButtonGroupContext.js');
require('../tooltip/Tooltip.js');
require('@floating-ui/react');
var Input$1 = require('./Input.css.js');

const withBaseName = makePrefixer.makePrefixer("saltInput");
const Input = React.forwardRef(function Input2({
  "aria-activedescendant": ariaActiveDescendant,
  "aria-expanded": ariaExpanded,
  "aria-owns": ariaOwns,
  className: classNameProp,
  disabled,
  emptyReadOnlyMarker = "\u2014",
  endAdornment,
  id,
  inputProps = {},
  inputRef,
  placeholder,
  readOnly: readOnlyProp,
  role,
  startAdornment,
  style,
  textAlign = "left",
  value: valueProp,
  defaultValue: defaultValueProp = valueProp === void 0 ? "" : void 0,
  validationStatus: validationStatusProp,
  variant = "primary",
  ...other
}, ref) {
  const targetWindow = window.useWindow();
  styles.useComponentCssInjection({
    testId: "salt-input",
    css: Input$1,
    window: targetWindow
  });
  const {
    a11yProps: {
      "aria-describedby": formFieldDescribedBy,
      "aria-labelledby": formFieldLabelledBy
    } = {},
    disabled: formFieldDisabled,
    readOnly: formFieldReadOnly,
    necessity: formFieldRequired,
    validationStatus: formFieldValidationStatus
  } = useFormFieldProps.useFormFieldProps();
  const restA11yProps = {
    "aria-activedescendant": ariaActiveDescendant,
    "aria-expanded": ariaExpanded,
    "aria-owns": ariaOwns
  };
  const isDisabled = disabled || formFieldDisabled;
  const isReadOnly = readOnlyProp || formFieldReadOnly;
  const validationStatus = formFieldValidationStatus != null ? formFieldValidationStatus : validationStatusProp;
  const [focused, setFocused] = React.useState(false);
  const isEmptyReadOnly = isReadOnly && !defaultValueProp && !valueProp;
  const defaultValue = isEmptyReadOnly ? emptyReadOnlyMarker : defaultValueProp;
  const {
    "aria-describedby": inputDescribedBy,
    "aria-labelledby": inputLabelledBy,
    onBlur,
    onChange,
    onFocus,
    required: inputPropsRequired,
    ...restInputProps
  } = inputProps;
  const isRequired = formFieldRequired ? ["required", "asterisk"].includes(formFieldRequired) : inputPropsRequired;
  const [value, setValue] = useControlled.useControlled({
    controlled: valueProp,
    default: defaultValue,
    name: "Input",
    state: "value"
  });
  const handleChange = (event) => {
    const value2 = event.target.value;
    setValue(value2);
    onChange == null ? void 0 : onChange(event);
  };
  const handleBlur = (event) => {
    onBlur == null ? void 0 : onBlur(event);
    setFocused(false);
  };
  const handleFocus = (event) => {
    onFocus == null ? void 0 : onFocus(event);
    setFocused(true);
  };
  const inputStyle = {
    "--input-textAlign": textAlign,
    ...style
  };
  return /* @__PURE__ */ jsxRuntime.jsxs("div", {
    className: clsx.clsx(
      withBaseName(),
      withBaseName(variant),
      {
        [withBaseName("focused")]: !isDisabled && focused,
        [withBaseName("disabled")]: isDisabled,
        [withBaseName("readOnly")]: isReadOnly,
        [withBaseName(validationStatus || "")]: validationStatus
      },
      classNameProp
    ),
    ref,
    style: inputStyle,
    ...other,
    children: [
      startAdornment && /* @__PURE__ */ jsxRuntime.jsx("div", {
        className: withBaseName("startAdornmentContainer"),
        children: startAdornment
      }),
      /* @__PURE__ */ jsxRuntime.jsx("input", {
        "aria-describedby": clsx.clsx(formFieldDescribedBy, inputDescribedBy),
        "aria-labelledby": clsx.clsx(formFieldLabelledBy, inputLabelledBy),
        className: clsx.clsx(withBaseName("input"), inputProps == null ? void 0 : inputProps.className),
        disabled: isDisabled,
        id,
        readOnly: isReadOnly,
        ref: inputRef,
        role,
        tabIndex: isDisabled ? -1 : 0,
        onBlur: handleBlur,
        onChange: handleChange,
        onFocus: !isDisabled ? handleFocus : void 0,
        placeholder,
        value,
        ...restA11yProps,
        ...restInputProps,
        required: isRequired
      }),
      !isDisabled && !isReadOnly && validationStatus && /* @__PURE__ */ jsxRuntime.jsx(StatusAdornment.StatusAdornment, {
        status: validationStatus
      }),
      endAdornment && /* @__PURE__ */ jsxRuntime.jsx("div", {
        className: withBaseName("endAdornmentContainer"),
        children: endAdornment
      }),
      /* @__PURE__ */ jsxRuntime.jsx("div", {
        className: withBaseName("activationIndicator")
      })
    ]
  });
});

exports.Input = Input;
//# sourceMappingURL=Input.js.map
