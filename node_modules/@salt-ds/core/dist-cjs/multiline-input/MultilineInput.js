'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var clsx = require('clsx');
var React = require('react');
var styles = require('@salt-ds/styles');
var window = require('@salt-ds/window');
require('../form-field-context/FormFieldContext.js');
var useFormFieldProps = require('../form-field-context/useFormFieldProps.js');
var StatusAdornment = require('../status-adornment/StatusAdornment.js');
var makePrefixer = require('../utils/makePrefixer.js');
var useControlled = require('../utils/useControlled.js');
require('../utils/useFloatingUI/useFloatingUI.js');
var useForkRef = require('../utils/useForkRef.js');
require('../utils/useId.js');
require('../salt-provider/SaltProvider.js');
require('../viewport/ViewportProvider.js');
require('../accordion/AccordionGroup.js');
require('../accordion/AccordionPanel.js');
require('../accordion/Accordion.js');
require('../accordion/AccordionHeader.js');
require('../aria-announcer/AriaAnnouncerContext.js');
require('../avatar/Avatar.js');
require('../badge/Badge.js');
require('../banner/Banner.js');
require('../banner/BannerActions.js');
require('../banner/BannerContent.js');
require('../border-item/BorderItem.js');
require('../border-layout/BorderLayout.js');
require('../button/Button.js');
require('../card/Card.js');
require('../card/InteractableCard.js');
require('../checkbox/Checkbox.js');
require('../checkbox/CheckboxGroup.js');
require('@salt-ds/icons');
require('../combo-box/ComboBox.js');
require('../dialog/Dialog.js');
require('../dialog/DialogHeader.js');
require('../dialog/DialogActions.js');
require('../dialog/DialogContent.js');
require('../dialog/DialogContext.js');
require('../dialog/DialogCloseButton.js');
require('../drawer/Drawer.js');
require('../drawer/DrawerCloseButton.js');
require('../dropdown/Dropdown.js');
require('../file-drop-zone/FileDropZone.js');
require('../file-drop-zone/FileDropZoneIcon.js');
require('../file-drop-zone/FileDropZoneTrigger.js');
require('../flex-item/FlexItem.js');
require('../flex-layout/FlexLayout.js');
require('../flow-layout/FlowLayout.js');
require('../form-field/FormField.js');
require('../status-indicator/StatusIndicator.js');
require('../text/Text.js');
require('../text/Code.js');
require('../text/Display.js');
require('../text/Headings.js');
require('../text/Label.js');
require('../text/TextAction.js');
require('../text/TextNotation.js');
require('../grid-item/GridItem.js');
require('../grid-layout/GridLayout.js');
require('../input/Input.js');
require('../link/Link.js');
require('../link-card/LinkCard.js');
require('../list-control/ListControlContext.js');
require('../navigation-item/NavigationItem.js');
require('../option/Option.js');
require('../option/OptionGroup.js');
require('../pagination/Pagination.js');
require('../pagination/Paginator.js');
require('../pagination/CompactInput.js');
require('../pagination/CompactPaginator.js');
require('../pagination/GoToInput.js');
require('../panel/Panel.js');
require('../pill/Pill.js');
require('../progress/CircularProgress/CircularProgress.js');
require('../progress/LinearProgress/LinearProgress.js');
require('../radio-button/RadioButton.js');
require('../radio-button/RadioButtonGroup.js');
require('../scrim/Scrim.js');
require('../spinner/Spinner.js');
require('../stack-layout/StackLayout.js');
require('../toast/Toast.js');
require('../toast/ToastContent.js');
require('../split-layout/SplitLayout.js');
require('../switch/Switch.js');
require('../toggle-button/ToggleButton.js');
require('../toggle-button-group/ToggleButtonGroup.js');
require('../toggle-button-group/ToggleButtonGroupContext.js');
require('../tooltip/Tooltip.js');
require('@floating-ui/react');
var MultilineInput$1 = require('./MultilineInput.css.js');

const withBaseName = makePrefixer.makePrefixer("saltMultilineInput");
const MultilineInput = React.forwardRef(
  function MultilineInput2({
    "aria-activedescendant": ariaActiveDescendant,
    "aria-expanded": ariaExpanded,
    "aria-owns": ariaOwns,
    bordered = false,
    className: classNameProp,
    disabled,
    endAdornment,
    id,
    placeholder,
    readOnly,
    role,
    rows = 3,
    startAdornment,
    style,
    textAreaProps = {},
    textAreaRef,
    value: valueProp,
    defaultValue: defaultValueProp = valueProp === void 0 ? "" : void 0,
    validationStatus: validationStatusProp,
    variant = "primary",
    ...other
  }, ref) {
    const inputRef = React.useRef(null);
    const handleRef = useForkRef.useForkRef(inputRef, textAreaRef);
    const targetWindow = window.useWindow();
    styles.useComponentCssInjection({
      testId: "salt-multiline-input",
      css: MultilineInput$1,
      window: targetWindow
    });
    const restA11yProps = {
      "aria-activedescendant": ariaActiveDescendant,
      "aria-expanded": ariaExpanded,
      "aria-owns": ariaOwns
    };
    const [focused, setFocused] = React.useState(false);
    const {
      "aria-describedby": textAreaDescribedBy,
      "aria-labelledby": textAreaLabelledBy,
      onBlur,
      onChange,
      onFocus,
      required: textAreaRequired,
      ...restTextAreaProps
    } = textAreaProps;
    const {
      a11yProps: {
        "aria-describedby": formFieldDescribedBy,
        "aria-labelledby": formFieldLabelledBy
      } = {},
      disabled: formFieldDisabled,
      readOnly: formFieldReadOnly,
      necessity: formFieldRequired,
      validationStatus: formFieldValidationStatus
    } = useFormFieldProps.useFormFieldProps();
    const isDisabled = disabled || formFieldDisabled;
    const isReadOnly = readOnly || formFieldReadOnly;
    const validationStatus = formFieldValidationStatus != null ? formFieldValidationStatus : validationStatusProp;
    const isRequired = formFieldRequired ? ["required", "asterisk"].includes(formFieldRequired) : textAreaRequired;
    const [value, setValue] = useControlled.useControlled({
      controlled: valueProp,
      default: defaultValueProp,
      name: "MultilineInput",
      state: "value"
    });
    const previousHeight = React.useRef(void 0);
    const input = inputRef.current;
    const changeHeight = React.useCallback(() => {
      if (!input)
        return;
      const hasBeenManuallyResized = previousHeight.current !== void 0 && input.style.height !== previousHeight.current;
      if (!hasBeenManuallyResized) {
        const previousOverflow = input.style.overflow;
        input.style.overflow = "hidden";
        input.style.height = "auto";
        const newHeight = `${input.scrollHeight + (input.offsetHeight - input.clientHeight)}px`;
        input.style.height = newHeight;
        previousHeight.current = newHeight;
        input.style.overflow = previousOverflow;
      }
    }, [input]);
    const handleChange = (event) => {
      const value2 = event.target.value;
      setValue(value2);
      onChange == null ? void 0 : onChange(event);
      changeHeight();
    };
    React.useLayoutEffect(() => {
      changeHeight();
    }, [value, changeHeight]);
    const handleBlur = (event) => {
      onBlur == null ? void 0 : onBlur(event);
      setFocused(false);
    };
    const handleFocus = (event) => {
      onFocus == null ? void 0 : onFocus(event);
      setFocused(true);
    };
    const multilineInputStyles = {
      "--saltMultilineInput-rows": rows,
      ...style
    };
    return /* @__PURE__ */ jsxRuntime.jsxs("div", {
      className: clsx.clsx(
        withBaseName(),
        withBaseName(variant),
        {
          [withBaseName("withAdornmentRow")]: endAdornment,
          [withBaseName("bordered")]: bordered,
          [withBaseName("focused")]: !isDisabled && focused,
          [withBaseName("disabled")]: isDisabled,
          [withBaseName("readOnly")]: isReadOnly,
          [withBaseName(validationStatus != null ? validationStatus : "")]: validationStatus
        },
        classNameProp
      ),
      ref,
      style: multilineInputStyles,
      ...other,
      children: [
        startAdornment && /* @__PURE__ */ jsxRuntime.jsx("div", {
          className: withBaseName("startAdornmentContainer"),
          children: startAdornment
        }),
        /* @__PURE__ */ jsxRuntime.jsx("textarea", {
          "aria-describedby": clsx.clsx(formFieldDescribedBy, textAreaDescribedBy),
          "aria-labelledby": clsx.clsx(formFieldLabelledBy, textAreaLabelledBy),
          className: clsx.clsx(withBaseName("textarea"), textAreaProps == null ? void 0 : textAreaProps.className),
          disabled: isDisabled,
          id,
          readOnly: isReadOnly,
          ref: handleRef,
          required: isRequired,
          role,
          rows,
          tabIndex: isDisabled ? -1 : 0,
          onBlur: handleBlur,
          onChange: handleChange,
          onFocus: !isDisabled ? handleFocus : void 0,
          placeholder,
          value,
          ...restA11yProps,
          ...restTextAreaProps
        }),
        /* @__PURE__ */ jsxRuntime.jsxs("div", {
          className: withBaseName("suffixAdornments"),
          children: [
            !isDisabled && !isReadOnly && validationStatus && /* @__PURE__ */ jsxRuntime.jsx("div", {
              className: withBaseName("statusAdornmentContainer"),
              children: /* @__PURE__ */ jsxRuntime.jsx(StatusAdornment.StatusAdornment, {
                status: validationStatus
              })
            }),
            endAdornment && /* @__PURE__ */ jsxRuntime.jsx("div", {
              className: withBaseName("endAdornmentContainer"),
              children: endAdornment
            })
          ]
        }),
        /* @__PURE__ */ jsxRuntime.jsx("div", {
          className: withBaseName("activationIndicator")
        })
      ]
    });
  }
);

exports.MultilineInput = MultilineInput;
//# sourceMappingURL=MultilineInput.js.map
