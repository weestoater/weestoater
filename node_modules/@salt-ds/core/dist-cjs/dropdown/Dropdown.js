'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
var icons = require('@salt-ds/icons');
var ListControlState = require('../list-control/ListControlState.js');
var makePrefixer = require('../utils/makePrefixer.js');
var useFloatingUI = require('../utils/useFloatingUI/useFloatingUI.js');
var useForkRef = require('../utils/useForkRef.js');
var useId = require('../utils/useId.js');
require('../salt-provider/SaltProvider.js');
require('../viewport/ViewportProvider.js');
var clsx = require('clsx');
require('../accordion/AccordionGroup.js');
require('../accordion/AccordionPanel.js');
require('../accordion/Accordion.js');
require('../accordion/AccordionHeader.js');
require('../aria-announcer/AriaAnnouncerContext.js');
require('../avatar/Avatar.js');
require('../badge/Badge.js');
require('../banner/Banner.js');
require('../banner/BannerActions.js');
require('../banner/BannerContent.js');
require('../border-item/BorderItem.js');
require('../border-layout/BorderLayout.js');
require('../button/Button.js');
require('../card/Card.js');
require('../card/InteractableCard.js');
require('../checkbox/Checkbox.js');
require('../checkbox/CheckboxGroup.js');
var styles = require('@salt-ds/styles');
var window$1 = require('@salt-ds/window');
require('../combo-box/ComboBox.js');
require('../dialog/Dialog.js');
require('../dialog/DialogHeader.js');
require('../dialog/DialogActions.js');
require('../dialog/DialogContent.js');
require('../dialog/DialogContext.js');
require('../dialog/DialogCloseButton.js');
require('../drawer/Drawer.js');
require('../drawer/DrawerCloseButton.js');
require('../file-drop-zone/FileDropZone.js');
require('../file-drop-zone/FileDropZoneIcon.js');
require('../file-drop-zone/FileDropZoneTrigger.js');
require('../flex-item/FlexItem.js');
require('../flex-layout/FlexLayout.js');
require('../flow-layout/FlowLayout.js');
require('../form-field/FormField.js');
require('../status-indicator/StatusIndicator.js');
require('../text/Text.js');
require('../text/Code.js');
require('../text/Display.js');
require('../text/Headings.js');
require('../text/Label.js');
require('../text/TextAction.js');
require('../text/TextNotation.js');
require('../form-field-context/FormFieldContext.js');
var useFormFieldProps = require('../form-field-context/useFormFieldProps.js');
require('../grid-item/GridItem.js');
require('../grid-layout/GridLayout.js');
require('../input/Input.js');
require('../link/Link.js');
require('../link-card/LinkCard.js');
var ListControlContext = require('../list-control/ListControlContext.js');
require('../multiline-input/MultilineInput.js');
require('../navigation-item/NavigationItem.js');
require('../option/Option.js');
require('../option/OptionGroup.js');
require('../pagination/Pagination.js');
require('../pagination/Paginator.js');
require('../pagination/CompactInput.js');
require('../pagination/CompactPaginator.js');
require('../pagination/GoToInput.js');
require('../panel/Panel.js');
require('../pill/Pill.js');
require('../progress/CircularProgress/CircularProgress.js');
require('../progress/LinearProgress/LinearProgress.js');
require('../radio-button/RadioButton.js');
require('../radio-button/RadioButtonGroup.js');
require('../scrim/Scrim.js');
require('../spinner/Spinner.js');
require('../stack-layout/StackLayout.js');
var StatusAdornment = require('../status-adornment/StatusAdornment.js');
require('../toast/Toast.js');
require('../toast/ToastContent.js');
require('../split-layout/SplitLayout.js');
require('../switch/Switch.js');
require('../toggle-button/ToggleButton.js');
require('../toggle-button-group/ToggleButtonGroup.js');
require('../toggle-button-group/ToggleButtonGroupContext.js');
require('../tooltip/Tooltip.js');
var react = require('@floating-ui/react');
var Dropdown$1 = require('./Dropdown.css.js');
var OptionList = require('../option/OptionList.js');

function ExpandIcon({ open }) {
  return open ? /* @__PURE__ */ jsxRuntime.jsx(icons.ChevronUpIcon, {
    "aria-hidden": true
  }) : /* @__PURE__ */ jsxRuntime.jsx(icons.ChevronDownIcon, {
    "aria-hidden": true
  });
}
const withBaseName = makePrefixer.makePrefixer("saltDropdown");
const Dropdown = React.forwardRef(function Dropdown2(props, ref) {
  var _a, _b;
  const {
    "aria-labelledby": ariaLabelledBy,
    "aria-describedby": ariaDescribedBy,
    children,
    className,
    disabled: disabledProp,
    emptyReadOnlyMarker = "\u2014",
    readOnly: readOnlyProp,
    multiselect,
    onSelectionChange,
    selected,
    defaultSelected,
    defaultOpen,
    value,
    onOpenChange,
    open,
    placeholder,
    startAdornment,
    required: requiredProp,
    variant = "primary",
    validationStatus: validationStatusProp,
    onKeyDown,
    onFocus,
    onBlur,
    valueToString = ListControlState.defaultValueToString,
    ...rest
  } = props;
  const targetWindow = window$1.useWindow();
  styles.useComponentCssInjection({
    testId: "salt-dropdown",
    css: Dropdown$1,
    window: targetWindow
  });
  const {
    a11yProps: {
      "aria-describedby": formFieldDescribedBy,
      "aria-labelledby": formFieldLabelledBy
    } = {},
    disabled: formFieldDisabled,
    readOnly: formFieldReadOnly,
    necessity: formFieldRequired,
    validationStatus: formFieldValidationStatus
  } = useFormFieldProps.useFormFieldProps();
  const disabled = Boolean(disabledProp) || formFieldDisabled;
  const readOnly = Boolean(readOnlyProp) || formFieldReadOnly;
  const validationStatus = validationStatusProp != null ? validationStatusProp : formFieldValidationStatus;
  const required = formFieldRequired ? ["required", "asterisk"].includes(formFieldRequired) : requiredProp;
  const listControl = ListControlState.useListControl({
    open,
    defaultOpen,
    onOpenChange,
    multiselect,
    defaultSelected,
    selected,
    onSelectionChange,
    valueToString
  });
  const {
    activeState,
    setActive,
    openState,
    setOpen,
    openKey,
    getOptionAtIndex,
    getIndexOfOption,
    getOptionsMatching,
    getOptionFromSearch,
    options,
    selectedState,
    select,
    setFocusVisibleState,
    focusedState,
    setFocusedState,
    listRef
  } = listControl;
  const selectedValue = selectedState.map((item) => valueToString(item)).join(", ");
  const isEmptyReadOnly = readOnly && selectedValue === "";
  const valueText = isEmptyReadOnly ? emptyReadOnlyMarker : value != null ? value : selectedValue;
  useFloatingUI.useFloatingComponent();
  const handleOpenChange = (newOpen, _event, reason) => {
    const focusNotBlur = reason === "focus" && newOpen;
    if (readOnly || focusNotBlur)
      return;
    setOpen(newOpen);
  };
  const { x, y, strategy, elements, floating, reference, context } = useFloatingUI.useFloatingUI({
    open: openState && !readOnly && children != void 0,
    onOpenChange: handleOpenChange,
    placement: "bottom-start",
    middleware: [
      react.size({
        apply({ rects, elements: elements2, availableHeight }) {
          Object.assign(elements2.floating.style, {
            minWidth: `${rects.reference.width}px`,
            maxHeight: `max(calc((var(--salt-size-base) + var(--salt-spacing-100)) * 5), calc(${availableHeight}px - var(--salt-spacing-100)))`
          });
        }
      }),
      react.flip({ fallbackStrategy: "initialPlacement" })
    ]
  });
  const { getReferenceProps, getFloatingProps } = react.useInteractions([
    react.useDismiss(context),
    react.useFocus(context),
    react.useClick(context)
  ]);
  const buttonRef = React.useRef(null);
  const handleTriggerRef = useForkRef.useForkRef(reference, buttonRef);
  const handleButtonRef = useForkRef.useForkRef(handleTriggerRef, ref);
  const typeaheadString = React.useRef("");
  const typeaheadTimeout = React.useRef();
  const handleTypeahead = (event) => {
    if (typeaheadTimeout.current) {
      clearTimeout(typeaheadTimeout.current);
    }
    typeaheadString.current += event.key;
    typeaheadTimeout.current = window.setTimeout(() => {
      typeaheadString.current = "";
    }, 500);
    if (!openState) {
      setOpen(true, "input");
    }
    let newOption = getOptionFromSearch(typeaheadString.current, activeState);
    if (!newOption) {
      newOption = getOptionFromSearch(typeaheadString.current);
    }
    if (newOption) {
      setActive(newOption);
      setFocusVisibleState(true);
    }
  };
  const handleKeyDown = (event) => {
    const currentIndex = activeState ? getIndexOfOption(activeState) : -1;
    const count = options.length - 1;
    if (readOnly) {
      return;
    }
    if (!openState) {
      if (event.key === "ArrowDown" || event.key === "ArrowUp") {
        setOpen(true, void 0, event.key);
        return;
      }
    }
    if (event.key.length === 1 && !event.ctrlKey && !event.metaKey && !event.altKey) {
      event.preventDefault();
      event.stopPropagation();
      handleTypeahead(event);
    }
    let newActive;
    switch (event.key) {
      case "ArrowDown":
        newActive = getOptionAtIndex(Math.min(count, currentIndex + 1));
        break;
      case "ArrowUp":
        newActive = getOptionAtIndex(Math.max(0, currentIndex - 1));
        break;
      case "Home":
        newActive = getOptionAtIndex(0);
        break;
      case "End":
        newActive = getOptionAtIndex(count);
        break;
      case "PageUp":
        newActive = getOptionAtIndex(Math.max(0, currentIndex - 10));
        break;
      case "PageDown":
        newActive = getOptionAtIndex(Math.min(count, currentIndex + 10));
        break;
      case "Enter":
      case " ":
        if (openState && Boolean(activeState == null ? void 0 : activeState.disabled) || typeaheadString.current.trim().length > 0 && event.key === " ") {
          event.preventDefault();
          return;
        }
        if (!openState || !activeState) {
          return;
        }
        event.preventDefault();
        select(event, activeState);
        break;
      case "Tab":
        if (!multiselect && activeState) {
          select(event, activeState);
        }
        break;
    }
    if (newActive && (newActive == null ? void 0 : newActive.id) != (activeState == null ? void 0 : activeState.id)) {
      event.preventDefault();
      setActive(newActive);
      setFocusVisibleState(true);
    }
    onKeyDown == null ? void 0 : onKeyDown(event);
  };
  const handleFocus = (event) => {
    setFocusedState(true);
    onFocus == null ? void 0 : onFocus(event);
  };
  const handleBlur = (event) => {
    setFocusedState(false);
    onBlur == null ? void 0 : onBlur(event);
  };
  const handleListMouseOver = () => {
    setFocusVisibleState(false);
  };
  const handleFocusButton = () => {
    var _a2;
    (_a2 = buttonRef.current) == null ? void 0 : _a2.focus();
  };
  React.useEffect(() => {
    const activeIndex = activeState ? getIndexOfOption(activeState) : -1;
    let newActive = void 0;
    if (activeIndex > 0) {
      return;
    }
    if (!openState) {
      setActive(void 0);
      return;
    }
    if (selectedState.length > 0) {
      newActive = getOptionsMatching(
        (option) => option.value === selectedState[0]
      ).pop();
    }
    if (!newActive) {
      if (openKey.current === "ArrowDown") {
        newActive = getOptionAtIndex(0);
      } else if (openKey.current === "ArrowUp") {
        newActive = getOptionAtIndex(options.length - 1);
      }
    }
    if (!newActive) {
      newActive = getOptionAtIndex(0);
    }
    setActive(newActive);
  }, [openState, children]);
  const listId = useId.useId();
  const handleListRef = useForkRef.useForkRef(listRef, floating);
  return /* @__PURE__ */ jsxRuntime.jsxs(ListControlContext.ListControlContext.Provider, {
    value: listControl,
    children: [
      /* @__PURE__ */ jsxRuntime.jsxs("button", {
        className: clsx.clsx(
          withBaseName(),
          withBaseName(variant),
          {
            [withBaseName("disabled")]: disabled,
            [withBaseName(validationStatus != null ? validationStatus : "")]: validationStatus
          },
          className
        ),
        ref: handleButtonRef,
        role: "combobox",
        type: "button",
        disabled,
        "aria-readonly": readOnly ? "true" : void 0,
        "aria-required": required ? "true" : void 0,
        "aria-expanded": openState,
        "aria-activedescendant": activeState == null ? void 0 : activeState.id,
        "aria-labelledby": clsx.clsx(formFieldLabelledBy, ariaLabelledBy) || void 0,
        "aria-describedby": clsx.clsx(formFieldDescribedBy, ariaDescribedBy) || void 0,
        "aria-multiselectable": multiselect,
        "aria-controls": openState ? listId : void 0,
        ...getReferenceProps({
          onKeyDown: handleKeyDown,
          onFocus: handleFocus,
          onBlur: handleBlur,
          ...rest
        }),
        children: [
          startAdornment,
          /* @__PURE__ */ jsxRuntime.jsx("span", {
            className: clsx.clsx(withBaseName("content"), {
              [withBaseName("placeholder")]: !valueText
            }),
            children: !valueText ? placeholder : valueText
          }),
          validationStatus && /* @__PURE__ */ jsxRuntime.jsx(StatusAdornment.StatusAdornment, {
            status: validationStatus
          }),
          !readOnly && /* @__PURE__ */ jsxRuntime.jsx(ExpandIcon, {
            open: openState
          })
        ]
      }),
      /* @__PURE__ */ jsxRuntime.jsx(OptionList.OptionList, {
        open: (openState || focusedState) && !readOnly && children != void 0,
        ...getFloatingProps({
          onMouseOver: handleListMouseOver,
          onFocus: handleFocusButton,
          onClick: handleFocusButton
        }),
        left: x != null ? x : 0,
        top: y != null ? y : 0,
        position: strategy,
        width: (_a = elements.floating) == null ? void 0 : _a.offsetWidth,
        height: (_b = elements.floating) == null ? void 0 : _b.offsetHeight,
        ref: handleListRef,
        id: listId,
        collapsed: !openState,
        children
      })
    ]
  });
});

exports.Dropdown = Dropdown;
//# sourceMappingURL=Dropdown.js.map
