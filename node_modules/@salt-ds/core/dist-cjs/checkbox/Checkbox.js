'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var clsx = require('clsx');
var React = require('react');
var styles = require('@salt-ds/styles');
var window = require('@salt-ds/window');
var makePrefixer = require('../utils/makePrefixer.js');
var useControlled = require('../utils/useControlled.js');
require('../utils/useFloatingUI/useFloatingUI.js');
require('../utils/useId.js');
var useIsomorphicLayoutEffect = require('../utils/useIsomorphicLayoutEffect.js');
require('../salt-provider/SaltProvider.js');
require('../viewport/ViewportProvider.js');
require('../accordion/AccordionGroup.js');
require('../accordion/AccordionPanel.js');
require('../accordion/Accordion.js');
require('../accordion/AccordionHeader.js');
require('../aria-announcer/AriaAnnouncerContext.js');
require('../avatar/Avatar.js');
require('../badge/Badge.js');
require('../banner/Banner.js');
require('../banner/BannerActions.js');
require('../banner/BannerContent.js');
require('../border-item/BorderItem.js');
require('../border-layout/BorderLayout.js');
require('../button/Button.js');
require('../card/Card.js');
require('./CheckboxGroup.js');
var CheckboxIcon = require('./CheckboxIcon.js');
require('../combo-box/ComboBox.js');
require('../dialog/Dialog.js');
require('../dialog/DialogHeader.js');
require('../dialog/DialogActions.js');
require('../dialog/DialogContent.js');
require('../dialog/DialogContext.js');
require('../dialog/DialogCloseButton.js');
require('../drawer/Drawer.js');
require('../drawer/DrawerCloseButton.js');
require('../dropdown/Dropdown.js');
require('../file-drop-zone/FileDropZone.js');
require('../file-drop-zone/FileDropZoneIcon.js');
require('../file-drop-zone/FileDropZoneTrigger.js');
require('../flex-item/FlexItem.js');
require('../flex-layout/FlexLayout.js');
require('../flow-layout/FlowLayout.js');
require('../form-field/FormField.js');
require('../status-indicator/StatusIndicator.js');
require('../text/Text.js');
require('../text/Code.js');
require('../text/Display.js');
require('../text/Headings.js');
require('../text/Label.js');
require('../text/TextAction.js');
require('../text/TextNotation.js');
require('../form-field-context/FormFieldContext.js');
var useFormFieldProps = require('../form-field-context/useFormFieldProps.js');
require('../grid-item/GridItem.js');
require('../grid-layout/GridLayout.js');
require('../input/Input.js');
require('../interactable-card/InteractableCard.js');
require('../interactable-card/InteractableCardGroup.js');
require('../interactable-card/InteractableCardGroupContext.js');
require('../link/Link.js');
require('../link-card/LinkCard.js');
require('../list-control/ListControlContext.js');
require('../multiline-input/MultilineInput.js');
require('../navigation-item/NavigationItem.js');
require('../option/Option.js');
require('../option/OptionGroup.js');
require('../pagination/Pagination.js');
require('../pagination/Paginator.js');
require('../pagination/CompactInput.js');
require('../pagination/CompactPaginator.js');
require('../pagination/GoToInput.js');
require('../panel/Panel.js');
require('../pill/Pill.js');
require('../progress/CircularProgress/CircularProgress.js');
require('../progress/LinearProgress/LinearProgress.js');
require('../radio-button/RadioButton.js');
require('../radio-button/RadioButtonGroup.js');
require('../scrim/Scrim.js');
require('../segmented-button-group/SegmentedButtonGroup.js');
require('../spinner/Spinner.js');
require('../stack-layout/StackLayout.js');
require('../status-adornment/StatusAdornment.js');
require('../toast/Toast.js');
require('../toast/ToastContent.js');
require('../split-layout/SplitLayout.js');
require('../switch/Switch.js');
require('../toggle-button/ToggleButton.js');
require('../toggle-button-group/ToggleButtonGroup.js');
require('../toggle-button-group/ToggleButtonGroupContext.js');
require('../tooltip/Tooltip.js');
require('@floating-ui/react');
var useCheckboxGroup = require('./internal/useCheckboxGroup.js');
var Checkbox$1 = require('./Checkbox.css.js');

const withBaseName = makePrefixer.makePrefixer("saltCheckbox");
const Checkbox = React.forwardRef(
  function Checkbox2({
    checked: checkedProp,
    className,
    defaultChecked,
    disabled: disabledProp,
    error,
    indeterminate,
    inputProps = {},
    label,
    name,
    onBlur,
    onChange,
    onFocus,
    value,
    validationStatus: validationStatusProp,
    readOnly: readOnlyProp,
    ...rest
  }, ref) {
    var _a, _b;
    const targetWindow = window.useWindow();
    styles.useComponentCssInjection({
      testId: "salt-checkbox",
      css: Checkbox$1,
      window: targetWindow
    });
    const checkboxGroup = useCheckboxGroup.useCheckboxGroup();
    const {
      "aria-describedby": inputDescribedBy,
      "aria-labelledby": inputLabelledBy,
      className: inputClassName,
      onChange: inputOnChange,
      ...restInputProps
    } = inputProps;
    const checkboxGroupChecked = (checkboxGroup == null ? void 0 : checkboxGroup.checkedValues) != null && value != null ? checkboxGroup.checkedValues.includes(value) : checkedProp;
    const [checked, setChecked] = useControlled.useControlled({
      controlled: checkboxGroupChecked,
      default: Boolean(defaultChecked),
      name: "Checkbox",
      state: "checked"
    });
    const {
      a11yProps: formFieldA11yProps,
      disabled: formFieldDisabled,
      readOnly: formFieldReadOnly,
      validationStatus: formFieldValidationStatus
    } = useFormFieldProps.useFormFieldProps();
    const disabled = (checkboxGroup == null ? void 0 : checkboxGroup.disabled) || formFieldDisabled || disabledProp;
    const readOnly = (checkboxGroup == null ? void 0 : checkboxGroup.readOnly) || formFieldReadOnly || readOnlyProp;
    const validationStatus = !disabled ? (_b = (_a = checkboxGroup == null ? void 0 : checkboxGroup.validationStatus) != null ? _a : formFieldValidationStatus) != null ? _b : validationStatusProp : void 0;
    const inputRef = React.useRef(null);
    const handleChange = (event) => {
      var _a2;
      if (event.nativeEvent.defaultPrevented || readOnly) {
        return;
      }
      const value2 = event.target.checked;
      setChecked(value2);
      onChange == null ? void 0 : onChange(event);
      inputOnChange == null ? void 0 : inputOnChange(event);
      (_a2 = checkboxGroup == null ? void 0 : checkboxGroup.onChange) == null ? void 0 : _a2.call(checkboxGroup, event);
    };
    useIsomorphicLayoutEffect.useIsomorphicLayoutEffect(() => {
      if (inputRef.current != null) {
        inputRef.current.indeterminate = indeterminate != null ? indeterminate : false;
      }
    }, [indeterminate]);
    return /* @__PURE__ */ jsxRuntime.jsxs("label", {
      className: clsx.clsx(
        withBaseName(),
        {
          [withBaseName("disabled")]: disabled,
          [withBaseName("readOnly")]: readOnly,
          [withBaseName("error")]: error,
          [withBaseName(validationStatus != null ? validationStatus : "")]: validationStatus
        },
        className
      ),
      ref,
      ...rest,
      children: [
        /* @__PURE__ */ jsxRuntime.jsx("input", {
          "aria-readonly": readOnly || void 0,
          "aria-describedby": clsx.clsx(
            checkboxGroup === void 0 ? formFieldA11yProps == null ? void 0 : formFieldA11yProps["aria-describedby"] : void 0,
            inputDescribedBy
          ),
          "aria-labelledby": clsx.clsx(
            checkboxGroup === void 0 ? formFieldA11yProps == null ? void 0 : formFieldA11yProps["aria-labelledby"] : void 0,
            inputLabelledBy
          ),
          name,
          value,
          checked,
          className: clsx.clsx(withBaseName("input"), inputClassName),
          "data-indeterminate": indeterminate,
          defaultChecked,
          disabled,
          readOnly,
          onBlur,
          onChange: handleChange,
          onFocus,
          type: "checkbox",
          ref: inputRef,
          ...restInputProps
        }),
        /* @__PURE__ */ jsxRuntime.jsx(CheckboxIcon.CheckboxIcon, {
          checked,
          disabled,
          readOnly,
          indeterminate,
          validationStatus,
          error
        }),
        label
      ]
    });
  }
);

exports.Checkbox = Checkbox;
//# sourceMappingURL=Checkbox.js.map
