'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var clsx = require('clsx');
var React = require('react');
var makePrefixer = require('../utils/makePrefixer.js');
var useControlled = require('../utils/useControlled.js');
require('../utils/useFloatingUI/useFloatingUI.js');
var useId = require('../utils/useId.js');
require('../salt-provider/SaltProvider.js');
require('../viewport/ViewportProvider.js');
require('../accordion/AccordionGroup.js');
require('../accordion/AccordionPanel.js');
require('../accordion/Accordion.js');
require('../accordion/AccordionHeader.js');
require('../aria-announcer/AriaAnnouncerContext.js');
require('../avatar/Avatar.js');
require('../badge/Badge.js');
require('../banner/Banner.js');
require('../banner/BannerActions.js');
require('../banner/BannerContent.js');
require('../border-item/BorderItem.js');
require('../border-layout/BorderLayout.js');
require('../button/Button.js');
require('../card/Card.js');
require('../card/InteractableCard.js');
require('../checkbox/Checkbox.js');
require('../checkbox/CheckboxGroup.js');
var styles = require('@salt-ds/styles');
var window = require('@salt-ds/window');
require('@salt-ds/icons');
require('../combo-box/ComboBox.js');
require('../dialog/Dialog.js');
require('../dialog/DialogHeader.js');
require('../dialog/DialogActions.js');
require('../dialog/DialogContent.js');
require('../dialog/DialogContext.js');
require('../dialog/DialogCloseButton.js');
require('../drawer/Drawer.js');
require('../drawer/DrawerCloseButton.js');
require('../dropdown/Dropdown.js');
require('../file-drop-zone/FileDropZone.js');
require('../file-drop-zone/FileDropZoneIcon.js');
require('../file-drop-zone/FileDropZoneTrigger.js');
require('../flex-item/FlexItem.js');
require('../flex-layout/FlexLayout.js');
require('../flow-layout/FlowLayout.js');
require('../form-field/FormField.js');
require('../status-indicator/StatusIndicator.js');
require('../text/Text.js');
require('../text/Code.js');
require('../text/Display.js');
require('../text/Headings.js');
require('../text/Label.js');
require('../text/TextAction.js');
require('../text/TextNotation.js');
require('../form-field-context/FormFieldContext.js');
var useFormFieldProps = require('../form-field-context/useFormFieldProps.js');
require('../grid-item/GridItem.js');
require('../grid-layout/GridLayout.js');
require('../input/Input.js');
require('../link/Link.js');
require('../link-card/LinkCard.js');
require('../list-control/ListControlContext.js');
require('../multiline-input/MultilineInput.js');
require('../navigation-item/NavigationItem.js');
require('../option/Option.js');
require('../option/OptionGroup.js');
require('../pagination/Pagination.js');
require('../pagination/Paginator.js');
require('../pagination/CompactInput.js');
require('../pagination/CompactPaginator.js');
require('../pagination/GoToInput.js');
require('../panel/Panel.js');
require('../pill/Pill.js');
require('../progress/CircularProgress/CircularProgress.js');
require('../progress/LinearProgress/LinearProgress.js');
require('./RadioButton.js');
require('../scrim/Scrim.js');
require('../spinner/Spinner.js');
require('../stack-layout/StackLayout.js');
require('../status-adornment/StatusAdornment.js');
require('../toast/Toast.js');
require('../toast/ToastContent.js');
require('../split-layout/SplitLayout.js');
require('../switch/Switch.js');
require('../toggle-button/ToggleButton.js');
require('../toggle-button-group/ToggleButtonGroup.js');
require('../toggle-button-group/ToggleButtonGroupContext.js');
require('../tooltip/Tooltip.js');
require('@floating-ui/react');
var RadioGroupContext = require('./internal/RadioGroupContext.js');
var RadioButtonGroup$1 = require('./RadioButtonGroup.css.js');

const withBaseName = makePrefixer.makePrefixer("saltRadioButtonGroup");
const RadioButtonGroup = React.forwardRef(function RadioButtonGroup2(props, ref) {
  const {
    "aria-labelledby": ariaLabelledBy,
    "aria-describedby": ariaDescribedBy,
    children,
    className,
    defaultValue,
    direction = "vertical",
    disabled: disabledProp,
    wrap = true,
    name: nameProp,
    onChange,
    readOnly: readOnlyProp,
    value: valueProp,
    validationStatus: validationStatusProp,
    ...rest
  } = props;
  const targetWindow = window.useWindow();
  styles.useComponentCssInjection({
    testId: "salt-radio-button-group",
    css: RadioButtonGroup$1,
    window: targetWindow
  });
  const {
    a11yProps,
    disabled: formFieldDisabled,
    readOnly: formFieldReadOnly,
    validationStatus: formFieldValidationStatus
  } = useFormFieldProps.useFormFieldProps();
  const disabled = formFieldDisabled || disabledProp;
  const readOnly = formFieldReadOnly || readOnlyProp;
  const validationStatus = formFieldValidationStatus != null ? formFieldValidationStatus : validationStatusProp;
  const [value, setStateValue] = useControlled.useControlled({
    controlled: valueProp,
    default: defaultValue,
    state: "value",
    name: "RadioButtonGroup"
  });
  const handleChange = (event) => {
    setStateValue(event.target.value);
    onChange == null ? void 0 : onChange(event);
  };
  const name = useId.useId(nameProp);
  return /* @__PURE__ */ jsxRuntime.jsx("fieldset", {
    role: "radiogroup",
    "aria-readonly": readOnly,
    "aria-labelledby": clsx.clsx(a11yProps == null ? void 0 : a11yProps["aria-labelledby"], ariaLabelledBy) || void 0,
    "aria-describedby": clsx.clsx(a11yProps == null ? void 0 : a11yProps["aria-describedby"], ariaDescribedBy) || void 0,
    className: clsx.clsx(
      withBaseName(),
      withBaseName(direction),
      {
        [withBaseName("noWrap")]: !wrap
      },
      className
    ),
    "data-testid": "radio-button-group",
    ref,
    ...rest,
    children: /* @__PURE__ */ jsxRuntime.jsx(RadioGroupContext.RadioGroupContext.Provider, {
      value: {
        disabled,
        name,
        onChange: handleChange,
        readOnly,
        validationStatus,
        value
      },
      children
    })
  });
});

exports.RadioButtonGroup = RadioButtonGroup;
//# sourceMappingURL=RadioButtonGroup.js.map
