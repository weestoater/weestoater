'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var clsx = require('clsx');
var React = require('react');
var styles = require('@salt-ds/styles');
var window = require('@salt-ds/window');
var icons = require('@salt-ds/icons');
var makePrefixer = require('../utils/makePrefixer.js');
var useControlled = require('../utils/useControlled.js');
require('../utils/useFloatingUI/useFloatingUI.js');
var useForkRef = require('../utils/useForkRef.js');
var useId = require('../utils/useId.js');
require('../salt-provider/SaltProvider.js');
require('../viewport/ViewportProvider.js');
require('../accordion/AccordionGroup.js');
require('../accordion/AccordionPanel.js');
require('../accordion/Accordion.js');
require('../accordion/AccordionHeader.js');
require('../aria-announcer/AriaAnnouncerContext.js');
require('../avatar/Avatar.js');
require('../badge/Badge.js');
require('../banner/Banner.js');
require('../banner/BannerActions.js');
require('../banner/BannerContent.js');
require('../border-item/BorderItem.js');
require('../border-layout/BorderLayout.js');
require('../button/Button.js');
require('../card/Card.js');
require('../card/InteractableCard.js');
require('../checkbox/Checkbox.js');
require('../checkbox/CheckboxGroup.js');
require('../combo-box/ComboBox.js');
require('../dialog/Dialog.js');
require('../dialog/DialogHeader.js');
require('../dialog/DialogActions.js');
require('../dialog/DialogContent.js');
require('../dialog/DialogContext.js');
require('../dialog/DialogCloseButton.js');
require('../drawer/Drawer.js');
require('../drawer/DrawerCloseButton.js');
require('../dropdown/Dropdown.js');
require('../file-drop-zone/FileDropZone.js');
require('../file-drop-zone/FileDropZoneIcon.js');
require('../file-drop-zone/FileDropZoneTrigger.js');
require('../flex-item/FlexItem.js');
require('../flex-layout/FlexLayout.js');
require('../flow-layout/FlowLayout.js');
require('../form-field/FormField.js');
require('../status-indicator/StatusIndicator.js');
require('../text/Text.js');
require('../text/Code.js');
require('../text/Display.js');
require('../text/Headings.js');
require('../text/Label.js');
require('../text/TextAction.js');
require('../text/TextNotation.js');
require('../form-field-context/FormFieldContext.js');
var useFormFieldProps = require('../form-field-context/useFormFieldProps.js');
require('../grid-item/GridItem.js');
require('../grid-layout/GridLayout.js');
require('../input/Input.js');
require('../link/Link.js');
require('../link-card/LinkCard.js');
require('../list-control/ListControlContext.js');
require('../multiline-input/MultilineInput.js');
require('../navigation-item/NavigationItem.js');
require('../option/Option.js');
require('../option/OptionGroup.js');
require('../pagination/Pagination.js');
require('../pagination/Paginator.js');
require('../pagination/CompactInput.js');
require('../pagination/CompactPaginator.js');
require('../pagination/GoToInput.js');
require('../panel/Panel.js');
var Pill = require('../pill/Pill.js');
require('../progress/CircularProgress/CircularProgress.js');
require('../progress/LinearProgress/LinearProgress.js');
require('../radio-button/RadioButton.js');
require('../radio-button/RadioButtonGroup.js');
require('../scrim/Scrim.js');
require('../spinner/Spinner.js');
require('../stack-layout/StackLayout.js');
var StatusAdornment = require('../status-adornment/StatusAdornment.js');
require('../toast/Toast.js');
require('../toast/ToastContent.js');
require('../split-layout/SplitLayout.js');
require('../switch/Switch.js');
require('../toggle-button/ToggleButton.js');
require('../toggle-button-group/ToggleButtonGroup.js');
require('../toggle-button-group/ToggleButtonGroupContext.js');
require('../tooltip/Tooltip.js');
require('@floating-ui/react');
var useTruncatePills = require('./useTruncatePills.js');
var PillInput$1 = require('./PillInput.css.js');

const withBaseName = makePrefixer.makePrefixer("saltPillInput");
const PillInput = React.forwardRef(function PillInput2({
  "aria-activedescendant": ariaActiveDescendant,
  "aria-expanded": ariaExpanded,
  "aria-owns": ariaOwns,
  className: classNameProp,
  disabled,
  emptyReadOnlyMarker = "\u2014",
  endAdornment,
  hidePillClose,
  id: idProp,
  inputProps = {},
  inputRef: inputRefProp,
  placeholder,
  pills = [],
  onPillRemove,
  readOnly: readOnlyProp,
  role,
  startAdornment,
  style,
  textAlign = "left",
  value: valueProp,
  defaultValue: defaultValueProp = valueProp === void 0 ? "" : void 0,
  validationStatus: validationStatusProp,
  variant = "primary",
  truncate,
  ...other
}, ref) {
  const targetWindow = window.useWindow();
  styles.useComponentCssInjection({
    testId: "salt-pill-input",
    css: PillInput$1,
    window: targetWindow
  });
  const {
    a11yProps: {
      "aria-describedby": formFieldDescribedBy,
      "aria-labelledby": formFieldLabelledBy
    } = {},
    disabled: formFieldDisabled,
    readOnly: formFieldReadOnly,
    necessity: formFieldRequired,
    validationStatus: formFieldValidationStatus
  } = useFormFieldProps.useFormFieldProps();
  const restA11yProps = {
    "aria-activedescendant": ariaActiveDescendant,
    "aria-expanded": ariaExpanded,
    "aria-owns": ariaOwns
  };
  const isDisabled = disabled || formFieldDisabled;
  const isReadOnly = readOnlyProp || formFieldReadOnly;
  const validationStatus = formFieldValidationStatus != null ? formFieldValidationStatus : validationStatusProp;
  const [focusedPillIndex, setFocusedPillIndex] = React.useState(-1);
  const isEmptyReadOnly = isReadOnly && !defaultValueProp && !valueProp;
  const defaultValue = isEmptyReadOnly ? emptyReadOnlyMarker : defaultValueProp;
  const {
    "aria-describedby": inputDescribedBy,
    "aria-labelledby": inputLabelledBy,
    onChange,
    required: inputPropsRequired,
    onKeyDown: inputOnKeyDown,
    ...restInputProps
  } = inputProps;
  const isRequired = formFieldRequired ? ["required", "asterisk"].includes(formFieldRequired) : inputPropsRequired;
  const [value, setValue] = useControlled.useControlled({
    controlled: valueProp,
    default: defaultValue,
    name: "Input",
    state: "value"
  });
  const { visiblePills, pillListRef } = useTruncatePills.useTruncatePills({
    pills,
    enable: truncate && pills.length > 0
  });
  const id = useId.useId(idProp);
  const pillListId = `${id}-optionsList`;
  const pillElementsRef = React.useRef([]);
  const inputRef = React.useRef(null);
  const handleInputRef = useForkRef.useForkRef(inputRef, inputRefProp);
  const handleChange = (event) => {
    const value2 = event.target.value;
    setValue(value2);
    onChange == null ? void 0 : onChange(event);
  };
  const handleKeyDown = (event) => {
    var _a;
    const target = event.currentTarget;
    if (target.selectionStart === 0 && target.selectionEnd == 0) {
      const lastPillIndex = pills.length - 1;
      const lastPill = pills[lastPillIndex];
      if (event.key === "Backspace" && lastPill) {
        event.preventDefault();
        onPillRemove == null ? void 0 : onPillRemove(event, lastPillIndex);
      } else if (event.key === "ArrowLeft") {
        event.preventDefault();
        (_a = pillElementsRef.current[lastPillIndex]) == null ? void 0 : _a.focus();
      }
    }
    inputOnKeyDown == null ? void 0 : inputOnKeyDown(event);
  };
  const handlePillKeyDown = (event) => {
    var _a, _b, _c, _d, _e, _f;
    const target = event.currentTarget;
    const index = Number(target.dataset.index);
    if (event.key === "ArrowLeft") {
      event.preventDefault();
      (_a = pillElementsRef.current[index - 1]) == null ? void 0 : _a.focus();
    } else if (event.key === "ArrowRight") {
      event.preventDefault();
      if (index === pills.length - 1) {
        (_b = inputRef == null ? void 0 : inputRef.current) == null ? void 0 : _b.focus();
      } else {
        (_c = pillElementsRef.current[index + 1]) == null ? void 0 : _c.focus();
      }
    } else if (event.key == "Delete" || event.key === "Backspace") {
      event.preventDefault();
      onPillRemove == null ? void 0 : onPillRemove(event, index);
      if (pills.length === 1) {
        (_d = inputRef.current) == null ? void 0 : _d.focus();
      } else if (index === pills.length - 1) {
        (_e = pillElementsRef.current[pills.length - 2]) == null ? void 0 : _e.focus();
      } else {
        (_f = pillElementsRef.current[index]) == null ? void 0 : _f.focus();
      }
    }
  };
  const handlePillClick = (event) => {
    var _a;
    const target = event.currentTarget;
    const index = Number(target.dataset.index);
    onPillRemove == null ? void 0 : onPillRemove(event, index);
    (_a = inputRef.current) == null ? void 0 : _a.focus();
  };
  const inputStyle = {
    "--input-textAlign": textAlign,
    ...style
  };
  return /* @__PURE__ */ jsxRuntime.jsxs("div", {
    className: clsx.clsx(
      withBaseName(),
      withBaseName(variant),
      {
        [withBaseName("disabled")]: isDisabled,
        [withBaseName("readOnly")]: isReadOnly,
        [withBaseName("truncate")]: truncate,
        [withBaseName(validationStatus != null ? validationStatus : "")]: validationStatus
      },
      classNameProp
    ),
    ref,
    style: inputStyle,
    ...other,
    children: [
      startAdornment && /* @__PURE__ */ jsxRuntime.jsx("div", {
        className: withBaseName("startAdornmentContainer"),
        children: startAdornment
      }),
      /* @__PURE__ */ jsxRuntime.jsxs("div", {
        className: withBaseName("inputWrapper"),
        ref: pillListRef,
        children: [
          /* @__PURE__ */ jsxRuntime.jsxs("div", {
            role: "list",
            className: withBaseName("pillList"),
            "aria-labelledby": clsx.clsx(formFieldLabelledBy, pillListId),
            "aria-label": "Selected Options",
            id: pillListId,
            children: [
              visiblePills == null ? void 0 : visiblePills.map((pill, index) => /* @__PURE__ */ jsxRuntime.jsx("div", {
                role: "listitem",
                children: /* @__PURE__ */ jsxRuntime.jsxs(Pill.Pill, {
                  "data-index": index,
                  disabled,
                  ref: (element) => {
                    if (element) {
                      pillElementsRef.current[index] = element;
                    } else {
                      pillElementsRef.current = pillElementsRef.current.filter(
                        (pillEl) => pillEl !== element
                      );
                    }
                  },
                  onFocus: () => setFocusedPillIndex(index),
                  onKeyDown: handlePillKeyDown,
                  onClick: handlePillClick,
                  tabIndex: focusedPillIndex === -1 || focusedPillIndex === index ? 0 : -1,
                  children: [
                    pill,
                    !hidePillClose && /* @__PURE__ */ jsxRuntime.jsx(icons.CloseIcon, {
                      "aria-label": "click to close"
                    })
                  ]
                })
              }, index)),
              visiblePills.length < pills.length && /* @__PURE__ */ jsxRuntime.jsx("div", {
                role: "listitem",
                children: /* @__PURE__ */ jsxRuntime.jsx("div", {
                  "data-overflowindicator": true,
                  className: withBaseName("overflowIndicator"),
                  children: /* @__PURE__ */ jsxRuntime.jsx(icons.OverflowMenuIcon, {
                    "aria-hidden": true
                  })
                })
              })
            ]
          }),
          /* @__PURE__ */ jsxRuntime.jsx("input", {
            "aria-describedby": clsx.clsx(formFieldDescribedBy, inputDescribedBy),
            "aria-labelledby": clsx.clsx(formFieldLabelledBy, inputLabelledBy),
            className: clsx.clsx(withBaseName("input"), inputProps == null ? void 0 : inputProps.className),
            disabled: isDisabled,
            id,
            readOnly: isReadOnly,
            ref: handleInputRef,
            role,
            tabIndex: isDisabled ? -1 : 0,
            onChange: handleChange,
            onKeyDown: handleKeyDown,
            placeholder,
            value,
            ...restA11yProps,
            ...restInputProps,
            required: isRequired
          })
        ]
      }),
      !isDisabled && !isReadOnly && validationStatus && /* @__PURE__ */ jsxRuntime.jsx(StatusAdornment.StatusAdornment, {
        status: validationStatus
      }),
      endAdornment && /* @__PURE__ */ jsxRuntime.jsx("div", {
        className: withBaseName("endAdornmentContainer"),
        children: endAdornment
      }),
      /* @__PURE__ */ jsxRuntime.jsx("div", {
        className: withBaseName("activationIndicator")
      })
    ]
  });
});

exports.PillInput = PillInput;
//# sourceMappingURL=PillInput.js.map
