'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
require('../utils/useFloatingUI/useFloatingUI.js');
require('../utils/useId.js');
var useIsomorphicLayoutEffect = require('../utils/useIsomorphicLayoutEffect.js');
require('../salt-provider/SaltProvider.js');
require('../viewport/ViewportProvider.js');
require('clsx');
var useValueEffect = require('../utils/useValueEffect.js');
var useResizeObserver = require('../utils/useResizeObserver.js');
var window = require('@salt-ds/window');

function useTruncatePills({
  pills,
  enable
}) {
  const pillListRef = React.useRef(null);
  const [visibleCount, setVisibleItems] = useValueEffect.useValueEffect(pills.length);
  const targetWindow = window.useWindow();
  const updateOverflow = React.useCallback(() => {
    if (!enable) {
      return;
    }
    const computeVisible = (visibleCount2) => {
      const pillList = pillListRef.current;
      if (pillList && targetWindow) {
        const pillElements = Array.from(
          pillList.querySelectorAll('[role="listitem"]')
        );
        const maxWidth = pillList.getBoundingClientRect().width;
        const listGap = parseInt(targetWindow.getComputedStyle(pillList).gap);
        const isShowingOverflow = pillList.querySelector(
          "[data-overflowindicator]"
        );
        let currentSize = 0;
        let newVisibleCount = 0;
        if (isShowingOverflow) {
          const pill = pillElements.pop();
          if (pill) {
            const pillWidth = pill.getBoundingClientRect().width;
            currentSize += pillWidth + listGap;
          }
        }
        for (const pill of pillElements) {
          const pillWidth = pill.getBoundingClientRect().width;
          currentSize += pillWidth + listGap;
          if (Math.round(currentSize) <= Math.round(maxWidth)) {
            newVisibleCount++;
          } else {
            break;
          }
        }
        return newVisibleCount;
      }
      return visibleCount2;
    };
    setVisibleItems(function* () {
      yield pills.length;
      const newVisibleCount = computeVisible(pills.length);
      const isMeasuring = newVisibleCount < pills.length && newVisibleCount > 0;
      yield newVisibleCount;
      if (isMeasuring) {
        yield computeVisible(newVisibleCount);
      }
    });
  }, [pills, setVisibleItems, enable, targetWindow]);
  useIsomorphicLayoutEffect.useIsomorphicLayoutEffect(updateOverflow, [updateOverflow, pills]);
  useResizeObserver.useResizeObserver({
    ref: pillListRef,
    onResize: updateOverflow
  });
  return {
    pillListRef,
    visibleCount,
    visiblePills: enable ? pills.slice(0, visibleCount) : pills
  };
}

exports.useTruncatePills = useTruncatePills;
//# sourceMappingURL=useTruncatePills.js.map
