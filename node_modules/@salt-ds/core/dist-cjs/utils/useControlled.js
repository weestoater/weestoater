'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');

function useControlled({
  controlled,
  default: defaultProp,
  name,
  state = "value"
}) {
  const { current: isControlled } = React.useRef(controlled !== void 0);
  const [valueState, setValue] = React.useState(defaultProp);
  const value = controlled !== void 0 ? controlled : valueState;
  const { current: defaultValue } = React.useRef(defaultProp);
  React.useEffect(() => {
    if (process.env.NODE_ENV !== "production") {
      if (isControlled !== (controlled !== void 0)) {
        console.error(
          [
            `Salt: A component is changing the ${isControlled ? "" : "un"}controlled ${state} state of ${name} to be ${isControlled ? "un" : ""}controlled.`,
            "Elements should not switch from uncontrolled to controlled (or vice versa).",
            `Decide between using a controlled or uncontrolled ${name} element for the lifetime of the component.`,
            "The nature of the state is determined during the first render, it's considered controlled if the value is not `undefined`.",
            "More info: https://fb.me/react-controlled-components"
          ].join("\n")
        );
      }
    }
    return void 0;
  }, [state, name, controlled]);
  React.useEffect(() => {
    if (process.env.NODE_ENV !== "production") {
      if (!isControlled && defaultValue !== defaultProp) {
        console.error(
          [
            `Salt: A component is changing the default ${state} state of an uncontrolled ${name} after being initialized. To suppress this warning opt to use a controlled ${name}.`
          ].join("\n")
        );
      }
    }
    return void 0;
  }, [JSON.stringify(defaultProp, ignoreReactElements)]);
  const setValueIfUncontrolled = React.useCallback(
    (newValue) => {
      if (!isControlled) {
        setValue(newValue);
      }
    },
    [isControlled]
  );
  return [value, setValueIfUncontrolled, isControlled];
}
function ignoreReactElements(key, value) {
  return React.isValidElement(value) ? null : value;
}

exports.useControlled = useControlled;
//# sourceMappingURL=useControlled.js.map
