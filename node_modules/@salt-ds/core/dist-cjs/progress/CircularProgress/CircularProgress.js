'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
var clsx = require('clsx');
var makePrefixer = require('../../utils/makePrefixer.js');
require('../../utils/useFloatingUI/useFloatingUI.js');
require('../../utils/useId.js');
require('../../salt-provider/SaltProvider.js');
require('../../viewport/ViewportProvider.js');
require('../../accordion/AccordionGroup.js');
require('../../accordion/AccordionPanel.js');
require('../../accordion/Accordion.js');
require('../../accordion/AccordionHeader.js');
require('../../aria-announcer/AriaAnnouncerContext.js');
require('../../avatar/Avatar.js');
require('../../badge/Badge.js');
require('../../banner/Banner.js');
require('../../banner/BannerActions.js');
require('../../banner/BannerContent.js');
require('../../border-item/BorderItem.js');
require('../../border-layout/BorderLayout.js');
require('../../button/Button.js');
require('../../card/Card.js');
require('../../checkbox/Checkbox.js');
require('../../checkbox/CheckboxGroup.js');
var styles = require('@salt-ds/styles');
var window = require('@salt-ds/window');
require('@salt-ds/icons');
require('../../combo-box/ComboBox.js');
require('../../dialog/Dialog.js');
require('../../dialog/DialogHeader.js');
require('../../dialog/DialogActions.js');
require('../../dialog/DialogContent.js');
require('../../dialog/DialogContext.js');
require('../../dialog/DialogCloseButton.js');
require('../../drawer/Drawer.js');
require('../../drawer/DrawerCloseButton.js');
require('../../dropdown/Dropdown.js');
require('../../file-drop-zone/FileDropZone.js');
require('../../file-drop-zone/FileDropZoneIcon.js');
require('../../file-drop-zone/FileDropZoneTrigger.js');
require('../../flex-item/FlexItem.js');
require('../../flex-layout/FlexLayout.js');
require('../../flow-layout/FlowLayout.js');
require('../../form-field/FormField.js');
require('../../status-indicator/StatusIndicator.js');
var Text = require('../../text/Text.js');
require('../../text/Code.js');
require('../../text/Display.js');
require('../../text/Headings.js');
require('../../text/Label.js');
require('../../text/TextAction.js');
require('../../text/TextNotation.js');
require('../../form-field-context/FormFieldContext.js');
require('../../grid-item/GridItem.js');
require('../../grid-layout/GridLayout.js');
require('../../input/Input.js');
require('../../interactable-card/InteractableCard.js');
require('../../interactable-card/InteractableCardGroup.js');
require('../../interactable-card/InteractableCardGroupContext.js');
require('../../link/Link.js');
require('../../link-card/LinkCard.js');
require('../../list-control/ListControlContext.js');
require('../../multiline-input/MultilineInput.js');
require('../../navigation-item/NavigationItem.js');
require('../../option/Option.js');
require('../../option/OptionGroup.js');
require('../../pagination/Pagination.js');
require('../../pagination/Paginator.js');
require('../../pagination/CompactInput.js');
require('../../pagination/CompactPaginator.js');
require('../../pagination/GoToInput.js');
require('../../panel/Panel.js');
require('../../pill/Pill.js');
require('../LinearProgress/LinearProgress.js');
require('../../radio-button/RadioButton.js');
require('../../radio-button/RadioButtonGroup.js');
require('../../scrim/Scrim.js');
require('../../segmented-button-group/SegmentedButtonGroup.js');
require('../../spinner/Spinner.js');
require('../../stack-layout/StackLayout.js');
require('../../status-adornment/StatusAdornment.js');
require('../../toast/Toast.js');
require('../../toast/ToastContent.js');
require('../../split-layout/SplitLayout.js');
require('../../switch/Switch.js');
require('../../toggle-button/ToggleButton.js');
require('../../toggle-button-group/ToggleButtonGroup.js');
require('../../toggle-button-group/ToggleButtonGroupContext.js');
require('../../tooltip/Tooltip.js');
require('@floating-ui/react');
var CircularProgress$1 = require('./CircularProgress.css.js');

const withBaseName = makePrefixer.makePrefixer("saltCircularProgress");
const getRotationAngle = (bar, shift = 0) => {
  return -180 + (bar - shift) / 50 * 180;
};
const CircularProgress = React.forwardRef(function CircularProgress2({
  className,
  hideLabel = false,
  max = 100,
  min = 0,
  value = 0,
  bufferValue = 0,
  ...rest
}, ref) {
  const targetWindow = window.useWindow();
  styles.useComponentCssInjection({
    testId: "salt-circular-progress",
    css: CircularProgress$1,
    window: targetWindow
  });
  const bufferSubOverlayRightStyle = {};
  const bufferSubOverlayLeftStyle = {};
  const barSubOverlayRightStyle = {};
  const barSubOverlayLeftStyle = {};
  const buffer = (bufferValue - min) / (max - min) * 100;
  const progress = (value - min) / (max - min) * 100;
  if (progress <= 50) {
    const rotationAngle = getRotationAngle(progress);
    barSubOverlayRightStyle.transform = `rotate(${rotationAngle}deg)`;
    barSubOverlayLeftStyle.transform = "rotate(-180deg)";
  } else {
    const rotationAngle = getRotationAngle(progress, 50);
    barSubOverlayRightStyle.transform = "rotate(0deg)";
    barSubOverlayLeftStyle.transform = `rotate(${rotationAngle}deg)`;
  }
  if (buffer <= 50) {
    const rotationAngle = getRotationAngle(buffer);
    bufferSubOverlayRightStyle.transform = `rotate(${rotationAngle}deg)`;
    bufferSubOverlayLeftStyle.transform = "rotate(-180deg)";
  } else {
    const rotationAngle = getRotationAngle(buffer, 50);
    bufferSubOverlayRightStyle.transform = "rotate(0deg)";
    bufferSubOverlayLeftStyle.transform = `rotate(${rotationAngle}deg)`;
  }
  return /* @__PURE__ */ jsxRuntime.jsxs("div", {
    className: clsx.clsx(withBaseName(), className),
    ref,
    role: "progressbar",
    "aria-valuemax": max,
    "aria-valuemin": min,
    "aria-valuenow": Math.round(value),
    ...rest,
    children: [
      /* @__PURE__ */ jsxRuntime.jsx("div", {
        className: withBaseName("track")
      }),
      /* @__PURE__ */ jsxRuntime.jsxs("div", {
        className: withBaseName("bars"),
        children: [
          buffer > 0 && /* @__PURE__ */ jsxRuntime.jsx("div", {
            className: withBaseName("bufferOverlayRight"),
            children: /* @__PURE__ */ jsxRuntime.jsxs("div", {
              className: clsx.clsx(withBaseName("bufferSubOverlayRight"), {
                [withBaseName("bufferSubOverlay")]: buffer <= 50
              }),
              style: bufferSubOverlayRightStyle,
              children: [
                /* @__PURE__ */ jsxRuntime.jsx("div", {
                  className: withBaseName("bufferBackground")
                }),
                /* @__PURE__ */ jsxRuntime.jsx("div", {
                  className: withBaseName("bufferBorder")
                })
              ]
            })
          }),
          /* @__PURE__ */ jsxRuntime.jsx("div", {
            className: withBaseName("barOverlayRight"),
            children: /* @__PURE__ */ jsxRuntime.jsx("div", {
              className: withBaseName("barSubOverlayRight"),
              style: barSubOverlayRightStyle,
              children: /* @__PURE__ */ jsxRuntime.jsx("div", {
                className: withBaseName("bar")
              })
            })
          }),
          buffer > 0 && /* @__PURE__ */ jsxRuntime.jsx("div", {
            className: withBaseName("bufferOverlayLeft"),
            children: /* @__PURE__ */ jsxRuntime.jsxs("div", {
              className: clsx.clsx(
                withBaseName("bufferSubOverlay"),
                withBaseName("bufferSubOverlayLeft")
              ),
              style: bufferSubOverlayLeftStyle,
              children: [
                /* @__PURE__ */ jsxRuntime.jsx("div", {
                  className: withBaseName("bufferBorder")
                }),
                /* @__PURE__ */ jsxRuntime.jsx("div", {
                  className: withBaseName("bufferBackground")
                })
              ]
            })
          }),
          /* @__PURE__ */ jsxRuntime.jsx("div", {
            className: withBaseName("barOverlayLeft"),
            children: /* @__PURE__ */ jsxRuntime.jsx("div", {
              className: withBaseName("barSubOverlayLeft"),
              style: barSubOverlayLeftStyle,
              children: /* @__PURE__ */ jsxRuntime.jsx("div", {
                className: withBaseName("bar")
              })
            })
          })
        ]
      }),
      !hideLabel && /* @__PURE__ */ jsxRuntime.jsx(Text.Text, {
        styleAs: "h2",
        className: withBaseName("progressLabel"),
        children: `${Math.round(progress)} %`
      })
    ]
  });
});

exports.CircularProgress = CircularProgress;
//# sourceMappingURL=CircularProgress.js.map
