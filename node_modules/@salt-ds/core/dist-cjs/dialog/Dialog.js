'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
var clsx = require('clsx');
var react = require('@floating-ui/react');
var makePrefixer = require('../utils/makePrefixer.js');
var useFloatingUI = require('../utils/useFloatingUI/useFloatingUI.js');
var useForkRef = require('../utils/useForkRef.js');
var useId = require('../utils/useId.js');
var useResponsiveProp = require('../utils/useResponsiveProp.js');
require('../accordion/AccordionGroup.js');
require('../accordion/AccordionPanel.js');
require('../accordion/Accordion.js');
require('../accordion/AccordionHeader.js');
require('../aria-announcer/AriaAnnouncerContext.js');
require('../avatar/Avatar.js');
require('../badge/Badge.js');
require('../banner/Banner.js');
require('../banner/BannerActions.js');
require('../banner/BannerContent.js');
require('../border-item/BorderItem.js');
require('../border-layout/BorderLayout.js');
require('../button/Button.js');
require('../card/Card.js');
require('../card/InteractableCard.js');
require('../checkbox/Checkbox.js');
require('../checkbox/CheckboxGroup.js');
var styles = require('@salt-ds/styles');
var window = require('@salt-ds/window');
require('../salt-provider/SaltProvider.js');
require('@salt-ds/icons');
require('../combo-box/ComboBox.js');
require('./DialogHeader.js');
require('./DialogActions.js');
require('./DialogContent.js');
var DialogContext = require('./DialogContext.js');
require('./DialogCloseButton.js');
require('../drawer/Drawer.js');
require('../drawer/DrawerCloseButton.js');
require('../dropdown/Dropdown.js');
require('../file-drop-zone/FileDropZone.js');
require('../file-drop-zone/FileDropZoneIcon.js');
require('../file-drop-zone/FileDropZoneTrigger.js');
require('../flex-item/FlexItem.js');
require('../flex-layout/FlexLayout.js');
require('../flow-layout/FlowLayout.js');
require('../form-field/FormField.js');
require('../status-indicator/StatusIndicator.js');
require('../text/Text.js');
require('../text/Code.js');
require('../text/Display.js');
require('../text/Headings.js');
require('../text/Label.js');
require('../text/TextAction.js');
require('../text/TextNotation.js');
require('../form-field-context/FormFieldContext.js');
require('../grid-item/GridItem.js');
require('../grid-layout/GridLayout.js');
require('../input/Input.js');
require('../link/Link.js');
require('../link-card/LinkCard.js');
require('../list-control/ListControlContext.js');
require('../multiline-input/MultilineInput.js');
require('../navigation-item/NavigationItem.js');
require('../option/Option.js');
require('../option/OptionGroup.js');
require('../pagination/Pagination.js');
require('../pagination/Paginator.js');
require('../pagination/CompactInput.js');
require('../pagination/CompactPaginator.js');
require('../pagination/GoToInput.js');
require('../panel/Panel.js');
require('../pill/Pill.js');
require('../progress/CircularProgress/CircularProgress.js');
require('../progress/LinearProgress/LinearProgress.js');
require('../radio-button/RadioButton.js');
require('../radio-button/RadioButtonGroup.js');
var Scrim = require('../scrim/Scrim.js');
require('../spinner/Spinner.js');
require('../stack-layout/StackLayout.js');
require('../status-adornment/StatusAdornment.js');
require('../toast/Toast.js');
require('../toast/ToastContent.js');
require('../split-layout/SplitLayout.js');
require('../switch/Switch.js');
require('../toggle-button/ToggleButton.js');
require('../toggle-button-group/ToggleButtonGroup.js');
require('../toggle-button-group/ToggleButtonGroupContext.js');
require('../tooltip/Tooltip.js');
require('../viewport/ViewportProvider.js');
var Dialog$1 = require('./Dialog.css.js');

const ConditionalScrimWrapper = ({
  condition,
  children
}) => {
  return condition ? /* @__PURE__ */ jsxRuntime.jsx(Scrim.Scrim, {
    fixed: true,
    children
  }) : /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, {
    children: [
      children,
      " "
    ]
  });
};
const withBaseName = makePrefixer.makePrefixer("saltDialog");
const Dialog = React.forwardRef(function Dialog2(props, ref) {
  var _a, _b;
  const {
    children,
    className,
    open = false,
    onOpenChange,
    status,
    disableDismiss,
    size = "medium",
    disableScrim,
    idProp,
    ...rest
  } = props;
  const targetWindow = window.useWindow();
  styles.useComponentCssInjection({
    testId: "salt-dialog",
    css: Dialog$1,
    window: targetWindow
  });
  const id = useId.useId(idProp);
  const currentbreakpoint = useResponsiveProp.useCurrentBreakpoint();
  const [showComponent, setShowComponent] = React.useState(false);
  const { context, floating, elements } = useFloatingUI.useFloatingUI({
    open,
    onOpenChange
  });
  const { getFloatingProps } = react.useInteractions([
    react.useClick(context),
    react.useDismiss(context, { enabled: !disableDismiss })
  ]);
  const { Component: FloatingComponent } = useFloatingUI.useFloatingComponent();
  const floatingRef = useForkRef.useForkRef(floating, ref);
  React.useEffect(() => {
    if (open && !showComponent) {
      setShowComponent(true);
    }
    if (!open && showComponent) {
      const animate = setTimeout(() => {
        setShowComponent(false);
      }, 300);
      return () => clearTimeout(animate);
    }
  }, [open, showComponent, setShowComponent]);
  const contextValue = React.useMemo(() => ({ status, id }), [status, id]);
  return /* @__PURE__ */ jsxRuntime.jsx(DialogContext.DialogContext.Provider, {
    value: contextValue,
    children: /* @__PURE__ */ jsxRuntime.jsx(ConditionalScrimWrapper, {
      condition: open && !disableScrim,
      children: /* @__PURE__ */ jsxRuntime.jsx(FloatingComponent, {
        open: showComponent,
        role: "dialog",
        "aria-modal": "true",
        "aria-labelledby": id,
        ref: floatingRef,
        width: (_a = elements.floating) == null ? void 0 : _a.offsetWidth,
        height: (_b = elements.floating) == null ? void 0 : _b.offsetHeight,
        focusManagerProps: {
          context
        },
        className: clsx.clsx(
          withBaseName(),
          withBaseName(size, currentbreakpoint),
          {
            [withBaseName("enterAnimation")]: open,
            [withBaseName("exitAnimation")]: !open,
            [withBaseName(status)]: status
          },
          className
        ),
        onAnimationEnd: () => {
          if (!open && showComponent) {
            setShowComponent(false);
          }
        },
        ...getFloatingProps(),
        ...rest,
        children
      })
    })
  });
});

exports.ConditionalScrimWrapper = ConditionalScrimWrapper;
exports.Dialog = Dialog;
//# sourceMappingURL=Dialog.js.map
