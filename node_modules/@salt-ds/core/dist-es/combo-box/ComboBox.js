import { jsxs, jsx, Fragment } from 'react/jsx-runtime';
import { forwardRef, useRef, useEffect } from 'react';
import { clsx } from 'clsx';
import { size, flip, useInteractions, useDismiss, useFocus, useClick } from '@floating-ui/react';
import { ChevronUpIcon, ChevronDownIcon } from '@salt-ds/icons';
import { useWindow } from '@salt-ds/window';
import { useComponentCssInjection } from '@salt-ds/styles';
import { makePrefixer } from '../utils/makePrefixer.js';
import { useFloatingUI } from '../utils/useFloatingUI/useFloatingUI.js';
import { useForkRef } from '../utils/useForkRef.js';
import { useId } from '../utils/useId.js';
import '../salt-provider/SaltProvider.js';
import '../viewport/ViewportProvider.js';
import '../accordion/AccordionGroup.js';
import '../accordion/AccordionPanel.js';
import '../accordion/Accordion.js';
import '../accordion/AccordionHeader.js';
import '../aria-announcer/AriaAnnouncerContext.js';
import '../avatar/Avatar.js';
import '../badge/Badge.js';
import '../banner/Banner.js';
import '../banner/BannerActions.js';
import '../banner/BannerContent.js';
import '../border-item/BorderItem.js';
import '../border-layout/BorderLayout.js';
import { Button } from '../button/Button.js';
import '../card/Card.js';
import '../card/InteractableCard.js';
import '../checkbox/Checkbox.js';
import '../checkbox/CheckboxGroup.js';
import '../dialog/Dialog.js';
import '../dialog/DialogHeader.js';
import '../dialog/DialogActions.js';
import '../dialog/DialogContent.js';
import '../dialog/DialogContext.js';
import '../dialog/DialogCloseButton.js';
import '../drawer/Drawer.js';
import '../drawer/DrawerCloseButton.js';
import '../dropdown/Dropdown.js';
import '../file-drop-zone/FileDropZone.js';
import '../file-drop-zone/FileDropZoneIcon.js';
import '../file-drop-zone/FileDropZoneTrigger.js';
import '../flex-item/FlexItem.js';
import '../flex-layout/FlexLayout.js';
import '../flow-layout/FlowLayout.js';
import '../form-field/FormField.js';
import '../status-indicator/StatusIndicator.js';
import '../text/Text.js';
import '../text/Code.js';
import '../text/Display.js';
import '../text/Headings.js';
import '../text/Label.js';
import '../text/TextAction.js';
import '../text/TextNotation.js';
import '../form-field-context/FormFieldContext.js';
import { useFormFieldProps } from '../form-field-context/useFormFieldProps.js';
import '../grid-item/GridItem.js';
import '../grid-layout/GridLayout.js';
import '../input/Input.js';
import '../link/Link.js';
import '../link-card/LinkCard.js';
import { ListControlContext } from '../list-control/ListControlContext.js';
import '../multiline-input/MultilineInput.js';
import '../navigation-item/NavigationItem.js';
import '../option/Option.js';
import '../option/OptionGroup.js';
import '../pagination/Pagination.js';
import '../pagination/Paginator.js';
import '../pagination/CompactInput.js';
import '../pagination/CompactPaginator.js';
import '../pagination/GoToInput.js';
import '../panel/Panel.js';
import '../pill/Pill.js';
import '../progress/CircularProgress/CircularProgress.js';
import '../progress/LinearProgress/LinearProgress.js';
import '../radio-button/RadioButton.js';
import '../radio-button/RadioButtonGroup.js';
import '../scrim/Scrim.js';
import '../spinner/Spinner.js';
import '../stack-layout/StackLayout.js';
import '../status-adornment/StatusAdornment.js';
import '../toast/Toast.js';
import '../toast/ToastContent.js';
import '../split-layout/SplitLayout.js';
import '../switch/Switch.js';
import '../toggle-button/ToggleButton.js';
import '../toggle-button-group/ToggleButtonGroup.js';
import '../toggle-button-group/ToggleButtonGroupContext.js';
import '../tooltip/Tooltip.js';
import { defaultValueToString } from '../list-control/ListControlState.js';
import { useComboBox } from './useComboBox.js';
import { OptionList } from '../option/OptionList.js';
import { PillInput } from '../pill-input/PillInput.js';
import css_248z from './ComboBox.css.js';

const withBaseName = makePrefixer("saltComboBox");
const ComboBox = forwardRef(function ComboBox2(props, ref) {
  var _a, _b;
  const {
    children,
    className,
    disabled: disabledProp,
    endAdornment,
    readOnly: readOnlyProp,
    multiselect,
    onSelectionChange,
    selected,
    defaultSelected,
    defaultOpen,
    onOpenChange,
    onChange,
    open,
    inputProps: inputPropsProp,
    variant = "primary",
    onKeyDown,
    onFocus,
    onBlur,
    value,
    defaultValue,
    valueToString = defaultValueToString,
    truncate,
    ...rest
  } = props;
  const targetWindow = useWindow();
  useComponentCssInjection({
    testId: "salt-combo-box",
    css: css_248z,
    window: targetWindow
  });
  const {
    a11yProps: { "aria-labelledby": formFieldLabelledBy } = {},
    disabled: formFieldDisabled,
    readOnly: formFieldReadOnly
  } = useFormFieldProps();
  const disabled = Boolean(disabledProp) || formFieldDisabled;
  const readOnly = Boolean(readOnlyProp) || formFieldReadOnly;
  const inputRef = useRef(null);
  const listControl = useComboBox({
    open,
    defaultOpen,
    onOpenChange,
    multiselect,
    defaultSelected,
    selected,
    onSelectionChange,
    value,
    defaultValue,
    disabled,
    readOnly,
    valueToString
  });
  const {
    activeState,
    setActive,
    openState,
    setOpen,
    openKey,
    getOptionAtIndex,
    getIndexOfOption,
    getOptionsMatching,
    options,
    selectedState,
    select,
    clear,
    focusVisibleState,
    setFocusVisibleState,
    focusedState,
    setFocusedState,
    listRef,
    valueState,
    setValueState
  } = listControl;
  const handleOpenChange = (newOpen, _event, reason) => {
    var _a2;
    const focusNotBlur = reason === "focus" && newOpen;
    if (reason == "focus") {
      setFocusedState(newOpen);
    }
    if (reason == "focus" && !newOpen) {
      setFocusVisibleState(false);
    }
    if (readOnly || focusNotBlur)
      return;
    setOpen(newOpen);
    if (newOpen) {
      (_a2 = inputRef.current) == null ? void 0 : _a2.focus();
    }
  };
  const { x, y, strategy, elements, floating, reference, context } = useFloatingUI({
    open: openState && !readOnly && children != void 0,
    onOpenChange: handleOpenChange,
    placement: "bottom-start",
    strategy: "fixed",
    middleware: [
      size({
        apply({ rects, elements: elements2, availableHeight }) {
          Object.assign(elements2.floating.style, {
            minWidth: `${rects.reference.width}px`,
            maxHeight: `max(calc(${availableHeight}px - var(--salt-spacing-100)), calc((var(--salt-size-base) + var(--salt-spacing-100)) * 5))`
          });
        }
      }),
      flip({ fallbackStrategy: "initialPlacement" })
    ]
  });
  const { getReferenceProps, getFloatingProps } = useInteractions([
    useDismiss(context),
    useFocus(context),
    useClick(context, { keyboardHandlers: false, toggle: false })
  ]);
  const handleRef = useForkRef(reference, ref);
  const handleButtonClick = (event) => {
    if (!readOnly) {
      event.stopPropagation();
      setFocusVisibleState(false);
      setOpen(!openState, "manual");
    }
  };
  const handleButtonFocus = () => {
    var _a2;
    (_a2 = inputRef.current) == null ? void 0 : _a2.focus();
  };
  const handleKeyDown = (event) => {
    const currentIndex = activeState ? getIndexOfOption(activeState) : -1;
    const count = options.length - 1;
    if (readOnly) {
      return;
    }
    if (!openState) {
      if (event.key === "ArrowDown" || event.key === "ArrowUp") {
        setOpen(true, void 0, event.key);
        return;
      }
    }
    let newActive;
    switch (event.key) {
      case "ArrowDown":
        newActive = getOptionAtIndex(Math.min(count, currentIndex + 1));
        break;
      case "ArrowUp":
        newActive = getOptionAtIndex(Math.max(0, currentIndex - 1));
        break;
      case "Home":
        newActive = getOptionAtIndex(0);
        break;
      case "End":
        newActive = getOptionAtIndex(count);
        break;
      case "PageUp":
        newActive = getOptionAtIndex(Math.max(0, currentIndex - 10));
        break;
      case "PageDown":
        newActive = getOptionAtIndex(Math.min(count, currentIndex + 10));
        break;
      case "Enter":
        if (openState && (activeState == null ? void 0 : activeState.disabled)) {
          event.preventDefault();
          return;
        }
        if (!openState || !activeState) {
          return;
        }
        select(event, activeState);
        if (!multiselect) {
          event.preventDefault();
        }
        break;
      case "Tab":
        if (!multiselect && activeState) {
          select(event, activeState);
        }
        break;
    }
    if (newActive) {
      setFocusVisibleState(true);
    }
    if (newActive && (newActive == null ? void 0 : newActive.id) != (activeState == null ? void 0 : activeState.id)) {
      event.preventDefault();
      setActive(newActive);
    }
    onKeyDown == null ? void 0 : onKeyDown(event);
  };
  const handleFocus = (event) => {
    setFocusedState(true);
    onFocus == null ? void 0 : onFocus(event);
  };
  const handleChange = (event) => {
    if (!openState) {
      setOpen(true, "input");
    }
    if (event.target.value === "" && !multiselect) {
      clear(event);
    }
    setValueState(event.target.value);
    queueMicrotask(() => {
      if (event.target.value !== "") {
        const newOption = getOptionAtIndex(0);
        if (newOption) {
          setActive(newOption);
        }
      } else {
        setActive(void 0);
      }
    });
    onChange == null ? void 0 : onChange(event);
  };
  const handlePillRemove = (event, index) => {
    event.stopPropagation();
    const removed = selectedState[index];
    select(event, getOptionsMatching((option) => option.value === removed)[0]);
  };
  const handleListMouseOver = () => {
    setFocusVisibleState(false);
  };
  const handleListMouseLeave = () => {
    setActive(void 0);
  };
  const handleFocusInput = () => {
    var _a2;
    (_a2 = inputRef.current) == null ? void 0 : _a2.focus();
  };
  useEffect(() => {
    const activeIndex = activeState ? getIndexOfOption(activeState) : -1;
    let newActive = void 0;
    if (activeIndex > -1) {
      return;
    }
    if (!openState) {
      setActive(void 0);
      return;
    }
    if (selectedState.length > 0) {
      newActive = getOptionsMatching(
        (option) => option.value === selectedState[0]
      ).pop();
    }
    if (!newActive) {
      if (openKey.current === "ArrowDown") {
        newActive = getOptionAtIndex(0);
        setFocusVisibleState(true);
      } else if (openKey.current === "ArrowUp") {
        newActive = getOptionAtIndex(options.length - 1);
        setFocusVisibleState(true);
      }
    }
    if (!newActive) {
      newActive = getOptionAtIndex(0);
    }
    setActive(newActive);
  }, [openState, children]);
  const buttonId = useId();
  const listId = useId();
  const handleListRef = useForkRef(listRef, floating);
  return /* @__PURE__ */ jsxs(ListControlContext.Provider, {
    value: listControl,
    children: [
      /* @__PURE__ */ jsx(PillInput, {
        tabIndex: -1,
        className: clsx(
          withBaseName(),
          {
            [withBaseName("focused")]: focusedState,
            [withBaseName("focusVisible")]: focusVisibleState
          },
          className
        ),
        endAdornment: /* @__PURE__ */ jsxs(Fragment, {
          children: [
            endAdornment,
            !readOnly ? /* @__PURE__ */ jsx(Button, {
              "aria-labelledby": clsx(buttonId, formFieldLabelledBy),
              "aria-label": "Show options",
              "aria-expanded": openState,
              "aria-controls": openState ? listId : void 0,
              "aria-haspopup": "listbox",
              disabled,
              variant: "secondary",
              onClick: handleButtonClick,
              onFocus: handleButtonFocus,
              tabIndex: -1,
              children: openState ? /* @__PURE__ */ jsx(ChevronUpIcon, {
                "aria-hidden": true
              }) : /* @__PURE__ */ jsx(ChevronDownIcon, {
                "aria-hidden": true
              })
            }) : void 0
          ]
        }),
        onChange: handleChange,
        role: "combobox",
        disabled,
        readOnly,
        inputProps: {
          role: "combobox",
          "aria-expanded": openState,
          "aria-multiselectable": multiselect,
          "aria-controls": openState ? listId : void 0,
          onKeyDown: handleKeyDown,
          ...inputPropsProp
        },
        "aria-activedescendant": activeState == null ? void 0 : activeState.id,
        variant,
        inputRef,
        value: valueState,
        ref: handleRef,
        ...getReferenceProps({
          onBlur,
          onFocus: handleFocus,
          ...rest
        }),
        pills: multiselect ? selectedState.map((item) => valueToString(item)) : [],
        truncate: truncate && !focusedState && !openState,
        onPillRemove: handlePillRemove,
        hidePillClose: !focusedState || readOnly,
        emptyReadOnlyMarker: readOnly && selectedState.length > 0 ? "" : void 0
      }),
      /* @__PURE__ */ jsx(OptionList, {
        open: (openState || focusedState) && !readOnly && children != void 0,
        collapsed: !openState,
        ref: handleListRef,
        id: listId,
        tabIndex: -1,
        ...getFloatingProps({
          onMouseOver: handleListMouseOver,
          onFocus: handleFocusInput,
          onClick: handleFocusInput,
          onMouseLeave: handleListMouseLeave
        }),
        left: x != null ? x : 0,
        top: y != null ? y : 0,
        position: strategy,
        width: (_a = elements.floating) == null ? void 0 : _a.offsetWidth,
        height: (_b = elements.floating) == null ? void 0 : _b.offsetHeight,
        children
      })
    ]
  });
});

export { ComboBox };
//# sourceMappingURL=ComboBox.js.map
