import { jsxs, jsx } from 'react/jsx-runtime';
import { forwardRef, useRef, useMemo, useEffect } from 'react';
import { clsx } from 'clsx';
import { useWindow } from '@salt-ds/window';
import { useComponentCssInjection } from '@salt-ds/styles';
import { makePrefixer } from '../utils/makePrefixer.js';
import '../utils/useFloatingUI/useFloatingUI.js';
import { useForkRef } from '../utils/useForkRef.js';
import { useId } from '../utils/useId.js';
import '../salt-provider/SaltProvider.js';
import '../viewport/ViewportProvider.js';
import '../accordion/AccordionGroup.js';
import '../accordion/AccordionPanel.js';
import '../accordion/Accordion.js';
import '../accordion/AccordionHeader.js';
import '../aria-announcer/AriaAnnouncerContext.js';
import '../avatar/Avatar.js';
import '../badge/Badge.js';
import '../banner/Banner.js';
import '../banner/BannerActions.js';
import '../banner/BannerContent.js';
import '../border-item/BorderItem.js';
import '../border-layout/BorderLayout.js';
import '../button/Button.js';
import '../card/Card.js';
import '../card/InteractableCard.js';
import { Checkbox } from '../checkbox/Checkbox.js';
import '../checkbox/CheckboxGroup.js';
import '@salt-ds/icons';
import '../combo-box/ComboBox.js';
import '../dialog/Dialog.js';
import '../dialog/DialogHeader.js';
import '../dialog/DialogActions.js';
import '../dialog/DialogContent.js';
import '../dialog/DialogContext.js';
import '../dialog/DialogCloseButton.js';
import '../drawer/Drawer.js';
import '../drawer/DrawerCloseButton.js';
import '../dropdown/Dropdown.js';
import '../file-drop-zone/FileDropZone.js';
import '../file-drop-zone/FileDropZoneIcon.js';
import '../file-drop-zone/FileDropZoneTrigger.js';
import '../flex-item/FlexItem.js';
import '../flex-layout/FlexLayout.js';
import '../flow-layout/FlowLayout.js';
import '../form-field/FormField.js';
import '../status-indicator/StatusIndicator.js';
import '../text/Text.js';
import '../text/Code.js';
import '../text/Display.js';
import '../text/Headings.js';
import '../text/Label.js';
import '../text/TextAction.js';
import '../text/TextNotation.js';
import '../form-field-context/FormFieldContext.js';
import '../grid-item/GridItem.js';
import '../grid-layout/GridLayout.js';
import '../input/Input.js';
import '../link/Link.js';
import '../link-card/LinkCard.js';
import { useListControlContext } from '../list-control/ListControlContext.js';
import '../multiline-input/MultilineInput.js';
import '../navigation-item/NavigationItem.js';
import './OptionGroup.js';
import '../pagination/Pagination.js';
import '../pagination/Paginator.js';
import '../pagination/CompactInput.js';
import '../pagination/CompactPaginator.js';
import '../pagination/GoToInput.js';
import '../panel/Panel.js';
import '../pill/Pill.js';
import '../progress/CircularProgress/CircularProgress.js';
import '../progress/LinearProgress/LinearProgress.js';
import '../radio-button/RadioButton.js';
import '../radio-button/RadioButtonGroup.js';
import '../scrim/Scrim.js';
import '../spinner/Spinner.js';
import '../stack-layout/StackLayout.js';
import '../status-adornment/StatusAdornment.js';
import '../toast/Toast.js';
import '../toast/ToastContent.js';
import '../split-layout/SplitLayout.js';
import '../switch/Switch.js';
import '../toggle-button/ToggleButton.js';
import '../toggle-button-group/ToggleButtonGroup.js';
import '../toggle-button-group/ToggleButtonGroupContext.js';
import '../tooltip/Tooltip.js';
import '@floating-ui/react';
import css_248z from './Option.css.js';

const withBaseName = makePrefixer("saltOption");
const Option = forwardRef(function Option2(props, ref) {
  const {
    className,
    children,
    disabled,
    onClick,
    id: idProp,
    value,
    ...rest
  } = props;
  const targetWindow = useWindow();
  useComponentCssInjection({
    testId: "salt-option",
    css: css_248z,
    window: targetWindow
  });
  const optionRef = useRef(null);
  const id = useId(idProp);
  const {
    setActive,
    activeState,
    multiselect,
    select,
    register,
    selectedState,
    focusVisibleState,
    valueToString
  } = useListControlContext();
  const selected = selectedState.includes(value);
  const active = (activeState == null ? void 0 : activeState.id) === id;
  const optionValue = useMemo(
    () => ({
      id: String(id),
      disabled: Boolean(disabled),
      value
    }),
    [id, disabled, value]
  );
  const handleClick = (event) => {
    if (disabled || id == void 0) {
      return;
    }
    setActive(optionValue);
    select(event, optionValue);
    onClick == null ? void 0 : onClick(event);
  };
  const handleMouseOver = () => {
    setActive(optionValue);
  };
  useEffect(() => {
    if (id && optionRef.current) {
      return register(optionValue, optionRef.current);
    }
  }, [optionValue, id, register]);
  const handleRef = useForkRef(optionRef, ref);
  return /* @__PURE__ */ jsxs("div", {
    "aria-disabled": disabled ? "true" : void 0,
    "aria-selected": selected,
    className: clsx(
      withBaseName(),
      {
        [withBaseName("active")]: active,
        [withBaseName("focusVisible")]: focusVisibleState && active
      },
      className
    ),
    ref: handleRef,
    role: "option",
    id,
    onClick: handleClick,
    onMouseOver: handleMouseOver,
    ...rest,
    children: [
      multiselect && /* @__PURE__ */ jsx(Checkbox, {
        checked: selected,
        "aria-hidden": "true",
        inputProps: { tabIndex: -1 }
      }),
      children != null ? children : valueToString(value)
    ]
  });
});

export { Option };
//# sourceMappingURL=Option.js.map
