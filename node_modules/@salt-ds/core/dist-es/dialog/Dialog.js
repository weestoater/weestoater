import { jsx, jsxs, Fragment } from 'react/jsx-runtime';
import { forwardRef, useState, useEffect, useMemo } from 'react';
import { clsx } from 'clsx';
import { useInteractions, useClick, useDismiss } from '@floating-ui/react';
import { makePrefixer } from '../utils/makePrefixer.js';
import { useFloatingUI, useFloatingComponent } from '../utils/useFloatingUI/useFloatingUI.js';
import { useForkRef } from '../utils/useForkRef.js';
import { useId } from '../utils/useId.js';
import { useCurrentBreakpoint } from '../utils/useResponsiveProp.js';
import '../accordion/AccordionGroup.js';
import '../accordion/AccordionPanel.js';
import '../accordion/Accordion.js';
import '../accordion/AccordionHeader.js';
import '../aria-announcer/AriaAnnouncerContext.js';
import '../avatar/Avatar.js';
import '../badge/Badge.js';
import '../banner/Banner.js';
import '../banner/BannerActions.js';
import '../banner/BannerContent.js';
import '../border-item/BorderItem.js';
import '../border-layout/BorderLayout.js';
import '../button/Button.js';
import '../card/Card.js';
import '../checkbox/Checkbox.js';
import '../checkbox/CheckboxGroup.js';
import { useComponentCssInjection } from '@salt-ds/styles';
import { useWindow } from '@salt-ds/window';
import '../salt-provider/SaltProvider.js';
import '@salt-ds/icons';
import '../combo-box/ComboBox.js';
import './DialogHeader.js';
import './DialogActions.js';
import './DialogContent.js';
import { DialogContext } from './DialogContext.js';
import './DialogCloseButton.js';
import '../drawer/Drawer.js';
import '../drawer/DrawerCloseButton.js';
import '../dropdown/Dropdown.js';
import '../file-drop-zone/FileDropZone.js';
import '../file-drop-zone/FileDropZoneIcon.js';
import '../file-drop-zone/FileDropZoneTrigger.js';
import '../flex-item/FlexItem.js';
import '../flex-layout/FlexLayout.js';
import '../flow-layout/FlowLayout.js';
import '../form-field/FormField.js';
import '../status-indicator/StatusIndicator.js';
import '../text/Text.js';
import '../text/Code.js';
import '../text/Display.js';
import '../text/Headings.js';
import '../text/Label.js';
import '../text/TextAction.js';
import '../text/TextNotation.js';
import '../form-field-context/FormFieldContext.js';
import '../grid-item/GridItem.js';
import '../grid-layout/GridLayout.js';
import '../input/Input.js';
import '../interactable-card/InteractableCard.js';
import '../interactable-card/InteractableCardGroup.js';
import '../interactable-card/InteractableCardGroupContext.js';
import '../link/Link.js';
import '../link-card/LinkCard.js';
import '../list-control/ListControlContext.js';
import '../multiline-input/MultilineInput.js';
import '../navigation-item/NavigationItem.js';
import '../option/Option.js';
import '../option/OptionGroup.js';
import '../pagination/Pagination.js';
import '../pagination/Paginator.js';
import '../pagination/CompactInput.js';
import '../pagination/CompactPaginator.js';
import '../pagination/GoToInput.js';
import '../panel/Panel.js';
import '../pill/Pill.js';
import '../progress/CircularProgress/CircularProgress.js';
import '../progress/LinearProgress/LinearProgress.js';
import '../radio-button/RadioButton.js';
import '../radio-button/RadioButtonGroup.js';
import { Scrim } from '../scrim/Scrim.js';
import '../segmented-button-group/SegmentedButtonGroup.js';
import '../spinner/Spinner.js';
import '../stack-layout/StackLayout.js';
import '../status-adornment/StatusAdornment.js';
import '../toast/Toast.js';
import '../toast/ToastContent.js';
import '../split-layout/SplitLayout.js';
import '../switch/Switch.js';
import '../toggle-button/ToggleButton.js';
import '../toggle-button-group/ToggleButtonGroup.js';
import '../toggle-button-group/ToggleButtonGroupContext.js';
import '../tooltip/Tooltip.js';
import '../viewport/ViewportProvider.js';
import css_248z from './Dialog.css.js';

const ConditionalScrimWrapper = ({
  condition,
  children
}) => {
  return condition ? /* @__PURE__ */ jsx(Scrim, {
    fixed: true,
    children
  }) : /* @__PURE__ */ jsxs(Fragment, {
    children: [
      children,
      " "
    ]
  });
};
const withBaseName = makePrefixer("saltDialog");
const Dialog = forwardRef(function Dialog2(props, ref) {
  var _a, _b;
  const {
    children,
    className,
    open = false,
    onOpenChange,
    status,
    disableDismiss,
    size = "medium",
    disableScrim,
    idProp,
    ...rest
  } = props;
  const targetWindow = useWindow();
  useComponentCssInjection({
    testId: "salt-dialog",
    css: css_248z,
    window: targetWindow
  });
  const id = useId(idProp);
  const currentbreakpoint = useCurrentBreakpoint();
  const [showComponent, setShowComponent] = useState(false);
  const { context, floating, elements } = useFloatingUI({
    open: showComponent,
    onOpenChange
  });
  const { getFloatingProps } = useInteractions([
    useClick(context),
    useDismiss(context, { enabled: !disableDismiss })
  ]);
  const { Component: FloatingComponent } = useFloatingComponent();
  const floatingRef = useForkRef(floating, ref);
  useEffect(() => {
    if (open && !showComponent) {
      setShowComponent(true);
    }
    if (!open && showComponent) {
      const animate = setTimeout(() => {
        setShowComponent(false);
      }, 300);
      return () => clearTimeout(animate);
    }
  }, [open, showComponent, setShowComponent]);
  const contextValue = useMemo(() => ({ status, id }), [status, id]);
  return /* @__PURE__ */ jsx(DialogContext.Provider, {
    value: contextValue,
    children: /* @__PURE__ */ jsx(ConditionalScrimWrapper, {
      condition: showComponent && !disableScrim,
      children: /* @__PURE__ */ jsx(FloatingComponent, {
        open: showComponent,
        role: "dialog",
        "aria-modal": "true",
        "aria-labelledby": id,
        ref: floatingRef,
        width: (_a = elements.floating) == null ? void 0 : _a.offsetWidth,
        height: (_b = elements.floating) == null ? void 0 : _b.offsetHeight,
        focusManagerProps: {
          context
        },
        className: clsx(
          withBaseName(),
          withBaseName(size, currentbreakpoint),
          {
            [withBaseName("enterAnimation")]: open,
            [withBaseName("exitAnimation")]: !open,
            [withBaseName(status)]: status
          },
          className
        ),
        onAnimationEnd: () => {
          if (!open && showComponent) {
            setShowComponent(false);
          }
        },
        ...getFloatingProps(),
        ...rest,
        children
      })
    })
  });
});

export { ConditionalScrimWrapper, Dialog };
//# sourceMappingURL=Dialog.js.map
