import { jsxs, jsx } from 'react/jsx-runtime';
import { forwardRef } from 'react';
import { clsx } from 'clsx';
import { makePrefixer } from '../../utils/makePrefixer.js';
import '../../utils/useFloatingUI/useFloatingUI.js';
import '../../utils/useId.js';
import '../../salt-provider/SaltProvider.js';
import '../../viewport/ViewportProvider.js';
import '../../accordion/AccordionGroup.js';
import '../../accordion/AccordionPanel.js';
import '../../accordion/Accordion.js';
import '../../accordion/AccordionHeader.js';
import '../../aria-announcer/AriaAnnouncerContext.js';
import '../../avatar/Avatar.js';
import '../../badge/Badge.js';
import '../../banner/Banner.js';
import '../../banner/BannerActions.js';
import '../../banner/BannerContent.js';
import '../../border-item/BorderItem.js';
import '../../border-layout/BorderLayout.js';
import '../../button/Button.js';
import '../../card/Card.js';
import '../../checkbox/Checkbox.js';
import '../../checkbox/CheckboxGroup.js';
import { useComponentCssInjection } from '@salt-ds/styles';
import { useWindow } from '@salt-ds/window';
import '@salt-ds/icons';
import '../../combo-box/ComboBox.js';
import '../../dialog/Dialog.js';
import '../../dialog/DialogHeader.js';
import '../../dialog/DialogActions.js';
import '../../dialog/DialogContent.js';
import '../../dialog/DialogContext.js';
import '../../dialog/DialogCloseButton.js';
import '../../drawer/Drawer.js';
import '../../drawer/DrawerCloseButton.js';
import '../../dropdown/Dropdown.js';
import '../../file-drop-zone/FileDropZone.js';
import '../../file-drop-zone/FileDropZoneIcon.js';
import '../../file-drop-zone/FileDropZoneTrigger.js';
import '../../flex-item/FlexItem.js';
import '../../flex-layout/FlexLayout.js';
import '../../flow-layout/FlowLayout.js';
import '../../form-field/FormField.js';
import '../../status-indicator/StatusIndicator.js';
import { Text } from '../../text/Text.js';
import '../../text/Code.js';
import '../../text/Display.js';
import '../../text/Headings.js';
import '../../text/Label.js';
import '../../text/TextAction.js';
import '../../text/TextNotation.js';
import '../../form-field-context/FormFieldContext.js';
import '../../grid-item/GridItem.js';
import '../../grid-layout/GridLayout.js';
import '../../input/Input.js';
import '../../interactable-card/InteractableCard.js';
import '../../interactable-card/InteractableCardGroup.js';
import '../../interactable-card/InteractableCardGroupContext.js';
import '../../link/Link.js';
import '../../link-card/LinkCard.js';
import '../../list-control/ListControlContext.js';
import '../../multiline-input/MultilineInput.js';
import '../../navigation-item/NavigationItem.js';
import '../../option/Option.js';
import '../../option/OptionGroup.js';
import '../../pagination/Pagination.js';
import '../../pagination/Paginator.js';
import '../../pagination/CompactInput.js';
import '../../pagination/CompactPaginator.js';
import '../../pagination/GoToInput.js';
import '../../panel/Panel.js';
import '../../pill/Pill.js';
import '../LinearProgress/LinearProgress.js';
import '../../radio-button/RadioButton.js';
import '../../radio-button/RadioButtonGroup.js';
import '../../scrim/Scrim.js';
import '../../segmented-button-group/SegmentedButtonGroup.js';
import '../../spinner/Spinner.js';
import '../../stack-layout/StackLayout.js';
import '../../status-adornment/StatusAdornment.js';
import '../../toast/Toast.js';
import '../../toast/ToastContent.js';
import '../../split-layout/SplitLayout.js';
import '../../switch/Switch.js';
import '../../toggle-button/ToggleButton.js';
import '../../toggle-button-group/ToggleButtonGroup.js';
import '../../toggle-button-group/ToggleButtonGroupContext.js';
import '../../tooltip/Tooltip.js';
import '@floating-ui/react';
import css_248z from './CircularProgress.css.js';

const withBaseName = makePrefixer("saltCircularProgress");
const getRotationAngle = (bar, shift = 0) => {
  return -180 + (bar - shift) / 50 * 180;
};
const CircularProgress = forwardRef(function CircularProgress2({
  className,
  hideLabel = false,
  max = 100,
  min = 0,
  value = 0,
  bufferValue = 0,
  ...rest
}, ref) {
  const targetWindow = useWindow();
  useComponentCssInjection({
    testId: "salt-circular-progress",
    css: css_248z,
    window: targetWindow
  });
  const bufferSubOverlayRightStyle = {};
  const bufferSubOverlayLeftStyle = {};
  const barSubOverlayRightStyle = {};
  const barSubOverlayLeftStyle = {};
  const buffer = (bufferValue - min) / (max - min) * 100;
  const progress = (value - min) / (max - min) * 100;
  if (progress <= 50) {
    const rotationAngle = getRotationAngle(progress);
    barSubOverlayRightStyle.transform = `rotate(${rotationAngle}deg)`;
    barSubOverlayLeftStyle.transform = "rotate(-180deg)";
  } else {
    const rotationAngle = getRotationAngle(progress, 50);
    barSubOverlayRightStyle.transform = "rotate(0deg)";
    barSubOverlayLeftStyle.transform = `rotate(${rotationAngle}deg)`;
  }
  if (buffer <= 50) {
    const rotationAngle = getRotationAngle(buffer);
    bufferSubOverlayRightStyle.transform = `rotate(${rotationAngle}deg)`;
    bufferSubOverlayLeftStyle.transform = "rotate(-180deg)";
  } else {
    const rotationAngle = getRotationAngle(buffer, 50);
    bufferSubOverlayRightStyle.transform = "rotate(0deg)";
    bufferSubOverlayLeftStyle.transform = `rotate(${rotationAngle}deg)`;
  }
  return /* @__PURE__ */ jsxs("div", {
    className: clsx(withBaseName(), className),
    ref,
    role: "progressbar",
    "aria-valuemax": max,
    "aria-valuemin": min,
    "aria-valuenow": Math.round(value),
    ...rest,
    children: [
      /* @__PURE__ */ jsx("div", {
        className: withBaseName("track")
      }),
      /* @__PURE__ */ jsxs("div", {
        className: withBaseName("bars"),
        children: [
          buffer > 0 && /* @__PURE__ */ jsx("div", {
            className: withBaseName("bufferOverlayRight"),
            children: /* @__PURE__ */ jsxs("div", {
              className: clsx(withBaseName("bufferSubOverlayRight"), {
                [withBaseName("bufferSubOverlay")]: buffer <= 50
              }),
              style: bufferSubOverlayRightStyle,
              children: [
                /* @__PURE__ */ jsx("div", {
                  className: withBaseName("bufferBackground")
                }),
                /* @__PURE__ */ jsx("div", {
                  className: withBaseName("bufferBorder")
                })
              ]
            })
          }),
          /* @__PURE__ */ jsx("div", {
            className: withBaseName("barOverlayRight"),
            children: /* @__PURE__ */ jsx("div", {
              className: withBaseName("barSubOverlayRight"),
              style: barSubOverlayRightStyle,
              children: /* @__PURE__ */ jsx("div", {
                className: withBaseName("bar")
              })
            })
          }),
          buffer > 0 && /* @__PURE__ */ jsx("div", {
            className: withBaseName("bufferOverlayLeft"),
            children: /* @__PURE__ */ jsxs("div", {
              className: clsx(
                withBaseName("bufferSubOverlay"),
                withBaseName("bufferSubOverlayLeft")
              ),
              style: bufferSubOverlayLeftStyle,
              children: [
                /* @__PURE__ */ jsx("div", {
                  className: withBaseName("bufferBorder")
                }),
                /* @__PURE__ */ jsx("div", {
                  className: withBaseName("bufferBackground")
                })
              ]
            })
          }),
          /* @__PURE__ */ jsx("div", {
            className: withBaseName("barOverlayLeft"),
            children: /* @__PURE__ */ jsx("div", {
              className: withBaseName("barSubOverlayLeft"),
              style: barSubOverlayLeftStyle,
              children: /* @__PURE__ */ jsx("div", {
                className: withBaseName("bar")
              })
            })
          })
        ]
      }),
      !hideLabel && /* @__PURE__ */ jsx(Text, {
        styleAs: "h2",
        className: withBaseName("progressLabel"),
        children: `${Math.round(progress)} %`
      })
    ]
  });
});

export { CircularProgress };
//# sourceMappingURL=CircularProgress.js.map
