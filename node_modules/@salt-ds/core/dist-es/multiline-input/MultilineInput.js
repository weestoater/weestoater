import { jsxs, jsx } from 'react/jsx-runtime';
import { clsx } from 'clsx';
import { forwardRef, useRef, useState, useCallback, useLayoutEffect } from 'react';
import { useComponentCssInjection } from '@salt-ds/styles';
import { useWindow } from '@salt-ds/window';
import '../form-field-context/FormFieldContext.js';
import { useFormFieldProps } from '../form-field-context/useFormFieldProps.js';
import { StatusAdornment } from '../status-adornment/StatusAdornment.js';
import { makePrefixer } from '../utils/makePrefixer.js';
import { useControlled } from '../utils/useControlled.js';
import '../utils/useFloatingUI/useFloatingUI.js';
import { useForkRef } from '../utils/useForkRef.js';
import '../utils/useId.js';
import '../salt-provider/SaltProvider.js';
import '../viewport/ViewportProvider.js';
import '../accordion/AccordionGroup.js';
import '../accordion/AccordionPanel.js';
import '../accordion/Accordion.js';
import '../accordion/AccordionHeader.js';
import '../aria-announcer/AriaAnnouncerContext.js';
import '../avatar/Avatar.js';
import '../badge/Badge.js';
import '../banner/Banner.js';
import '../banner/BannerActions.js';
import '../banner/BannerContent.js';
import '../border-item/BorderItem.js';
import '../border-layout/BorderLayout.js';
import '../button/Button.js';
import '../card/Card.js';
import '../card/InteractableCard.js';
import '../checkbox/Checkbox.js';
import '../checkbox/CheckboxGroup.js';
import '@salt-ds/icons';
import '../combo-box/ComboBox.js';
import '../dialog/Dialog.js';
import '../dialog/DialogHeader.js';
import '../dialog/DialogActions.js';
import '../dialog/DialogContent.js';
import '../dialog/DialogContext.js';
import '../dialog/DialogCloseButton.js';
import '../drawer/Drawer.js';
import '../drawer/DrawerCloseButton.js';
import '../dropdown/Dropdown.js';
import '../file-drop-zone/FileDropZone.js';
import '../file-drop-zone/FileDropZoneIcon.js';
import '../file-drop-zone/FileDropZoneTrigger.js';
import '../flex-item/FlexItem.js';
import '../flex-layout/FlexLayout.js';
import '../flow-layout/FlowLayout.js';
import '../form-field/FormField.js';
import '../status-indicator/StatusIndicator.js';
import '../text/Text.js';
import '../text/Code.js';
import '../text/Display.js';
import '../text/Headings.js';
import '../text/Label.js';
import '../text/TextAction.js';
import '../text/TextNotation.js';
import '../grid-item/GridItem.js';
import '../grid-layout/GridLayout.js';
import '../input/Input.js';
import '../link/Link.js';
import '../link-card/LinkCard.js';
import '../list-control/ListControlContext.js';
import '../navigation-item/NavigationItem.js';
import '../option/Option.js';
import '../option/OptionGroup.js';
import '../pagination/Pagination.js';
import '../pagination/Paginator.js';
import '../pagination/CompactInput.js';
import '../pagination/CompactPaginator.js';
import '../pagination/GoToInput.js';
import '../panel/Panel.js';
import '../pill/Pill.js';
import '../progress/CircularProgress/CircularProgress.js';
import '../progress/LinearProgress/LinearProgress.js';
import '../radio-button/RadioButton.js';
import '../radio-button/RadioButtonGroup.js';
import '../scrim/Scrim.js';
import '../spinner/Spinner.js';
import '../stack-layout/StackLayout.js';
import '../toast/Toast.js';
import '../toast/ToastContent.js';
import '../split-layout/SplitLayout.js';
import '../switch/Switch.js';
import '../toggle-button/ToggleButton.js';
import '../toggle-button-group/ToggleButtonGroup.js';
import '../toggle-button-group/ToggleButtonGroupContext.js';
import '../tooltip/Tooltip.js';
import '@floating-ui/react';
import css_248z from './MultilineInput.css.js';

const withBaseName = makePrefixer("saltMultilineInput");
const MultilineInput = forwardRef(
  function MultilineInput2({
    "aria-activedescendant": ariaActiveDescendant,
    "aria-expanded": ariaExpanded,
    "aria-owns": ariaOwns,
    bordered = false,
    className: classNameProp,
    disabled,
    endAdornment,
    id,
    placeholder,
    readOnly,
    role,
    rows = 3,
    startAdornment,
    style,
    textAreaProps = {},
    textAreaRef,
    value: valueProp,
    defaultValue: defaultValueProp = valueProp === void 0 ? "" : void 0,
    validationStatus: validationStatusProp,
    variant = "primary",
    ...other
  }, ref) {
    const inputRef = useRef(null);
    const handleRef = useForkRef(inputRef, textAreaRef);
    const targetWindow = useWindow();
    useComponentCssInjection({
      testId: "salt-multiline-input",
      css: css_248z,
      window: targetWindow
    });
    const restA11yProps = {
      "aria-activedescendant": ariaActiveDescendant,
      "aria-expanded": ariaExpanded,
      "aria-owns": ariaOwns
    };
    const [focused, setFocused] = useState(false);
    const {
      "aria-describedby": textAreaDescribedBy,
      "aria-labelledby": textAreaLabelledBy,
      onBlur,
      onChange,
      onFocus,
      required: textAreaRequired,
      ...restTextAreaProps
    } = textAreaProps;
    const {
      a11yProps: {
        "aria-describedby": formFieldDescribedBy,
        "aria-labelledby": formFieldLabelledBy
      } = {},
      disabled: formFieldDisabled,
      readOnly: formFieldReadOnly,
      necessity: formFieldRequired,
      validationStatus: formFieldValidationStatus
    } = useFormFieldProps();
    const isDisabled = disabled || formFieldDisabled;
    const isReadOnly = readOnly || formFieldReadOnly;
    const validationStatus = formFieldValidationStatus != null ? formFieldValidationStatus : validationStatusProp;
    const isRequired = formFieldRequired ? ["required", "asterisk"].includes(formFieldRequired) : textAreaRequired;
    const [value, setValue] = useControlled({
      controlled: valueProp,
      default: defaultValueProp,
      name: "MultilineInput",
      state: "value"
    });
    const previousHeight = useRef(void 0);
    const input = inputRef.current;
    const changeHeight = useCallback(() => {
      if (!input)
        return;
      const hasBeenManuallyResized = previousHeight.current !== void 0 && input.style.height !== previousHeight.current;
      if (!hasBeenManuallyResized) {
        const previousOverflow = input.style.overflow;
        input.style.overflow = "hidden";
        input.style.height = "auto";
        const newHeight = `${input.scrollHeight + (input.offsetHeight - input.clientHeight)}px`;
        input.style.height = newHeight;
        previousHeight.current = newHeight;
        input.style.overflow = previousOverflow;
      }
    }, [input]);
    const handleChange = (event) => {
      const value2 = event.target.value;
      setValue(value2);
      onChange == null ? void 0 : onChange(event);
      changeHeight();
    };
    useLayoutEffect(() => {
      changeHeight();
    }, [value, changeHeight]);
    const handleBlur = (event) => {
      onBlur == null ? void 0 : onBlur(event);
      setFocused(false);
    };
    const handleFocus = (event) => {
      onFocus == null ? void 0 : onFocus(event);
      setFocused(true);
    };
    const multilineInputStyles = {
      "--saltMultilineInput-rows": rows,
      ...style
    };
    return /* @__PURE__ */ jsxs("div", {
      className: clsx(
        withBaseName(),
        withBaseName(variant),
        {
          [withBaseName("withAdornmentRow")]: endAdornment,
          [withBaseName("bordered")]: bordered,
          [withBaseName("focused")]: !isDisabled && focused,
          [withBaseName("disabled")]: isDisabled,
          [withBaseName("readOnly")]: isReadOnly,
          [withBaseName(validationStatus != null ? validationStatus : "")]: validationStatus
        },
        classNameProp
      ),
      ref,
      style: multilineInputStyles,
      ...other,
      children: [
        startAdornment && /* @__PURE__ */ jsx("div", {
          className: withBaseName("startAdornmentContainer"),
          children: startAdornment
        }),
        /* @__PURE__ */ jsx("textarea", {
          "aria-describedby": clsx(formFieldDescribedBy, textAreaDescribedBy),
          "aria-labelledby": clsx(formFieldLabelledBy, textAreaLabelledBy),
          className: clsx(withBaseName("textarea"), textAreaProps == null ? void 0 : textAreaProps.className),
          disabled: isDisabled,
          id,
          readOnly: isReadOnly,
          ref: handleRef,
          required: isRequired,
          role,
          rows,
          tabIndex: isDisabled ? -1 : 0,
          onBlur: handleBlur,
          onChange: handleChange,
          onFocus: !isDisabled ? handleFocus : void 0,
          placeholder,
          value,
          ...restA11yProps,
          ...restTextAreaProps
        }),
        /* @__PURE__ */ jsxs("div", {
          className: withBaseName("suffixAdornments"),
          children: [
            !isDisabled && !isReadOnly && validationStatus && /* @__PURE__ */ jsx("div", {
              className: withBaseName("statusAdornmentContainer"),
              children: /* @__PURE__ */ jsx(StatusAdornment, {
                status: validationStatus
              })
            }),
            endAdornment && /* @__PURE__ */ jsx("div", {
              className: withBaseName("endAdornmentContainer"),
              children: endAdornment
            })
          ]
        }),
        /* @__PURE__ */ jsx("div", {
          className: withBaseName("activationIndicator")
        })
      ]
    });
  }
);

export { MultilineInput };
//# sourceMappingURL=MultilineInput.js.map
