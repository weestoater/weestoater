import { jsxs, jsx } from 'react/jsx-runtime';
import { useState, useRef, useCallback, useEffect, useMemo } from 'react';
import { AriaAnnouncerContext } from './AriaAnnouncerContext.js';

const ARIA_ANNOUNCE_DELAY = 150;
function AriaAnnouncerProvider({
  children,
  style
}) {
  const [currentAnnouncement, setCurrentAnnouncement] = useState("");
  const announcementsRef = useRef([]);
  const isAnnouncingRef = useRef(false);
  const mountedRef = useRef(true);
  const announceAll = useCallback(() => {
    isAnnouncingRef.current = true;
    if (mountedRef.current) {
      setCurrentAnnouncement("");
      requestAnimationFrame(() => {
        if (mountedRef.current && announcementsRef.current.length) {
          const announcement = announcementsRef.current.shift();
          setCurrentAnnouncement(announcement);
          setTimeout(() => {
            announceAll();
          }, ARIA_ANNOUNCE_DELAY);
        } else {
          isAnnouncingRef.current = false;
        }
      });
    }
  }, []);
  const announce = useCallback(
    (announcement) => {
      announcementsRef.current.push(announcement);
      if (!isAnnouncingRef.current) {
        announceAll();
      }
    },
    [announceAll]
  );
  useEffect(() => {
    mountedRef.current = true;
    return () => {
      mountedRef.current = false;
    };
  }, []);
  const value = useMemo(() => ({ announce }), [announce]);
  return /* @__PURE__ */ jsxs(AriaAnnouncerContext.Provider, {
    value,
    children: [
      children,
      /* @__PURE__ */ jsx("div", {
        "aria-atomic": "true",
        "aria-live": "assertive",
        style: {
          position: "absolute",
          height: 1,
          width: 1,
          padding: 0,
          margin: -1,
          overflow: "hidden",
          clip: "rect(0, 0, 0, 0)",
          whiteSpace: "nowrap",
          borderWidth: 0,
          ...style
        },
        children: currentAnnouncement
      })
    ]
  });
}

export { ARIA_ANNOUNCE_DELAY, AriaAnnouncerProvider };
//# sourceMappingURL=AriaAnnouncerProvider.js.map
