import { useRef, useCallback } from 'react';
import '../utils/useFloatingUI/useFloatingUI.js';
import '../utils/useId.js';
import { useIsomorphicLayoutEffect } from '../utils/useIsomorphicLayoutEffect.js';
import '../salt-provider/SaltProvider.js';
import '../viewport/ViewportProvider.js';
import 'clsx';
import { useValueEffect } from '../utils/useValueEffect.js';
import { useResizeObserver } from '../utils/useResizeObserver.js';
import { useWindow } from '@salt-ds/window';

function useTruncatePills({
  pills,
  enable
}) {
  const pillListRef = useRef(null);
  const [visibleCount, setVisibleItems] = useValueEffect(pills.length);
  const targetWindow = useWindow();
  const updateOverflow = useCallback(() => {
    if (!enable) {
      return;
    }
    const computeVisible = (visibleCount2) => {
      const pillList = pillListRef.current;
      if (pillList && targetWindow) {
        const pillElements = Array.from(
          pillList.querySelectorAll('[role="listitem"]')
        );
        const maxWidth = pillList.getBoundingClientRect().width;
        const listGap = parseInt(targetWindow.getComputedStyle(pillList).gap);
        const isShowingOverflow = pillList.querySelector(
          "[data-overflowindicator]"
        );
        let currentSize = 0;
        let newVisibleCount = 0;
        if (isShowingOverflow) {
          const pill = pillElements.pop();
          if (pill) {
            const pillWidth = pill.getBoundingClientRect().width;
            currentSize += pillWidth + listGap;
          }
        }
        for (const pill of pillElements) {
          const pillWidth = pill.getBoundingClientRect().width;
          currentSize += pillWidth + listGap;
          if (Math.round(currentSize) <= Math.round(maxWidth)) {
            newVisibleCount++;
          } else {
            break;
          }
        }
        return newVisibleCount;
      }
      return visibleCount2;
    };
    setVisibleItems(function* () {
      yield pills.length;
      const newVisibleCount = computeVisible(pills.length);
      const isMeasuring = newVisibleCount < pills.length && newVisibleCount > 0;
      yield newVisibleCount;
      if (isMeasuring) {
        yield computeVisible(newVisibleCount);
      }
    });
  }, [pills, setVisibleItems, enable, targetWindow]);
  useIsomorphicLayoutEffect(updateOverflow, [updateOverflow, pills]);
  useResizeObserver({
    ref: pillListRef,
    onResize: updateOverflow
  });
  return {
    pillListRef,
    visibleCount,
    visiblePills: enable ? pills.slice(0, visibleCount) : pills
  };
}

export { useTruncatePills };
//# sourceMappingURL=useTruncatePills.js.map
