{"version":3,"file":"useTruncatePills.js","sources":["../src/pill-input/useTruncatePills.ts"],"sourcesContent":["import { useCallback, useRef } from \"react\";\nimport {\n  useIsomorphicLayoutEffect,\n  useValueEffect,\n  useResizeObserver,\n} from \"../utils\";\nimport { useWindow } from \"@salt-ds/window\";\n\nexport function useTruncatePills({\n  pills,\n  enable,\n}: {\n  pills: string[];\n  enable?: boolean;\n}) {\n  const pillListRef = useRef<HTMLDivElement>(null);\n  const [visibleCount, setVisibleItems] = useValueEffect(pills.length);\n  const targetWindow = useWindow();\n\n  const updateOverflow = useCallback(() => {\n    if (!enable) {\n      return;\n    }\n\n    const computeVisible = (visibleCount: number) => {\n      const pillList = pillListRef.current;\n\n      if (pillList && targetWindow) {\n        const pillElements = Array.from(\n          pillList.querySelectorAll('[role=\"listitem\"]')\n        );\n        const maxWidth = pillList.getBoundingClientRect().width;\n        const listGap = parseInt(targetWindow.getComputedStyle(pillList).gap);\n        const isShowingOverflow = pillList.querySelector(\n          \"[data-overflowindicator]\"\n        );\n\n        let currentSize = 0;\n        let newVisibleCount = 0;\n\n        if (isShowingOverflow) {\n          const pill = pillElements.pop();\n          if (pill) {\n            const pillWidth = pill.getBoundingClientRect().width;\n            currentSize += pillWidth + listGap;\n          }\n        }\n\n        for (const pill of pillElements) {\n          const pillWidth = pill.getBoundingClientRect().width;\n          currentSize += pillWidth + listGap;\n\n          if (Math.round(currentSize) <= Math.round(maxWidth)) {\n            newVisibleCount++;\n          } else {\n            break;\n          }\n        }\n        return newVisibleCount;\n      }\n      return visibleCount;\n    };\n\n    setVisibleItems(function* () {\n      // Show all\n      yield pills.length;\n\n      // Measure the visible count\n      const newVisibleCount = computeVisible(pills.length);\n      const isMeasuring = newVisibleCount < pills.length && newVisibleCount > 0;\n      yield newVisibleCount;\n\n      // ensure the visible count is correct\n      if (isMeasuring) {\n        yield computeVisible(newVisibleCount);\n      }\n    });\n  }, [pills, setVisibleItems, enable, targetWindow]);\n\n  useIsomorphicLayoutEffect(updateOverflow, [updateOverflow, pills]);\n  useResizeObserver({\n    ref: pillListRef,\n    onResize: updateOverflow,\n  });\n\n  return {\n    pillListRef,\n    visibleCount,\n    visiblePills: enable ? pills.slice(0, visibleCount) : pills,\n  };\n}\n"],"names":["visibleCount"],"mappings":";;;;;;;;;;;AAQO,SAAS,gBAAiB,CAAA;AAAA,EAC/B,KAAA;AAAA,EACA,MAAA;AACF,CAGG,EAAA;AACD,EAAM,MAAA,WAAA,GAAc,OAAuB,IAAI,CAAA,CAAA;AAC/C,EAAA,MAAM,CAAC,YAAc,EAAA,eAAe,CAAI,GAAA,cAAA,CAAe,MAAM,MAAM,CAAA,CAAA;AACnE,EAAA,MAAM,eAAe,SAAU,EAAA,CAAA;AAE/B,EAAM,MAAA,cAAA,GAAiB,YAAY,MAAM;AACvC,IAAA,IAAI,CAAC,MAAQ,EAAA;AACX,MAAA,OAAA;AAAA,KACF;AAEA,IAAM,MAAA,cAAA,GAAiB,CAACA,aAAyB,KAAA;AAC/C,MAAA,MAAM,WAAW,WAAY,CAAA,OAAA,CAAA;AAE7B,MAAA,IAAI,YAAY,YAAc,EAAA;AAC5B,QAAA,MAAM,eAAe,KAAM,CAAA,IAAA;AAAA,UACzB,QAAA,CAAS,iBAAiB,mBAAmB,CAAA;AAAA,SAC/C,CAAA;AACA,QAAM,MAAA,QAAA,GAAW,QAAS,CAAA,qBAAA,EAAwB,CAAA,KAAA,CAAA;AAClD,QAAA,MAAM,UAAU,QAAS,CAAA,YAAA,CAAa,gBAAiB,CAAA,QAAQ,EAAE,GAAG,CAAA,CAAA;AACpE,QAAA,MAAM,oBAAoB,QAAS,CAAA,aAAA;AAAA,UACjC,0BAAA;AAAA,SACF,CAAA;AAEA,QAAA,IAAI,WAAc,GAAA,CAAA,CAAA;AAClB,QAAA,IAAI,eAAkB,GAAA,CAAA,CAAA;AAEtB,QAAA,IAAI,iBAAmB,EAAA;AACrB,UAAM,MAAA,IAAA,GAAO,aAAa,GAAI,EAAA,CAAA;AAC9B,UAAA,IAAI,IAAM,EAAA;AACR,YAAM,MAAA,SAAA,GAAY,IAAK,CAAA,qBAAA,EAAwB,CAAA,KAAA,CAAA;AAC/C,YAAA,WAAA,IAAe,SAAY,GAAA,OAAA,CAAA;AAAA,WAC7B;AAAA,SACF;AAEA,QAAA,KAAA,MAAW,QAAQ,YAAc,EAAA;AAC/B,UAAM,MAAA,SAAA,GAAY,IAAK,CAAA,qBAAA,EAAwB,CAAA,KAAA,CAAA;AAC/C,UAAA,WAAA,IAAe,SAAY,GAAA,OAAA,CAAA;AAE3B,UAAA,IAAI,KAAK,KAAM,CAAA,WAAW,KAAK,IAAK,CAAA,KAAA,CAAM,QAAQ,CAAG,EAAA;AACnD,YAAA,eAAA,EAAA,CAAA;AAAA,WACK,MAAA;AACL,YAAA,MAAA;AAAA,WACF;AAAA,SACF;AACA,QAAO,OAAA,eAAA,CAAA;AAAA,OACT;AACA,MAAOA,OAAAA,aAAAA,CAAAA;AAAA,KACT,CAAA;AAEA,IAAA,eAAA,CAAgB,aAAa;AAE3B,MAAA,MAAM,KAAM,CAAA,MAAA,CAAA;AAGZ,MAAM,MAAA,eAAA,GAAkB,cAAe,CAAA,KAAA,CAAM,MAAM,CAAA,CAAA;AACnD,MAAA,MAAM,WAAc,GAAA,eAAA,GAAkB,KAAM,CAAA,MAAA,IAAU,eAAkB,GAAA,CAAA,CAAA;AACxE,MAAM,MAAA,eAAA,CAAA;AAGN,MAAA,IAAI,WAAa,EAAA;AACf,QAAA,MAAM,eAAe,eAAe,CAAA,CAAA;AAAA,OACtC;AAAA,KACD,CAAA,CAAA;AAAA,KACA,CAAC,KAAA,EAAO,eAAiB,EAAA,MAAA,EAAQ,YAAY,CAAC,CAAA,CAAA;AAEjD,EAAA,yBAAA,CAA0B,cAAgB,EAAA,CAAC,cAAgB,EAAA,KAAK,CAAC,CAAA,CAAA;AACjE,EAAkB,iBAAA,CAAA;AAAA,IAChB,GAAK,EAAA,WAAA;AAAA,IACL,QAAU,EAAA,cAAA;AAAA,GACX,CAAA,CAAA;AAED,EAAO,OAAA;AAAA,IACL,WAAA;AAAA,IACA,YAAA;AAAA,IACA,cAAc,MAAS,GAAA,KAAA,CAAM,KAAM,CAAA,CAAA,EAAG,YAAY,CAAI,GAAA,KAAA;AAAA,GACxD,CAAA;AACF;;;;"}