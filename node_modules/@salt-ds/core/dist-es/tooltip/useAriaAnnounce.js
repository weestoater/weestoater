import { useRef, useEffect } from 'react';
import '../aria-announcer/AriaAnnouncerContext.js';
import 'react/jsx-runtime';
import { useAriaAnnouncer } from '../aria-announcer/useAriaAnnouncer.js';
import '../utils/useFloatingUI/useFloatingUI.js';
import '../utils/useId.js';
import { useIsomorphicLayoutEffect } from '../utils/useIsomorphicLayoutEffect.js';
import '../salt-provider/SaltProvider.js';
import '../viewport/ViewportProvider.js';
import 'clsx';
import '../accordion/AccordionGroup.js';
import '../accordion/AccordionPanel.js';
import '../accordion/Accordion.js';
import '../accordion/AccordionHeader.js';
import '../avatar/Avatar.js';
import '../badge/Badge.js';
import '../banner/Banner.js';
import '../banner/BannerActions.js';
import '../banner/BannerContent.js';
import '../border-item/BorderItem.js';
import '../border-layout/BorderLayout.js';
import '../button/Button.js';
import '../card/Card.js';
import '../checkbox/Checkbox.js';
import '../checkbox/CheckboxGroup.js';
import '@salt-ds/styles';
import '@salt-ds/window';
import '@salt-ds/icons';
import '../combo-box/ComboBox.js';
import '../dialog/Dialog.js';
import '../dialog/DialogHeader.js';
import '../dialog/DialogActions.js';
import '../dialog/DialogContent.js';
import '../dialog/DialogContext.js';
import '../dialog/DialogCloseButton.js';
import '../drawer/Drawer.js';
import '../drawer/DrawerCloseButton.js';
import '../dropdown/Dropdown.js';
import '../file-drop-zone/FileDropZone.js';
import '../file-drop-zone/FileDropZoneIcon.js';
import '../file-drop-zone/FileDropZoneTrigger.js';
import '../flex-item/FlexItem.js';
import '../flex-layout/FlexLayout.js';
import '../flow-layout/FlowLayout.js';
import '../form-field/FormField.js';
import '../status-indicator/StatusIndicator.js';
import '../text/Text.js';
import '../text/Code.js';
import '../text/Display.js';
import '../text/Headings.js';
import '../text/Label.js';
import '../text/TextAction.js';
import '../text/TextNotation.js';
import '../form-field-context/FormFieldContext.js';
import '../grid-item/GridItem.js';
import '../grid-layout/GridLayout.js';
import '../input/Input.js';
import '../interactable-card/InteractableCard.js';
import '../interactable-card/InteractableCardGroup.js';
import '../interactable-card/InteractableCardGroupContext.js';
import '../link/Link.js';
import '../link-card/LinkCard.js';
import '../list-control/ListControlContext.js';
import '../multiline-input/MultilineInput.js';
import '../navigation-item/NavigationItem.js';
import '../option/Option.js';
import '../option/OptionGroup.js';
import '../pagination/Pagination.js';
import '../pagination/Paginator.js';
import '../pagination/CompactInput.js';
import '../pagination/CompactPaginator.js';
import '../pagination/GoToInput.js';
import '../panel/Panel.js';
import '../pill/Pill.js';
import '../progress/CircularProgress/CircularProgress.js';
import '../progress/LinearProgress/LinearProgress.js';
import '../radio-button/RadioButton.js';
import '../radio-button/RadioButtonGroup.js';
import '../scrim/Scrim.js';
import '../segmented-button-group/SegmentedButtonGroup.js';
import '../spinner/Spinner.js';
import '../stack-layout/StackLayout.js';
import '../status-adornment/StatusAdornment.js';
import '../toast/Toast.js';
import '../toast/ToastContent.js';
import '../split-layout/SplitLayout.js';
import '../switch/Switch.js';
import '../toggle-button/ToggleButton.js';
import '../toggle-button-group/ToggleButtonGroup.js';
import '../toggle-button-group/ToggleButtonGroupContext.js';
import './Tooltip.js';
import '@floating-ui/react';

function getDocument(floating) {
  var _a;
  return (_a = floating == null ? void 0 : floating.ownerDocument) != null ? _a : document;
}
function getWindow(value) {
  var _a;
  return (_a = getDocument(value).defaultView) != null ? _a : window;
}
function isElement(value) {
  return value ? value instanceof getWindow(value).Element : false;
}
function getDelay(value, prop, pointerType) {
  if (pointerType && pointerType !== "mouse") {
    return 0;
  }
  if (typeof value === "number") {
    return value;
  }
  return value == null ? void 0 : value[prop];
}
const useAriaAnnounce = (context, { delay = 0 }) => {
  const { open, dataRef, refs } = context;
  const pointerTypeRef = useRef();
  const timeoutRef = useRef();
  const blockMouseMoveRef = useRef(true);
  const { announce } = useAriaAnnouncer();
  useIsomorphicLayoutEffect(() => {
    if (!open) {
      pointerTypeRef.current = void 0;
    }
  });
  useEffect(() => {
    const reference = refs.reference.current;
    function announceFloating() {
      var _a;
      const tooltipContent = (_a = refs.floating.current) == null ? void 0 : _a.innerText;
      if (tooltipContent) {
        announce(tooltipContent);
      }
    }
    function onMouseEnter(event) {
      clearTimeout(timeoutRef.current);
      if (open) {
        return;
      }
      blockMouseMoveRef.current = false;
      dataRef.current.openEvent = event;
      if (delay) {
        timeoutRef.current = window.setTimeout(() => {
          announceFloating();
        }, getDelay(delay, "open", pointerTypeRef.current));
      } else {
        announceFloating();
      }
    }
    if (isElement(reference)) {
      reference.addEventListener("mouseenter", onMouseEnter);
      return () => {
        reference.removeEventListener("mouseenter", onMouseEnter);
      };
    }
  }, [dataRef, delay, open, refs.reference, refs.floating, announce]);
  function setPointerRef(event) {
    pointerTypeRef.current = event.pointerType;
  }
  return {
    reference: {
      onPointerDown: setPointerRef,
      onPointerEnter: setPointerRef
    },
    floating: {
      onMouseEnter() {
        clearTimeout(timeoutRef.current);
      }
    }
  };
};

export { useAriaAnnounce };
//# sourceMappingURL=useAriaAnnounce.js.map
