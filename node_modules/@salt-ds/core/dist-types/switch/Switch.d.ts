import { ChangeEventHandler, ComponentPropsWithoutRef, FocusEventHandler, ReactNode } from "react";
export interface SwitchProps extends Omit<ComponentPropsWithoutRef<"label">, "children" | "onFocus" | "onBlur" | "onChange"> {
    /**
     * If `true`, the checkbox will be checked.
     */
    checked?: boolean;
    /**
     * Whether the checkbox component is checked by default
     * This will be disregarded if checked is already set.
     */
    defaultChecked?: boolean;
    /**
     * If `true`, the checkbox will be disabled.
     */
    disabled?: boolean;
    /**
     * Properties applied to the input element.
     */
    inputProps?: Partial<ComponentPropsWithoutRef<"input">>;
    /**
     * The label to be shown next to the checkbox.
     */
    label?: ReactNode;
    /**
     * The name applied to the input.
     */
    name?: string;
    /**
     * Callback when checkbox loses focus.
     */
    onBlur?: FocusEventHandler<HTMLInputElement>;
    /**
     * Callback when checked state is changed.
     */
    onChange?: ChangeEventHandler<HTMLInputElement>;
    /**
     * Callback when checkbox gains focus.
     */
    onFocus?: FocusEventHandler<HTMLInputElement>;
    /**
     * The value of the checkbox.
     */
    value?: string;
}
export declare const Switch: import("react").ForwardRefExoticComponent<SwitchProps & import("react").RefAttributes<HTMLLabelElement>>;
