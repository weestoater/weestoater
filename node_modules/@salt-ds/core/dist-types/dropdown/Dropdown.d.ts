import { ComponentPropsWithoutRef, ReactNode, Ref } from "react";
import { ListControlProps } from "../list-control/ListControlState";
import { ValidationStatus } from "../status-indicator";
export declare type DropdownProps<Item = string> = {
    /**
     * If `true`, the dropdown will be disabled.
     */
    disabled?: boolean;
    /**
     * If `true`, the dropdown will be read-only.
     */
    readOnly?: boolean;
    /**
     * The options to display in the dropdown.
     */
    children?: ReactNode;
    /**
     * The marker to use in an empty read only dropdown.
     * Use `''` to disable this feature. Defaults to '—'.
     */
    emptyReadOnlyMarker?: string;
    /**
     * If `true`, the dropdown will be multiselect.
     */
    multiselect?: boolean;
    /**
     * The text shown when the dropdown has no value.
     */
    placeholder?: string;
    /**
     * If `true`, the dropdown will be required.
     */
    required?: boolean;
    /**
     * Start adornment component
     */
    startAdornment?: ReactNode;
    /**
     * Styling variant. Defaults to "primary".
     */
    variant?: "primary" | "secondary";
    /**
     * The content of the dropdown shown in the button. The component will be controlled if this prop is provided.
     */
    value?: string;
    /**
     * Validation status, one of "error" | "warning" | "success".
     */
    validationStatus?: Exclude<ValidationStatus, "info">;
} & Omit<ComponentPropsWithoutRef<"button">, "value" | "defaultValue"> & ListControlProps<Item>;
export declare const Dropdown: <Item = string>(props: {
    /**
     * If `true`, the dropdown will be disabled.
     */
    disabled?: boolean | undefined;
    /**
     * If `true`, the dropdown will be read-only.
     */
    readOnly?: boolean | undefined;
    /**
     * The options to display in the dropdown.
     */
    children?: ReactNode;
    /**
     * The marker to use in an empty read only dropdown.
     * Use `''` to disable this feature. Defaults to '—'.
     */
    emptyReadOnlyMarker?: string | undefined;
    /**
     * If `true`, the dropdown will be multiselect.
     */
    multiselect?: boolean | undefined;
    /**
     * The text shown when the dropdown has no value.
     */
    placeholder?: string | undefined;
    /**
     * If `true`, the dropdown will be required.
     */
    required?: boolean | undefined;
    /**
     * Start adornment component
     */
    startAdornment?: ReactNode;
    /**
     * Styling variant. Defaults to "primary".
     */
    variant?: "primary" | "secondary" | undefined;
    /**
     * The content of the dropdown shown in the button. The component will be controlled if this prop is provided.
     */
    value?: string | undefined;
    /**
     * Validation status, one of "error" | "warning" | "success".
     */
    validationStatus?: "error" | "warning" | "success" | undefined;
} & Omit<Omit<import("react").DetailedHTMLProps<import("react").ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, "ref">, "defaultValue" | "value"> & ListControlProps<Item> & {
    ref?: Ref<HTMLButtonElement> | undefined;
}) => JSX.Element;
