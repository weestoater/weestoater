import { FocusEvent, KeyboardEvent, MouseEvent } from "react";
export interface ButtonHookProps<T extends Element> {
    disabled?: boolean;
    focusableWhenDisabled?: boolean;
    onKeyUp?: (event: KeyboardEvent<T>) => void;
    onKeyDown?: (event: KeyboardEvent<T>) => void;
    onClick?: (event: MouseEvent<T>) => void;
    onBlur?: (event: FocusEvent<T>) => void;
}
export interface ButtonHookResult<T extends Element> {
    active: boolean;
    buttonProps: {
        "aria-disabled"?: boolean;
        disabled?: boolean;
        tabIndex: number;
        onBlur: (event: FocusEvent<T>) => void;
        onClick?: (event: MouseEvent<T>) => void;
        onKeyDown: (event: KeyboardEvent<T>) => void;
        onKeyUp: (event: KeyboardEvent<T>) => void;
    };
}
export declare const useButton: <T extends Element>({ disabled, focusableWhenDisabled, onKeyUp, onKeyDown, onClick, onBlur, }: ButtonHookProps<T>) => ButtonHookResult<T>;
