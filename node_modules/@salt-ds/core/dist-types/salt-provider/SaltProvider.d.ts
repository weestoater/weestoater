import React, { ReactElement, ReactNode } from "react";
import { Breakpoints } from "../breakpoints";
import { Density, Mode, ThemeName } from "../theme";
import { WindowContextType } from "@salt-ds/window";
import { UNSTABLE_Corner } from "../theme/Corner";
export declare const DEFAULT_DENSITY = "medium";
export interface ThemeContextProps {
    theme: ThemeName;
    mode: Mode;
    window?: WindowContextType;
    /** Only available when using SaltProviderNext. */
    themeNext: boolean;
    UNSTABLE_corner: UNSTABLE_Corner;
}
export declare const DensityContext: React.Context<"touch" | "high" | "low" | "medium">;
export declare const ThemeContext: React.Context<ThemeContextProps>;
export declare const BreakpointContext: React.Context<Breakpoints>;
declare type TargetElement = "root" | "scope" | "child";
interface SaltProviderBaseProps {
    applyClassesTo?: TargetElement;
    density?: Density;
    theme?: ThemeName;
    mode?: Mode;
    breakpoints?: Breakpoints;
    enableStyleInjection?: boolean;
}
interface SaltProviderThatAppliesClassesToChild extends SaltProviderBaseProps {
    children: ReactElement;
    applyClassesTo: "child";
}
interface SaltProviderThatInjectsThemeElement extends SaltProviderBaseProps {
    children: ReactNode;
}
interface SaltProviderThatClassesToRoot extends SaltProviderThatInjectsThemeElement {
    applyClassesTo: "root";
}
declare type SaltProviderProps = SaltProviderThatAppliesClassesToChild | SaltProviderThatInjectsThemeElement | SaltProviderThatClassesToRoot;
export declare function SaltProvider({ enableStyleInjection, ...restProps }: SaltProviderProps): JSX.Element;
interface UNSTABLE_SaltProviderNextAdditionalProps {
    corner?: UNSTABLE_Corner;
}
export declare type UNSTABLE_SaltProviderNextProps = SaltProviderProps & UNSTABLE_SaltProviderNextAdditionalProps;
export declare function UNSTABLE_SaltProviderNext({ enableStyleInjection, ...restProps }: UNSTABLE_SaltProviderNextProps): JSX.Element;
export declare const useTheme: () => ThemeContextProps;
/**
 * `useDensity` merges density value from `DensityContext` with the one from component's props.
 */
export declare function useDensity(density?: Density): Density;
export declare const useBreakpoints: () => Breakpoints;
export {};
