'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var InsertionPointProvider = require('./InsertionPointProvider.js');
var index = require('../style-injection-provider/index.js');

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n["default"] = e;
  return n;
}

var React__namespace = /*#__PURE__*/_interopNamespace(React);

var _a;
const maybeUseInsertionEffect = (_a = React__namespace["useInsertionEffect".toString()]) != null ? _a : React__namespace.useLayoutEffect;
const windowSheetsMap = /* @__PURE__ */ new WeakMap();
function useComponentCssInjection({
  testId,
  css,
  window: targetWindow
}) {
  const styleInjectionEnabled = index.useStyleInjection();
  const insertionPoint = InsertionPointProvider.useInsertionPoint();
  maybeUseInsertionEffect(() => {
    var _a2, _b;
    if (!targetWindow || !styleInjectionEnabled) {
      return;
    }
    const sheetsMap = (_a2 = windowSheetsMap.get(targetWindow)) != null ? _a2 : /* @__PURE__ */ new Map();
    const styleMap = (_b = sheetsMap.get(css)) != null ? _b : { styleElement: null, count: 0 };
    if (styleMap.styleElement == null) {
      styleMap.styleElement = targetWindow.document.createElement("style");
      styleMap.styleElement.setAttribute("type", "text/css");
      styleMap.styleElement.setAttribute("data-salt-style", testId || "");
      styleMap.styleElement.textContent = css;
      styleMap.count = 1;
      targetWindow.document.head.insertBefore(
        styleMap.styleElement,
        insertionPoint || targetWindow.document.head.firstChild
      );
    } else {
      styleMap.styleElement.textContent = css;
      styleMap.count++;
    }
    sheetsMap.set(css, styleMap);
    windowSheetsMap.set(targetWindow, sheetsMap);
    return () => {
      const sheetsMap2 = windowSheetsMap.get(targetWindow);
      const styleMap2 = sheetsMap2 == null ? void 0 : sheetsMap2.get(css);
      if (styleMap2 == null ? void 0 : styleMap2.styleElement) {
        styleMap2.count--;
        if (styleMap2.count < 1) {
          targetWindow.document.head.removeChild(styleMap2.styleElement);
          styleMap2.styleElement = null;
          sheetsMap2 == null ? void 0 : sheetsMap2.delete(css);
        }
      }
    };
  }, [testId, css, targetWindow]);
}

exports.useComponentCssInjection = useComponentCssInjection;
//# sourceMappingURL=useStyleInjection.js.map
