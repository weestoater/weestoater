import { jsx } from 'react/jsx-runtime';
import { makePrefixer, useForkRef, Tooltip } from '@salt-ds/core';
import { clsx } from 'clsx';
import { memo, forwardRef, useRef } from 'react';
import { useOverflowDetection } from '../utils/useOverflowDetection.js';
import { Highlighter } from './internal/Highlighter.js';
import { useWindow } from '@salt-ds/window';
import { useComponentCssInjection } from '@salt-ds/styles';
import css_248z from './ListItem.css.js';

const withBaseName = makePrefixer("saltListItemDeprecated");
const ListItemBase = memo(
  forwardRef(function ListItemBase2(props, ref) {
    const {
      className,
      deselectable,
      selected,
      highlighted = false,
      focusVisible,
      tooltipText,
      disabled,
      children,
      itemTextHighlightPattern,
      ...restProps
    } = props;
    const targetWindow = useWindow();
    useComponentCssInjection({
      testId: "salt-list-item-deprecated",
      css: css_248z,
      window: targetWindow
    });
    const { current: detectTruncation } = useRef(typeof children === "string");
    const [overflowRef, isOverflowed] = useOverflowDetection();
    const setItemRef = useForkRef(overflowRef, ref);
    return /* @__PURE__ */ jsx(Tooltip, {
      disabled: !isOverflowed,
      content: tooltipText,
      children: /* @__PURE__ */ jsx("div", {
        "aria-label": typeof children === "string" ? children : void 0,
        ref: detectTruncation ? ref : setItemRef,
        ...restProps,
        className: clsx(
          withBaseName(),
          {
            [withBaseName("deselectable")]: deselectable,
            [withBaseName("highlighted")]: highlighted,
            [withBaseName("selected")]: selected,
            [withBaseName("focusVisible")]: focusVisible,
            [withBaseName("disabled")]: disabled
          },
          className
        ),
        children: detectTruncation ? /* @__PURE__ */ jsx("span", {
          className: withBaseName("textWrapper"),
          ref: overflowRef,
          children: itemTextHighlightPattern == null ? children : /* @__PURE__ */ jsx(Highlighter, {
            matchPattern: itemTextHighlightPattern,
            text: children
          })
        }) : children
      })
    });
  })
);

export { ListItemBase };
//# sourceMappingURL=ListItemBase.js.map
