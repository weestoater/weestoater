import { useCallback, useRef } from 'react';
import { escapeRegExp } from '../utils/escapeRegExp.js';
import '@salt-ds/core';
import { itemToString } from './itemToString.js';

const TYPE_SELECT_TIMEOUT = 1500;
function useTypeSelect(options) {
  const {
    getItemAtIndex,
    highlightedIndex,
    itemCount,
    itemToString: itemToString$1 = itemToString,
    onTypeSelect,
    setFocusVisible,
    setHighlightedIndex
  } = options;
  const getItemIndexForSearch = useCallback(
    (searchTerm, fromIndex) => {
      if (itemCount === 0) {
        return null;
      }
      let index = fromIndex || 0;
      while (index < itemCount) {
        const item = getItemAtIndex(index);
        const textValue = itemToString$1 ? itemToString$1(item) : item;
        if (textValue && textValue.match(new RegExp(`^${escapeRegExp(searchTerm)}`, "i"))) {
          return index;
        }
        index = index + 1;
      }
      return null;
    },
    [itemCount, itemToString$1, getItemAtIndex]
  );
  const state = useRef({
    search: "",
    timeout: null
  }).current;
  const onKeyDownCapture = (event) => {
    const character = getStringForKey(event.key);
    if (!character || event.ctrlKey || event.metaKey) {
      return;
    }
    if (character !== " " || state.search.trim().length > 0) {
      event.preventDefault();
      event.stopPropagation();
    }
    if (character !== state.search) {
      state.search += character;
    }
    let index = getItemIndexForSearch(
      state.search,
      state.search.length > 1 ? highlightedIndex : highlightedIndex + 1
    );
    if (index == null) {
      index = getItemIndexForSearch(state.search);
    }
    if (index != null) {
      setFocusVisible(true);
      setHighlightedIndex(index);
      if (onTypeSelect) {
        onTypeSelect(index);
      }
    }
    clearTimeout(state.timeout);
    state.timeout = setTimeout(() => {
      state.search = "";
    }, TYPE_SELECT_TIMEOUT);
  };
  return {
    onKeyDownCapture
  };
}
function getStringForKey(key) {
  if (key.length === 1 || !/^[A-Z]/i.test(key)) {
    return key;
  }
  return "";
}

export { useTypeSelect };
//# sourceMappingURL=useTypeSelect.js.map
