import { jsx } from 'react/jsx-runtime';
import { useForkRef } from '@salt-ds/core';
import { forwardRef, useContext, useRef } from 'react';
import { ListBase } from './ListBase.js';
import { ListStateContext } from './ListStateContext.js';
import { useList } from './useList.js';
import { useTypeSelect } from './useTypeSelect.js';
import { DescendantContext, DescendantProvider } from './internal/DescendantContext.js';

const ListWithDescendants = forwardRef(function ListWithDescendants2(props, ref) {
  const { items } = useContext(DescendantContext);
  const { focusedRef, state, helpers, listProps } = useList({
    source: items.current.length ? items.current : [],
    ...props
  });
  const { highlightedIndex } = state;
  const { setHighlightedIndex, setFocusVisible } = helpers;
  const {
    disabled,
    disableTypeToSelect,
    getItemAtIndex,
    itemCount,
    itemToString,
    onKeyDownCapture: onListKeyDownCapture,
    ...restListProps
  } = listProps;
  const { onKeyDownCapture: onTypeSelectKeyDownCapture } = useTypeSelect({
    getItemAtIndex,
    highlightedIndex,
    itemCount,
    itemToString,
    setFocusVisible,
    setHighlightedIndex
  });
  const setListRef = useForkRef(focusedRef, props.listRef);
  const handleKeyDownCapture = (event) => {
    if (disabled) {
      return;
    }
    if (onListKeyDownCapture) {
      onListKeyDownCapture(event);
    }
    if (!disableTypeToSelect && onTypeSelectKeyDownCapture) {
      onTypeSelectKeyDownCapture(event);
    }
  };
  return /* @__PURE__ */ jsx(ListStateContext.Provider, {
    value: { state, helpers },
    children: /* @__PURE__ */ jsx(ListBase, {
      listRef: setListRef,
      ref,
      ...restListProps,
      disabled,
      getItemAtIndex,
      itemCount,
      itemToString,
      onKeyDownCapture: handleKeyDownCapture
    })
  });
});
const List = forwardRef(function List2(props, ref) {
  const itemsRef = useRef([]);
  return /* @__PURE__ */ jsx(DescendantProvider, {
    items: itemsRef,
    children: /* @__PURE__ */ jsx(ListWithDescendants, {
      ref,
      ...props
    })
  });
});

export { List };
//# sourceMappingURL=List.js.map
