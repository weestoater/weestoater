import { jsx, jsxs } from 'react/jsx-runtime';
import { makePrefixer, Text, Link } from '@salt-ds/core';
import { clsx } from 'clsx';
import { forwardRef, Children } from 'react';
import { useBreadcrumbsContext } from './internal/BreadcrumbsContext.js';
import { useWindow } from '@salt-ds/window';
import { useComponentCssInjection } from '@salt-ds/styles';
import css_248z from './Breadcrumb.css.js';

const withBaseName = makePrefixer("saltBreadcrumb");
const Breadcrumb = forwardRef(
  function Breadcrumb2({
    children,
    ContainerProps = {},
    tooltipText,
    tooltipProps,
    isCurrentLevel,
    onItemClick,
    overflowLabel,
    maxWidth,
    Icon,
    minWidth,
    className,
    ...props
  }, ref) {
    const targetWindow = useWindow();
    useComponentCssInjection({
      testId: "salt-breadcrumb",
      css: css_248z,
      window: targetWindow
    });
    const { itemsMaxWidth, itemsMinWidth, liClass } = useBreadcrumbsContext();
    const hasChildren = Children.count(children) !== 0;
    const hasOnlyIcon = Icon && !hasChildren;
    const getDefaultBreadcrumb = () => isCurrentLevel ? /* @__PURE__ */ jsx(Text, {
      maxRows: 1,
      className: clsx(
        withBaseName(),
        className,
        withBaseName("currentLevel")
      ),
      styleAs: "label",
      children
    }) : /* @__PURE__ */ jsxs("div", {
      className: clsx(
        withBaseName(),
        className,
        {
          [withBaseName("justifyContentCenter")]: hasOnlyIcon
        },
        withBaseName("regular")
      ),
      children: [
        Icon && /* @__PURE__ */ jsx(Icon, {
          className: withBaseName("icon")
        }),
        hasChildren && /* @__PURE__ */ jsx(Link, {
          maxRows: 1,
          styleAs: "label",
          ...props,
          children
        })
      ]
    });
    const content = getDefaultBreadcrumb();
    const {
      style: containerStyle,
      className: containerClassName,
      ...containerPropsRest
    } = ContainerProps;
    return /* @__PURE__ */ jsx("li", {
      ref,
      style: {
        ...containerStyle,
        minWidth: minWidth != null ? minWidth : itemsMinWidth,
        maxWidth: maxWidth != null ? maxWidth : itemsMaxWidth
      },
      className: clsx(liClass, containerClassName),
      ...containerPropsRest,
      children: content
    });
  }
);

export { Breadcrumb };
//# sourceMappingURL=Breadcrumb.js.map
