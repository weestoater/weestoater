{"version":3,"file":"BreadcrumbsCollapsed.js","sources":["../src/breadcrumbs/internal/BreadcrumbsCollapsed.tsx"],"sourcesContent":["import {\n  Children,\n  isValidElement,\n  ReactNode,\n  useCallback,\n  MouseEvent,\n  KeyboardEvent,\n  Component,\n} from \"react\";\nimport { OverflowMenuIcon } from \"@salt-ds/icons\";\nimport { CascadingMenuProps, MenuDescriptor } from \"../../cascading-menu\";\nimport { useFocusMenuRemount } from \"./useFocusMenuRemount\";\nimport { MenuButton, MenuButtonProps } from \"../../menu-button\";\nimport { BreadcrumbProps } from \"../Breadcrumb\";\n\nexport interface BreadcrumbsCollapsedProps\n  extends Omit<MenuButtonProps, \"CascadingMenuProps\"> {\n  CascadingMenuProps?: CascadingMenuProps;\n  accessibleText?: string;\n  children: ReactNode;\n  className?: string;\n}\n\nexport const BreadcrumbsCollapsed = ({\n  children,\n  CascadingMenuProps,\n  accessibleText,\n  ...rest\n}: BreadcrumbsCollapsedProps) => {\n  const keys = Children.map(children, (child) => {\n    if (isValidElement(child)) {\n      return child.key;\n    }\n    return \"\";\n  });\n\n  const key = keys ? keys.join(\"\") : \"\";\n  const { ref, shouldFocusOnMount } =\n    useFocusMenuRemount<HTMLButtonElement>(key);\n\n  const itemToString = useCallback((child: Component<BreadcrumbProps>) => {\n    if (!child) {\n      return \"\";\n    }\n    const { overflowLabel, tooltipText, children } = child.props;\n    return overflowLabel || tooltipText || String(children);\n  }, []);\n\n  const onItemClick = useCallback(\n    (sourceItem: MenuDescriptor, event: MouseEvent | KeyboardEvent): void => {\n      shouldFocusOnMount.current = true;\n    },\n    [shouldFocusOnMount]\n  );\n\n  const menuItems: MenuDescriptor[] = [];\n  Children.forEach(children, (x) => {\n    if (isValidElement(x)) {\n      menuItems.push({ props: x.props } as MenuDescriptor);\n    }\n  });\n\n  return (\n    <MenuButton\n      CascadingMenuProps={{\n        initialSource: {\n          // Only `props` is required for `itemToString`. Otherwise causing circular JSON conversion in useControlled.js\n          // This is not reproducible in unit tests, where react / react-dom is partially mocked without circular reference\n          menuItems,\n        },\n        itemToString,\n        onItemClick,\n        minWidth: 0,\n        ...CascadingMenuProps,\n      }}\n      hideCaret\n      {...rest}\n      ref={ref}\n    >\n      <OverflowMenuIcon />\n    </MenuButton>\n  );\n};\n"],"names":["CascadingMenuProps","children"],"mappings":";;;;;;AAuBO,MAAM,uBAAuB,CAAC;AAAA,EACnC,QAAA;AAAA,EACA,kBAAAA,EAAAA,mBAAAA;AAAA,EACA,cAAA;AAAA,EACG,GAAA,IAAA;AACL,CAAiC,KAAA;AAC/B,EAAA,MAAM,IAAO,GAAA,QAAA,CAAS,GAAI,CAAA,QAAA,EAAU,CAAC,KAAU,KAAA;AAC7C,IAAI,IAAA,cAAA,CAAe,KAAK,CAAG,EAAA;AACzB,MAAA,OAAO,KAAM,CAAA,GAAA,CAAA;AAAA,KACf;AACA,IAAO,OAAA,EAAA,CAAA;AAAA,GACR,CAAA,CAAA;AAED,EAAA,MAAM,GAAM,GAAA,IAAA,GAAO,IAAK,CAAA,IAAA,CAAK,EAAE,CAAI,GAAA,EAAA,CAAA;AACnC,EAAA,MAAM,EAAE,GAAA,EAAK,kBAAmB,EAAA,GAC9B,oBAAuC,GAAG,CAAA,CAAA;AAE5C,EAAM,MAAA,YAAA,GAAe,WAAY,CAAA,CAAC,KAAsC,KAAA;AACtE,IAAA,IAAI,CAAC,KAAO,EAAA;AACV,MAAO,OAAA,EAAA,CAAA;AAAA,KACT;AACA,IAAA,MAAM,EAAE,aAAe,EAAA,WAAA,EAAa,QAAAC,EAAAA,SAAAA,KAAa,KAAM,CAAA,KAAA,CAAA;AACvD,IAAO,OAAA,aAAA,IAAiB,WAAe,IAAA,MAAA,CAAOA,SAAQ,CAAA,CAAA;AAAA,GACxD,EAAG,EAAE,CAAA,CAAA;AAEL,EAAA,MAAM,WAAc,GAAA,WAAA;AAAA,IAClB,CAAC,YAA4B,KAA4C,KAAA;AACvE,MAAA,kBAAA,CAAmB,OAAU,GAAA,IAAA,CAAA;AAAA,KAC/B;AAAA,IACA,CAAC,kBAAkB,CAAA;AAAA,GACrB,CAAA;AAEA,EAAA,MAAM,YAA8B,EAAC,CAAA;AACrC,EAAS,QAAA,CAAA,OAAA,CAAQ,QAAU,EAAA,CAAC,CAAM,KAAA;AAChC,IAAI,IAAA,cAAA,CAAe,CAAC,CAAG,EAAA;AACrB,MAAA,SAAA,CAAU,IAAK,CAAA,EAAE,KAAO,EAAA,CAAA,CAAE,OAAyB,CAAA,CAAA;AAAA,KACrD;AAAA,GACD,CAAA,CAAA;AAED,EAAA,uBACG,GAAA,CAAA,UAAA,EAAA;AAAA,IACC,kBAAoB,EAAA;AAAA,MAClB,aAAe,EAAA;AAAA,QAGb,SAAA;AAAA,OACF;AAAA,MACA,YAAA;AAAA,MACA,WAAA;AAAA,MACA,QAAU,EAAA,CAAA;AAAA,MACV,GAAGD,mBAAAA;AAAA,KACL;AAAA,IACA,SAAS,EAAA,IAAA;AAAA,IACR,GAAG,IAAA;AAAA,IACJ,GAAA;AAAA,IAEA,8BAAC,gBAAiB,EAAA,EAAA,CAAA;AAAA,GACpB,CAAA,CAAA;AAEJ;;;;"}