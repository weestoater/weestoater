{"version":3,"file":"useTokenizedInput.js","sources":["../src/tokenized-input/useTokenizedInput.tsx"],"sourcesContent":["//TODO remove when popout code has been migrated\n/* eslint-disable @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access */\nimport { ownerWindow, useControlled, useDensity, useId } from \"@salt-ds/core\";\nimport copy from \"clipboard-copy\";\nimport {\n  ChangeEvent,\n  FocusEvent,\n  InputHTMLAttributes,\n  KeyboardEvent,\n  KeyboardEventHandler,\n  Ref,\n  SetStateAction,\n  SyntheticEvent,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\";\nimport { escapeRegExp, useEventCallback } from \"../utils\";\nimport { defaultItemToString } from \"./internal/defaultItemToString\";\nimport { getCursorPosition } from \"./internal/getCursorPosition\";\nimport { TokenizedInputProps } from \"./TokenizedInput\";\nimport { TokenizedInputBaseProps } from \"./TokenizedInputBase\";\nimport { useFormFieldLegacyProps } from \"../form-field-context-legacy\";\n\nexport interface TokenizedInputState<Item> {\n  activeIndices: Array<number>;\n  expanded: boolean | undefined;\n  focused: boolean;\n  highlightedIndex: number | undefined;\n  selectedItems: Array<Item>;\n  value: string | undefined;\n}\n\nexport interface TokenizedInputHelpers<Item> {\n  cancelBlur: () => void;\n  setFocused: (expanded: boolean) => void;\n  setHighlightedIndex: (value?: number) => void;\n  setValue: (value: string) => void;\n  setSelectedItems: (selectedItems: Array<Item>) => void;\n  updateExpanded: (expanded: boolean) => void;\n}\n\n// Timeout to accommodate blur from the input and a click inside of the container\nconst BLUR_TIMEOUT = 200;\n\n/**\n * Map of the height of TokenizedInput in different density.\n * We have to keep a map of this as we can't always measure the height of the input in it's\n * collapsed state, e.g. in a controlled 'expanded' state.\n */\nconst SINGLE_LINE_HEIGHT_MAP = {\n  touch: 45,\n  low: 36,\n  medium: 28,\n  high: 23,\n};\n\nfunction isValidItem<Item>(data: unknown): data is Item {\n  return (\n    (typeof data === \"string\" && Boolean(data.length)) ||\n    (typeof data !== \"string\" && data != null)\n  );\n}\n\ntype useTokenizedInputResult<Item> = {\n  /**\n   * Used to do auto focus. It should be set to the actual input node.\n   */\n  inputRef: Ref<HTMLInputElement>;\n  /**\n   * The tokenized input state\n   */\n  state: TokenizedInputState<Item>;\n  /**\n   * Utility functions for modifying tokenized input state\n   */\n  helpers: TokenizedInputHelpers<Item>;\n  /**\n   * Properties applied to a basic tokenized input component\n   */\n  inputProps: Omit<TokenizedInputBaseProps<Item>, \"helpers\">;\n};\n\nexport function useTokenizedInput<Item>(\n  props: TokenizedInputProps<Item>\n): useTokenizedInputResult<Item> {\n  validateProps(props);\n\n  const {\n    inFormField,\n    // @ts-ignore\n    popoutMode,\n    // @ts-ignore\n    popoutActions,\n    // @ts-ignore\n    setIsPoppedOut,\n    // @ts-ignore\n    setManagedPopout,\n    // @ts-ignore\n    setIntendedHeight,\n    a11yProps: {\n      \"aria-labelledby\": ariaLabelledBy,\n      disabled: formFieldDisabled,\n    } = {},\n  } = useFormFieldLegacyProps(); // FIXME: FormField Props\n\n  const density = useDensity();\n\n  const {\n    delimiter = \",\",\n    initialSelectedItems = [],\n    itemToString = defaultItemToString,\n    stringToItem = (_, value) => value.trim(),\n    disabled = formFieldDisabled,\n    disableAddOnBlur,\n    onFocus,\n    onBlur,\n    onClick,\n    onExpand,\n    onCollapse,\n    onKeyUp,\n    onKeyDown,\n    onInputSelect,\n    onInputChange,\n    onInputFocus,\n    onInputBlur,\n    onClear,\n    id: idProp,\n    value: valueProp,\n    expanded: expandedProp,\n    selectedItems: selectedItemsProp,\n    onChange: onChangeProp,\n    \"aria-label\": ariaLabel,\n    ...restProps\n  } = props;\n\n  const id = useId(idProp);\n\n  const [value, setValue, isInputControlled] = useControlled<\n    string | undefined\n  >({\n    controlled: valueProp,\n    default: \"\",\n    name: \"TokenizedInput\",\n    state: \"value\",\n  });\n\n  const [\n    // TODO: Check whether defaultValue of [] changes the logic\n    selectedItems = [],\n    setSelectedItems,\n    isSelectionControlled,\n  ] = useControlled<Item[] | undefined>({\n    controlled: selectedItemsProp,\n    default: initialSelectedItems,\n    name: \"TokenizedInput\",\n    state: \"selectedItems\",\n  });\n\n  const [expanded, setExpanded, isExpandedControlled] = useControlled<boolean>({\n    controlled: expandedProp,\n    default: false,\n    name: \"TokenizedInput\",\n    state: \"expanded\",\n  });\n\n  const [activeIndices, setActiveIndices] = useState<number[]>([]);\n  const [highlightedIndex, setHighlightedIndex] = useState<number | undefined>(\n    undefined\n  );\n  const [focused, setFocusedState] = useState(false);\n\n  const inputRef = useRef<HTMLInputElement | null>(null);\n  const blurTimeout = useRef<number | null>(null);\n  const preventBlurOnCopy = useRef(false);\n  const hasActiveItems = Boolean(activeIndices.length);\n\n  const delimiters = ([] as string[]).concat(delimiter);\n  const primaryDelimiter = delimiters[0];\n  const delimiterRegex = new RegExp(\n    delimiters.map(escapeRegExp).join(\"|\"),\n    \"gi\"\n  );\n\n  const onChange = useEventCallback((selectedItems: Item[] | undefined) => {\n    if (onChangeProp) {\n      onChangeProp(selectedItems);\n    }\n  });\n\n  const cancelBlur = useCallback(() => {\n    if (blurTimeout.current) {\n      clearTimeout(blurTimeout.current);\n    }\n    blurTimeout.current = null;\n  }, []);\n\n  const focusInput = useCallback(() => {\n    if (inputRef.current) {\n      inputRef.current.focus();\n\n      if (popoutMode && setIsPoppedOut) {\n        setIsPoppedOut(true);\n      }\n    }\n  }, [popoutMode, setIsPoppedOut]);\n\n  useEffect(\n    () => () => {\n      cancelBlur();\n    },\n    [cancelBlur]\n  );\n\n  useEffect(() => {\n    if (expanded) {\n      focusInput();\n    }\n  }, [expanded, focusInput]);\n\n  useEffect(() => {\n    if (popoutMode && setManagedPopout) {\n      setManagedPopout(true);\n\n      setIntendedHeight(SINGLE_LINE_HEIGHT_MAP[density]);\n    }\n  }, [density, popoutMode, setIntendedHeight, setManagedPopout]);\n\n  const updateInputValue = (newValue: string | undefined) => {\n    if (!isInputControlled) {\n      setValue(newValue);\n    }\n  };\n\n  const updateSelectedItems = useCallback(\n    (action: SetStateAction<Item[] | undefined>) => {\n      if (!isSelectionControlled) {\n        setSelectedItems((prevSelectedItems?: Item[]) => {\n          const newItems =\n            typeof action === \"function\" ? action(prevSelectedItems) : action;\n\n          if (newItems !== prevSelectedItems) {\n            onChange(newItems);\n          }\n\n          return newItems;\n        });\n      } else {\n        onChange(typeof action === \"function\" ? action(selectedItems) : action);\n      }\n    },\n    [isSelectionControlled, setSelectedItems, onChange, selectedItems]\n  );\n\n  const updateExpanded = (newExpanded: boolean) => {\n    if (!isExpandedControlled) {\n      setExpanded(newExpanded);\n    }\n\n    if (newExpanded) {\n      onExpand && onExpand();\n    } else {\n      onCollapse && onCollapse();\n    }\n\n    if (popoutMode && popoutActions) {\n      popoutActions.refresh();\n    }\n  };\n\n  const setFocused = (newState: boolean) => {\n    setFocusedState(newState);\n  };\n\n  const resetInput = () => {\n    updateInputValue(\"\");\n    setHighlightedIndex(undefined);\n    setActiveIndices([]);\n  };\n\n  const removeItems = useCallback(\n    (itemIndices: number[]) => {\n      updateSelectedItems(\n        (prevSelectedItems) =>\n          prevSelectedItems &&\n          (prevSelectedItems.length === 0\n            ? prevSelectedItems\n            : prevSelectedItems.filter(\n                (_, index) => itemIndices.indexOf(index) === -1\n              ))\n      );\n    },\n    [updateSelectedItems]\n  );\n\n  const handleInputFocus = (event: FocusEvent<HTMLInputElement>) => {\n    event.stopPropagation();\n\n    // The input will lose focus when building the text to copy in a temporary\n    // DOM node. This is particularly visible in a slower browser, i.e. IE 11.\n    // This is to prevent a blur in that scenario.\n    if (preventBlurOnCopy.current) {\n      preventBlurOnCopy.current = false;\n      setActiveIndices(\n        Array.from(\n          { length: selectedItems ? selectedItems.length : 0 },\n          (_, index) => index\n        )\n      );\n      return;\n    }\n\n    setFocused(true);\n\n    if (onInputFocus) {\n      onInputFocus(event);\n    }\n\n    if (blurTimeout.current !== null) {\n      cancelBlur();\n    } else {\n      updateExpanded(true);\n\n      if (onFocus) {\n        onFocus(event);\n      }\n    }\n  };\n\n  const handleInputBlur = (event: FocusEvent<HTMLInputElement>) => {\n    event.stopPropagation();\n\n    setFocused(false);\n    setHighlightedIndex(undefined);\n    setActiveIndices([]);\n\n    if (onInputBlur) {\n      onInputBlur(event);\n    }\n\n    handleBlur(event);\n  };\n\n  const handleBlur = (\n    event: FocusEvent<HTMLInputElement | HTMLButtonElement>\n  ) => {\n    if (preventBlurOnCopy.current) {\n      return focusInput();\n    }\n\n    event.persist();\n\n    blurTimeout.current = setTimeout(() => {\n      blurTimeout.current = null;\n      updateExpanded(false);\n\n      if (!disableAddOnBlur) {\n        handleAddItems(value, true);\n      }\n\n      if (onBlur) {\n        onBlur(event);\n      }\n\n      if (popoutMode && setIsPoppedOut) {\n        setIsPoppedOut(false);\n      }\n    }, BLUR_TIMEOUT) as unknown as number;\n  };\n\n  const handleClick = (event: SyntheticEvent<HTMLElement>) => {\n    updateExpanded(true);\n    setActiveIndices([]);\n    focusInput();\n\n    if (onClick) {\n      onClick(event);\n    }\n  };\n\n  const handleInputChange = (event: ChangeEvent<HTMLInputElement>) => {\n    setHighlightedIndex(undefined);\n\n    if (onInputChange) {\n      onInputChange(event);\n    }\n\n    const newValue = event.target.value;\n\n    if (delimiterRegex.test(newValue)) {\n      // Process value with delimiters\n      handleAddItems(newValue);\n    } else {\n      // Just update input value if there is no delimiter\n      updateInputValue(newValue);\n    }\n  };\n\n  const handleAddItems = (\n    newValue: string | undefined,\n    appendOnly?: boolean\n  ) => {\n    if (!newValue || newValue.length === 0) {\n      return;\n    }\n\n    resetInput();\n\n    const newItems = newValue\n      .split(delimiterRegex)\n      .reduce<Item[]>((values, part) => {\n        const newItem = stringToItem(\n          hasActiveItems ? values : selectedItems.concat(values),\n          part\n        );\n        return isValidItem<Item>(newItem) ? values.concat(newItem) : values;\n      }, []);\n\n    if (newItems.length) {\n      updateSelectedItems((prevSelectedItems = []) =>\n        hasActiveItems && !appendOnly\n          ? newItems\n          : prevSelectedItems.concat(newItems)\n      );\n    }\n  };\n\n  const handleRemoveItem = useCallback(\n    (itemIndex?: number) => {\n      focusInput();\n      if (itemIndex) {\n        removeItems([itemIndex]);\n      }\n    },\n    [focusInput, removeItems]\n  );\n\n  const handleClear = (event: ChangeEvent<HTMLInputElement>) => {\n    updateSelectedItems([]);\n    resetInput();\n    focusInput();\n\n    if (onClear) {\n      onClear(event);\n    }\n\n    if (popoutMode && popoutActions) {\n      popoutActions.refresh();\n    }\n  };\n\n  const cursorAtInputStart = () =>\n    getCursorPosition(inputRef) === 0 && Boolean(selectedItems.length);\n\n  const highlightAtPillGroupEnd = () =>\n    highlightedIndex === selectedItems.length - 1;\n\n  const pillGroupKeyDownHandlers: {\n    [key: string]: KeyboardEventHandler<HTMLInputElement>;\n  } = {\n    ArrowLeft: (event) => {\n      event.preventDefault();\n      setHighlightedIndex((prevHighlightedIndex) =>\n        prevHighlightedIndex == null\n          ? selectedItems.length - 1\n          : Math.max(0, prevHighlightedIndex - 1)\n      );\n    },\n    ArrowRight: (event) => {\n      if (highlightAtPillGroupEnd()) {\n        return setHighlightedIndex(undefined);\n      }\n\n      event.preventDefault();\n      setHighlightedIndex((prevHighlightedIndex) =>\n        prevHighlightedIndex == null\n          ? prevHighlightedIndex\n          : Math.min(selectedItems.length - 1, prevHighlightedIndex + 1)\n      );\n    },\n    Backspace: (event) => {\n      event.preventDefault();\n      handleRemoveItem(highlightedIndex);\n      setHighlightedIndex((prevHighlightedIndex) =>\n        prevHighlightedIndex == null\n          ? prevHighlightedIndex\n          : Math.max(0, prevHighlightedIndex - 1)\n      );\n    },\n    Home: (event) => {\n      event.preventDefault();\n      setHighlightedIndex(0);\n    },\n    End: (event) => {\n      event.preventDefault();\n      setHighlightedIndex(selectedItems.length - 1);\n    },\n    Enter: (event) => {\n      event.preventDefault();\n      handleRemoveItem(highlightedIndex);\n    },\n    Delete: (event) => {\n      event.preventDefault();\n      handleRemoveItem(highlightedIndex);\n    },\n    \" \": (event) => {\n      event.preventDefault();\n      handleRemoveItem(highlightedIndex);\n    },\n  };\n\n  const inputKeyDownHandlers: {\n    [key: string]: KeyboardEventHandler<HTMLInputElement>;\n  } = {\n    ArrowLeft: (event) => {\n      if (cursorAtInputStart()) {\n        event.preventDefault();\n        setHighlightedIndex(selectedItems.length - 1);\n      }\n    },\n    Backspace: () => {\n      if (hasActiveItems) {\n        removeItems(activeIndices);\n      } else if (cursorAtInputStart()) {\n        setHighlightedIndex(selectedItems.length - 1);\n      }\n    },\n    Delete: () => {\n      if (hasActiveItems) {\n        removeItems(activeIndices);\n      }\n    },\n    Enter: (event) => {\n      event.preventDefault();\n\n      if (hasActiveItems) {\n        removeItems(activeIndices);\n      } else {\n        handleAddItems(value);\n      }\n    },\n  };\n\n  const handleCtrlModifierKeyDown: InputHTMLAttributes<HTMLInputElement>[\"onKeyDown\"] =\n    (event) => {\n      const win = ownerWindow(event.target as HTMLElement);\n      const supportClipboard = win.navigator && win.navigator.clipboard;\n\n      switch (event.key.toUpperCase()) {\n        case \"A\":\n          // Select all\n          setHighlightedIndex(undefined);\n          setActiveIndices(\n            Array.from({ length: selectedItems.length }, (_, index) => index)\n          );\n          break;\n        case \"C\":\n          // Copy\n          copy(\n            activeIndices\n              .map((index) => itemToString(selectedItems[index]))\n              .concat(value != null ? String(value).trim() : \"\")\n              .filter(Boolean)\n              .join(primaryDelimiter)\n          )\n            .then((result) => {\n              preventBlurOnCopy.current = !supportClipboard;\n              return result;\n            })\n            .catch((error) => {\n              console.error(error);\n            });\n          break;\n        case \"V\":\n          // Paste - do nothing and let handleChange deal with it\n          break;\n        case \"ARROWLEFT\":\n          pillGroupKeyDownHandlers.ArrowLeft(event);\n          break;\n        case \"ARROWRIGHT\":\n          pillGroupKeyDownHandlers.ArrowRight(event);\n          break;\n        case \"BACKSPACE\":\n          if (cursorAtInputStart()) {\n            handleRemoveItem(selectedItems.length - 1);\n          }\n          break;\n        case \"CONTROL\":\n        case \"META\":\n          // Do nothing\n          break;\n        default:\n          // Otherwise, reset active items\n          setActiveIndices([]);\n      }\n    };\n\n  const handleCommonKeyDown = (event: KeyboardEvent<HTMLInputElement>) => {\n    const eventKey = event.key.toUpperCase();\n\n    if (eventKey === \"ESCAPE\") {\n      event.preventDefault();\n      resetInput();\n    } else if (eventKey === \"TAB\" && !disableAddOnBlur) {\n      // Pressing Tab adds a new value\n      handleAddItems(value);\n    }\n  };\n\n  const handleKeyDown: InputHTMLAttributes<HTMLInputElement>[\"onKeyDown\"] = (\n    event\n  ) => {\n    if (onKeyDown) {\n      onKeyDown(event);\n    }\n    if (event.defaultPrevented) {\n      return;\n    }\n    if (\n      event.ctrlKey ||\n      event.metaKey ||\n      [\"CONTROL\", \"META\"].indexOf(event.key.toUpperCase()) !== -1\n    ) {\n      handleCtrlModifierKeyDown(event);\n    } else {\n      let handler;\n\n      if (highlightedIndex == null) {\n        handler = inputKeyDownHandlers[event.key];\n        setActiveIndices([]);\n      } else {\n        handler = pillGroupKeyDownHandlers[event.key];\n      }\n\n      if (handler != null) {\n        handler(event);\n      } else {\n        handleCommonKeyDown(event);\n      }\n    }\n\n    if (popoutMode && popoutActions) {\n      popoutActions.refresh();\n    }\n  };\n\n  const state: TokenizedInputState<Item> = {\n    value,\n    selectedItems,\n    activeIndices,\n    highlightedIndex,\n    expanded,\n    focused: !inFormField && focused,\n  };\n\n  const eventHandlers = {\n    // onFocus is a focus on the expand button\n    // It can also be triggered by a focus on the input\n    onFocus,\n    // onBlur is a blur from the expand button when it's collapsed\n    // It can also be triggered by the clear button\n    onBlur: expanded ? handleBlur : onBlur,\n    onClick: handleClick,\n    onInputSelect,\n    onInputChange: handleInputChange,\n    onInputFocus: handleInputFocus,\n    onInputBlur: handleInputBlur,\n    onKeyDown: handleKeyDown,\n    onRemoveItem: handleRemoveItem,\n    onClear: handleClear,\n  };\n\n  return {\n    inputRef,\n    state,\n    helpers: {\n      cancelBlur,\n      setValue,\n      setSelectedItems,\n      setHighlightedIndex,\n      setFocused,\n      updateExpanded,\n    },\n    inputProps: {\n      id,\n      itemToString,\n      disabled,\n      \"aria-labelledby\": ariaLabelledBy,\n      \"aria-label\": ariaLabel,\n      ...state,\n      ...restProps,\n      ...(disabled ? {} : eventHandlers),\n    },\n  };\n}\n\nconst validateProps = function validateProps<Item>(\n  props: TokenizedInputProps<Item>\n) {\n  if (process.env.NODE_ENV !== \"production\") {\n    const { delimiter } = props;\n\n    const invalidDelimiter = Array.isArray(delimiter)\n      ? delimiter.every(isChar)\n      : isChar(delimiter);\n\n    useEffect(() => {\n      console.warn(\n        \"TokenizedInput delimiter should be a single character or an array of single characters\"\n      );\n    }, [invalidDelimiter]);\n  }\n};\n\nconst isChar = (value: unknown) =>\n  typeof value === \"string\" && value.length === 1;\n"],"names":["value","selectedItems","validateProps"],"mappings":"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"}