import { jsxs, jsx } from 'react/jsx-runtime';
import { clsx } from 'clsx';
import deepmerge from 'deepmerge';
import { forwardRef, useRef, useState, useCallback } from 'react';
import { makePrefixer, useDensity, useId, useIsomorphicLayoutEffect, useForkRef, Button } from '@salt-ds/core';
import { OverflowMenuIcon, CloseIcon } from '@salt-ds/icons';
import { calcFirstHiddenIndex } from './internal/calcFirstHiddenIndex.js';
import { defaultItemToString } from './internal/defaultItemToString.js';
import { InputPill } from './internal/InputPill.js';
import { InputRuler } from './internal/InputRuler.js';
import { useResizeObserver } from './internal/useResizeObserver.js';
import { useWidth } from './internal/useWidth.js';
import { InputLegacy } from '../input-legacy/InputLegacy.js';
import '../input-legacy/StaticInputAdornment.js';
import { useWindow } from '@salt-ds/window';
import { useComponentCssInjection } from '@salt-ds/styles';
import css_248z from './TokenizedInput.css.js';

const INITIAL_INPUT_WIDTH = 5;
const withBaseName = makePrefixer("saltTokenizedInput");
const getItemsAriaLabel = (itemCount) => itemCount === 0 ? "no item selected" : `${itemCount} ${itemCount > 1 ? "items" : "item"}`;
const hasHelpers = (helpers) => {
  if (process.env.NODE_ENV !== "production") {
    if (helpers == null) {
      console.warn(
        'TokenizedInputBase is used without helpers. You should pass in "helpers" from "useTokenizedInput".'
      );
    }
  }
  return helpers != null;
};
const TokenizedInputBase = forwardRef(function TokenizedInputBase2(props, ref) {
  const {
    InputProps: InputProps2 = {},
    ExpandButtonProps = {},
    className,
    activeIndices = [],
    selectedItems = [],
    highlightedIndex,
    value,
    focused,
    expanded,
    disabled,
    helpers,
    onFocus,
    onBlur,
    onKeyUp,
    onKeyDown,
    onRemoveItem,
    onInputChange,
    onInputFocus,
    onInputBlur,
    onInputSelect,
    onClear,
    onClick,
    inputRef,
    itemToString = defaultItemToString,
    id: idProp,
    expandButtonRef: expandButtonRefProp,
    "aria-label": ariaLabel,
    "aria-labelledby": ariaLabelledBy,
    ...restProps
  } = props;
  const targetWindow = useWindow();
  useComponentCssInjection({
    testId: "salt-tokenized-input",
    css: css_248z,
    window: targetWindow
  });
  const density = useDensity();
  const id = useId(idProp);
  const inputId = `${id}-input`;
  const expandButtonId = `${id}-expand-button`;
  const clearButtonId = `${id}-clear-button`;
  const pillGroupPadding = 16;
  const pillsRef = useRef({});
  const inputRulerRef = useRef(null);
  const keydownExpandButton = useRef(false);
  const [expandButtonRef, expandButtonWidth] = useWidth(density);
  const [clearButtonRef, clearButtonWidth] = useWidth(density);
  const [inputWidth, setInputWidth] = useState(INITIAL_INPUT_WIDTH);
  const [pillGroupWidth, setPillGroupWidth] = useState(null);
  const [firstHiddenIndex, setFirstHiddenIndex] = useState(null);
  const showExpandButton = !expanded && firstHiddenIndex != null;
  const widthOffset = pillGroupPadding + INITIAL_INPUT_WIDTH + (expanded ? clearButtonWidth : expandButtonWidth);
  const containerRef = useResizeObserver(
    useCallback(
      ([{ contentRect }]) => {
        setPillGroupWidth(contentRect.width - widthOffset);
      },
      [widthOffset]
    )
  );
  useIsomorphicLayoutEffect(
    () => () => {
      setFirstHiddenIndex(null);
    },
    [density]
  );
  useIsomorphicLayoutEffect(
    () => {
      if (expanded) {
        setFirstHiddenIndex(null);
      } else if (pillGroupWidth != null) {
        setFirstHiddenIndex(
          calcFirstHiddenIndex({
            containerWidth: pillGroupWidth,
            pillWidths: Object.values(pillsRef.current).filter(
              Boolean
            )
          })
        );
      }
    },
    [expanded, pillGroupWidth, selectedItems]
  );
  useIsomorphicLayoutEffect(() => {
    if (expanded && inputRulerRef.current) {
      const newInputWidth = inputRulerRef.current.scrollWidth;
      setInputWidth(Math.min(newInputWidth, pillGroupWidth || 0));
    }
  }, [expanded, pillGroupWidth, value]);
  const handleExpandButtonKeyDown = (event) => {
    const singleChar = event.key.length === 1;
    const triggerExpand = [
      "CONTROL",
      "META",
      "ENTER",
      "BACKSPACE",
      "ARROWDOWN",
      "ARROWLEFT",
      "ARROWRIGHT"
    ].indexOf(event.key.toUpperCase()) !== -1;
    if ((singleChar || triggerExpand) && hasHelpers(helpers)) {
      if (event.key === "Enter" || event.key === " ") {
        event.preventDefault();
        event.stopPropagation();
      }
      helpers.updateExpanded(true);
      keydownExpandButton.current = true;
    }
  };
  const handleInputKeyUp = (event) => {
    if (keydownExpandButton.current && "Enter" !== event.key) {
      keydownExpandButton.current = false;
      if (onKeyDown) {
        onKeyDown(event);
      }
    }
    if (onKeyUp) {
      onKeyUp(event);
    }
  };
  const handleExpand = (event) => {
    event.stopPropagation();
    if (hasHelpers(helpers)) {
      helpers.updateExpanded(true);
    }
  };
  const handleClearButtonFocus = (event) => {
    event.stopPropagation();
    if (hasHelpers(helpers)) {
      helpers.setFocused(false);
      helpers.cancelBlur();
    }
  };
  const selectedItemIds = selectedItems.map(
    (_, index) => `${id}-pill-${index}`
  );
  const inputAriaLabelledBy = disabled ? [ariaLabelledBy, inputId, ...selectedItemIds] : [ariaLabelledBy, inputId];
  const mergedInputProps = deepmerge(
    {
      inputProps: {
        style: {
          width: inputWidth,
          minWidth: inputWidth
        },
        "aria-label": [ariaLabel, getItemsAriaLabel(selectedItems.length)].filter(Boolean).join(" "),
        "aria-labelledby": inputAriaLabelledBy.filter(Boolean).join(" "),
        "aria-activedescendant": highlightedIndex && highlightedIndex >= 0 ? `${id}-pill-${highlightedIndex}` : void 0
      }
    },
    InputProps2
  );
  const {
    accessibleText: expandButtonAccessibleText,
    ...restExpandButtonProps
  } = ExpandButtonProps;
  return /* @__PURE__ */ jsxs("div", {
    ...restProps,
    className: clsx(
      withBaseName(),
      {
        [withBaseName("focused")]: focused,
        [withBaseName("expanded")]: expanded,
        [withBaseName("disabled")]: disabled
      },
      className
    ),
    id,
    onClick,
    ref: useForkRef(ref, containerRef),
    children: [
      /* @__PURE__ */ jsx("span", {
        "aria-owns": selectedItemIds.join(" "),
        className: withBaseName("hidden"),
        role: "listbox"
      }),
      /* @__PURE__ */ jsxs("div", {
        className: withBaseName("pillGroup"),
        children: [
          selectedItems.map((item, index) => {
            const label = itemToString(item);
            return /* @__PURE__ */ jsx(InputPill, {
              active: activeIndices.indexOf(index) !== -1,
              disabled,
              hidden: showExpandButton && index >= firstHiddenIndex,
              highlighted: index === highlightedIndex,
              id: `${id}-pill-${index}`,
              index,
              label,
              lastVisible: !showExpandButton && index === selectedItems.length - 1,
              onDelete: expanded ? onRemoveItem : void 0,
              pillsRef
            }, `${index}-${label}`);
          }),
          /* @__PURE__ */ jsx(Button, {
            "aria-labelledby": [ariaLabelledBy, inputId, expandButtonId].filter(Boolean).join(" "),
            className: clsx(withBaseName("expandButton"), {
              [withBaseName("hidden")]: !showExpandButton
            }),
            disabled,
            id: expandButtonId,
            onBlur,
            onClick: handleExpand,
            onFocus,
            onKeyDown: handleExpandButtonKeyDown,
            ref: useForkRef(expandButtonRef, expandButtonRefProp),
            variant: "secondary",
            ...restExpandButtonProps,
            children: /* @__PURE__ */ jsx(OverflowMenuIcon, {
              "aria-label": expandButtonAccessibleText === void 0 ? "expand edit" : expandButtonAccessibleText
            })
          }),
          /* @__PURE__ */ jsx(InputLegacy, {
            ...mergedInputProps,
            className: clsx(withBaseName("input"), withBaseName("inputField"), {
              [withBaseName("hidden")]: showExpandButton
            }),
            disabled,
            id: inputId,
            onBlur: onInputBlur,
            onChange: onInputChange,
            onFocus: onInputFocus,
            onKeyDown,
            onKeyUp: handleInputKeyUp,
            onSelect: onInputSelect,
            renderSuffix: () => /* @__PURE__ */ jsx(InputRuler, {
              ref: inputRulerRef,
              value
            }),
            value,
            ref: inputRef
          })
        ]
      }),
      /* @__PURE__ */ jsx(Button, {
        className: clsx(withBaseName("clearButton"), {
          [withBaseName("hidden")]: !expanded || selectedItems.length === 0
        }),
        disabled,
        id: clearButtonId,
        onBlur,
        onClick: onClear,
        onFocus: handleClearButtonFocus,
        ref: clearButtonRef,
        variant: "secondary",
        "data-testid": "clear-button",
        children: /* @__PURE__ */ jsx(CloseIcon, {
          "aria-label": "clear input"
        })
      })
    ]
  });
});

export { TokenizedInputBase };
//# sourceMappingURL=TokenizedInputBase.js.map
