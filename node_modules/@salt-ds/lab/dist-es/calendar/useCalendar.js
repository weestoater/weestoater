import { today, getLocalTimeZone, startOfYear, endOfYear, startOfMonth, endOfMonth, isSameDay } from '@internationalized/date';
import { useControlled } from '@salt-ds/core';
import { useCallback, useState, useEffect } from 'react';
import { useSelectionCalendar } from './useSelection.js';

const defaultIsDayUnselectable = () => false;
const defaultIsDayHighlighted = () => false;
const defaultIsDayDisabled = () => false;
function useCalendar(props) {
  const {
    selectedDate,
    defaultSelectedDate,
    visibleMonth: visibleMonthProp,
    hideYearDropdown,
    hideOutOfRangeDates,
    defaultVisibleMonth = today(getLocalTimeZone()),
    onSelectedDateChange,
    onVisibleMonthChange,
    isDayUnselectable = defaultIsDayUnselectable,
    isDayHighlighted = defaultIsDayHighlighted,
    isDayDisabled = defaultIsDayDisabled,
    minDate = hideYearDropdown ? startOfYear(today(getLocalTimeZone())) : void 0,
    maxDate = hideYearDropdown ? endOfYear(today(getLocalTimeZone())) : void 0,
    selectionVariant,
    onHoveredDateChange,
    hoveredDate
  } = props;
  const [visibleMonth, setVisibleMonthState] = useControlled({
    controlled: visibleMonthProp ? startOfMonth(visibleMonthProp) : void 0,
    default: startOfMonth(defaultVisibleMonth),
    name: "Calendar",
    state: "visibleMonth"
  });
  const isOutsideAllowedDates = useCallback(
    (date) => {
      return minDate != null && date.compare(minDate) < 0 || maxDate != null && date.compare(maxDate) > 0;
    },
    [maxDate, minDate]
  );
  const isOutsideAllowedMonths = (date) => {
    return minDate != null && endOfMonth(date).compare(minDate) < 0 || maxDate != null && startOfMonth(date).compare(maxDate) > 0;
  };
  const isOutsideAllowedYears = (date) => {
    return minDate != null && endOfYear(date).compare(minDate) < 0 || maxDate != null && startOfYear(date).compare(maxDate) > 0;
  };
  const isDaySelectable = useCallback(
    (date) => !(date && (isDayUnselectable(date) || isDayDisabled(date) || isOutsideAllowedDates(date))),
    [isDayUnselectable, isDayDisabled, isOutsideAllowedDates]
  );
  const selectionManager = useSelectionCalendar({
    defaultSelectedDate,
    selectedDate,
    onSelectedDateChange,
    startDateOffset: props.selectionVariant === "offset" ? props.startDateOffset : (date) => date,
    endDateOffset: props.selectionVariant === "offset" ? props.endDateOffset : (date) => date,
    isDaySelectable,
    selectionVariant,
    onHoveredDateChange,
    hoveredDate
  });
  const [calendarFocused, setCalendarFocused] = useState(false);
  const [focusedDate, setFocusedDateState] = useState(
    startOfMonth(visibleMonth)
  );
  const isDayVisible = useCallback(
    (date) => {
      const startInsideDays = startOfMonth(visibleMonth);
      if (date.compare(startInsideDays) < 0)
        return false;
      const endInsideDays = endOfMonth(visibleMonth);
      return !(date.compare(endInsideDays) > 0);
    },
    [visibleMonth]
  );
  const setVisibleMonth = useCallback(
    (event, newVisibleMonth) => {
      setVisibleMonthState(newVisibleMonth);
      onVisibleMonthChange == null ? void 0 : onVisibleMonthChange(event, newVisibleMonth);
    },
    [onVisibleMonthChange, setVisibleMonthState]
  );
  const setFocusedDate = useCallback(
    (event, date) => {
      if (isSameDay(date, focusedDate) || isOutsideAllowedDates(date))
        return;
      setFocusedDateState(date);
      const shouldTransition = !isDayVisible(date) && isDaySelectable(date) && !isOutsideAllowedDates(date);
      if (shouldTransition) {
        setVisibleMonth(event, startOfMonth(date));
      }
    },
    [
      focusedDate,
      isDaySelectable,
      isDayVisible,
      isOutsideAllowedDates,
      setVisibleMonth
    ]
  );
  useEffect(() => {
    if (!isDayVisible(focusedDate)) {
      setFocusedDateState(startOfMonth(visibleMonth));
    }
  }, [isDayVisible, focusedDate, visibleMonth]);
  return {
    state: {
      visibleMonth,
      focusedDate,
      minDate,
      maxDate,
      selectionVariant,
      hideOutOfRangeDates,
      calendarFocused,
      ...selectionManager.state
    },
    helpers: {
      setVisibleMonth,
      setFocusedDate,
      setCalendarFocused,
      isDayUnselectable,
      isDayHighlighted,
      isDayDisabled,
      isDayVisible,
      isOutsideAllowedDates,
      isOutsideAllowedMonths,
      isOutsideAllowedYears,
      ...selectionManager.helpers
    }
  };
}

export { useCalendar };
//# sourceMappingURL=useCalendar.js.map
