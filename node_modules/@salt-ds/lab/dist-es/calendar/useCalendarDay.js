import { isSameMonth, isSameDay, isToday, getLocalTimeZone } from '@internationalized/date';
import { useEffect } from 'react';
import { useCalendarContext } from './internal/CalendarContext.js';
import { useFocusManagement } from './internal/useFocusManagement.js';
import { useSelectionDay } from './useSelection.js';

function useCalendarDay({ date, month }, ref) {
  const {
    state: { focusedDate, hideOutOfRangeDates, calendarFocused },
    helpers: {
      isDayUnselectable,
      isDayHighlighted,
      isDayDisabled,
      isOutsideAllowedMonths
    }
  } = useCalendarContext();
  const selectionManager = useSelectionDay({ date });
  const focusManager = useFocusManagement({ date });
  const handleClick = (event) => {
    selectionManager == null ? void 0 : selectionManager.handleClick(event);
    focusManager.handleClick(event);
  };
  const handleKeyDown = (event) => {
    focusManager.handleKeyDown(event);
    selectionManager == null ? void 0 : selectionManager.handleKeyDown(event);
  };
  const handleFocus = (event) => {
    focusManager.handleFocus(event);
  };
  const handleMouseOver = (event) => {
    var _a;
    (_a = selectionManager.handleMouseOver) == null ? void 0 : _a.call(selectionManager, event);
  };
  const eventHandlers = {
    onClick: handleClick,
    onKeyDown: handleKeyDown,
    onFocus: handleFocus,
    onMouseOver: handleMouseOver
  };
  const outOfRange = !isSameMonth(date, month);
  const focused = isSameDay(date, focusedDate) && calendarFocused && !outOfRange;
  const tabIndex = isSameDay(date, focusedDate) && !outOfRange ? 0 : -1;
  const today = isToday(date, getLocalTimeZone());
  const unselectableReason = isDayUnselectable(date);
  const highlightedReason = isDayHighlighted(date);
  const disabled = isDayDisabled(date) || outOfRange && isOutsideAllowedMonths(date);
  const unselectable = Boolean(unselectableReason);
  const highlighted = Boolean(highlightedReason);
  const hidden = hideOutOfRangeDates && outOfRange;
  useEffect(() => {
    var _a;
    if (focused) {
      (_a = ref.current) == null ? void 0 : _a.focus({ preventScroll: true });
    }
  }, [ref, focused]);
  return {
    status: {
      outOfRange,
      today,
      unselectable,
      focused,
      hidden,
      disabled,
      highlighted,
      ...selectionManager.status
    },
    dayProps: {
      tabIndex,
      "aria-current": today ? "date" : void 0,
      "aria-hidden": hidden ? "true" : void 0,
      ...eventHandlers,
      ...selectionManager.dayProps
    },
    unselectableReason,
    highlightedReason
  };
}

export { useCalendarDay };
//# sourceMappingURL=useCalendarDay.js.map
