import { jsx } from 'react/jsx-runtime';
import { forwardRef, useRef, useState, useEffect } from 'react';
import { isSameMonth } from '@internationalized/date';
import { CalendarMonth } from './CalendarMonth.js';
import { makePrefixer, useIsomorphicLayoutEffect } from '@salt-ds/core';
import { useCalendarContext } from './CalendarContext.js';
import css_248z from './CalendarCarousel.css.js';
import { formatDate, monthDiff } from './utils.js';
import { useWindow } from '@salt-ds/window';
import { useComponentCssInjection } from '@salt-ds/styles';

function getMonths(month) {
  return [month.subtract({ months: 1 }), month, month.add({ months: 1 })];
}
const withBaseName = makePrefixer("saltCalendarCarousel");
const CalendarCarousel = forwardRef(function CalendarCarousel2(props, ref) {
  const { ...rest } = props;
  const targetWindow = useWindow();
  useComponentCssInjection({
    testId: "salt-calendar-carousel",
    css: css_248z,
    window: targetWindow
  });
  const {
    state: { visibleMonth }
  } = useCalendarContext();
  const containerRef = useRef(null);
  const diffIndex = (a, b) => monthDiff(a, b);
  const { current: baseIndex } = useRef(visibleMonth);
  useIsomorphicLayoutEffect(() => {
    if (containerRef.current) {
      containerRef.current.style.transform = `translate3d(${diffIndex(baseIndex, visibleMonth) * -101}%, 0, 0)`;
    }
  });
  const [months, setMonths] = useState(() => getMonths(visibleMonth));
  useEffect(() => {
    setMonths((oldMonths) => {
      const newMonths = getMonths(visibleMonth).filter((month) => {
        return !oldMonths.find((oldMonth) => isSameMonth(oldMonth, month));
      });
      return oldMonths.concat(newMonths);
    });
    setMonths(getMonths(visibleMonth));
    return void 0;
  }, [formatDate(visibleMonth)]);
  return /* @__PURE__ */ jsx("div", {
    className: withBaseName(),
    style: {
      overflowX: "hidden",
      position: "relative"
    },
    ref,
    children: /* @__PURE__ */ jsx("div", {
      className: withBaseName("track"),
      ref: containerRef,
      children: months.map((date, index) => /* @__PURE__ */ jsx("div", {
        className: withBaseName("slide"),
        style: {
          transform: `translateX(${diffIndex(date, baseIndex) * -101}%)`
        },
        "aria-hidden": index !== 1 ? "true" : void 0,
        children: /* @__PURE__ */ jsx(CalendarMonth, {
          isVisible: index === 1,
          ...rest,
          date
        })
      }, formatDate(date)))
    })
  });
});

export { CalendarCarousel };
//# sourceMappingURL=CalendarCarousel.js.map
