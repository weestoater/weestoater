import { getLocalTimeZone, startOfWeek, today, startOfMonth, DateFormatter, startOfYear, isSameMonth, createCalendar } from '@internationalized/date';

const localTimezone = getLocalTimeZone();
function getCurrentLocale() {
  return navigator.languages[0];
}
function getDateFormatter(options) {
  return new DateFormatter(getCurrentLocale(), options);
}
function formatDate(date, options) {
  const formatter = getDateFormatter(options);
  return formatter.format(date.toDate(localTimezone));
}
function getCalender() {
  const calendarIdentifier = getDateFormatter().resolvedOptions().calendar;
  return createCalendar(calendarIdentifier);
}
function daysForLocale(weekday = "long") {
  return [...Array(7).keys()].map(
    (day) => formatDate(
      startOfWeek(today(getLocalTimeZone()), getCurrentLocale()).add({
        days: day
      }),
      { weekday }
    )
  );
}
function monthsForLocale(currentYear) {
  const calendar = getCalender();
  return [...Array(calendar.getMonthsInYear(currentYear)).keys()].map(
    (month) => startOfYear(currentYear).add({ months: month })
  );
}
function mapDate(currentDate, currentMonth) {
  return {
    date: currentDate,
    dateOfMonth: currentDate.month,
    isCurrentMonth: isSameMonth(currentDate, currentMonth)
  };
}
function generateVisibleDays(currentMonth) {
  const totalDays = 6 * 7;
  const currentLocale = getCurrentLocale();
  const startDate = startOfWeek(startOfMonth(currentMonth), currentLocale);
  return [...Array(totalDays).keys()].map((dayDelta) => {
    const day = startDate.add({ days: dayDelta });
    return mapDate(day, currentMonth);
  });
}
function monthDiff(a, b) {
  return b.month - a.month + 12 * (b.year - a.year);
}

export { daysForLocale, formatDate, generateVisibleDays, getCalender, getCurrentLocale, getDateFormatter, monthDiff, monthsForLocale };
//# sourceMappingURL=utils.js.map
