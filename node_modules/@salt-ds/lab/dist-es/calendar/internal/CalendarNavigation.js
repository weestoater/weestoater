import { jsxs, jsx } from 'react/jsx-runtime';
import { forwardRef } from 'react';
import { makePrefixer, Tooltip, Button, Dropdown, useListControlContext, Option } from '@salt-ds/core';
import { ChevronLeftIcon, ChevronRightIcon } from '@salt-ds/icons';
import { clsx } from 'clsx';
import { useCalendarContext } from './CalendarContext.js';
import css_248z from './CalendarNavigation.css.js';
import { isSameMonth, isSameYear } from '@internationalized/date';
import { formatDate, monthsForLocale, monthDiff } from './utils.js';
import { useWindow } from '@salt-ds/window';
import { useComponentCssInjection } from '@salt-ds/styles';

const withBaseName = makePrefixer("saltCalendarNavigation");
function useCalendarNavigation() {
  const {
    state: { visibleMonth, minDate, maxDate },
    helpers: {
      setVisibleMonth,
      isDayVisible,
      isOutsideAllowedYears,
      isOutsideAllowedMonths
    }
  } = useCalendarContext();
  const moveToNextMonth = (event) => {
    setVisibleMonth(event, visibleMonth.add({ months: 1 }));
  };
  const moveToPreviousMonth = (event) => {
    setVisibleMonth(event, visibleMonth.subtract({ months: 1 }));
  };
  const moveToMonth = (event, month) => {
    let newMonth = month;
    if (!isOutsideAllowedYears(newMonth)) {
      if (isOutsideAllowedMonths(newMonth)) {
        const navigableMonths = monthsForLocale(visibleMonth).filter(
          (n) => !isOutsideAllowedMonths(n)
        );
        newMonth = navigableMonths.reduce(
          (closestMonth, currentMonth) => Math.abs(monthDiff(currentMonth, newMonth)) < Math.abs(monthDiff(closestMonth, newMonth)) ? currentMonth : closestMonth
        );
      }
      setVisibleMonth(event, newMonth);
    }
  };
  const months = monthsForLocale(visibleMonth);
  const years = [-2, -1, 0, 1, 2].map((delta) => visibleMonth.add({ years: delta })).filter((year) => !isOutsideAllowedYears(year));
  const selectedMonth = months.find(
    (month) => isSameMonth(month, visibleMonth)
  );
  const selectedYear = years.find(
    (year) => isSameYear(year, visibleMonth)
  );
  const canNavigatePrevious = !(minDate && isDayVisible(minDate));
  const canNavigateNext = !(maxDate && isDayVisible(maxDate));
  return {
    moveToNextMonth,
    moveToPreviousMonth,
    moveToMonth,
    visibleMonth,
    months,
    years,
    canNavigateNext,
    canNavigatePrevious,
    selectedMonth,
    selectedYear,
    isOutsideAllowedMonths
  };
}
const OptionWithTooltip = ({
  value,
  children,
  disabled,
  tooltipContent
}) => {
  const { activeState, openState } = useListControlContext();
  const open = (activeState == null ? void 0 : activeState.value) === value;
  return /* @__PURE__ */ jsx(Tooltip, {
    placement: "right",
    open: open && openState,
    disabled: !disabled,
    content: tooltipContent,
    enterDelay: 0,
    leaveDelay: 0,
    children: /* @__PURE__ */ jsx(Option, {
      value,
      disabled,
      children
    })
  });
};
const CalendarNavigation = forwardRef(function CalendarNavigation2(props, ref) {
  const {
    className,
    MonthDropdownProps,
    YearDropdownProps,
    hideYearDropdown,
    ...rest
  } = props;
  const targetWindow = useWindow();
  useComponentCssInjection({
    testId: "salt-calendar-navigation",
    css: css_248z,
    window: targetWindow
  });
  const {
    moveToPreviousMonth,
    moveToNextMonth,
    moveToMonth,
    months,
    years,
    canNavigateNext,
    canNavigatePrevious,
    visibleMonth,
    selectedMonth,
    selectedYear,
    isOutsideAllowedMonths
  } = useCalendarNavigation();
  const handleNavigatePrevious = (event) => {
    moveToPreviousMonth(event);
  };
  const handleNavigateNext = (event) => {
    moveToNextMonth(event);
  };
  const handleMonthSelect = (event, month) => {
    moveToMonth(event, month[0]);
  };
  const handleYearSelect = (event, year) => {
    moveToMonth(event, year[0]);
  };
  const formatMonth = (date) => {
    return !date ? "" : formatDate(date, { month: hideYearDropdown ? "long" : "short" });
  };
  const formatYear = (date) => {
    return !date ? "" : formatDate(date, { year: "numeric" });
  };
  return /* @__PURE__ */ jsxs("div", {
    className: clsx(
      withBaseName(),
      { [withBaseName("hideYearDropdown")]: hideYearDropdown },
      className
    ),
    ref,
    ...rest,
    children: [
      /* @__PURE__ */ jsx(Tooltip, {
        placement: "top",
        disabled: canNavigatePrevious,
        content: "Past dates are out of range",
        enterDelay: 0,
        leaveDelay: 0,
        children: /* @__PURE__ */ jsx(Button, {
          disabled: !canNavigatePrevious,
          variant: "secondary",
          onClick: handleNavigatePrevious,
          focusableWhenDisabled: true,
          children: /* @__PURE__ */ jsx(ChevronLeftIcon, {
            "aria-label": `Previous Month, ${formatDate(
              visibleMonth.subtract({ months: 1 })
            )}`
          })
        })
      }),
      /* @__PURE__ */ jsxs("div", {
        className: withBaseName("dropdowns"),
        children: [
          /* @__PURE__ */ jsx(Dropdown, {
            "aria-label": "Month Dropdown",
            selected: selectedMonth ? [selectedMonth] : [],
            value: formatMonth(selectedMonth),
            onSelectionChange: handleMonthSelect,
            ...MonthDropdownProps,
            children: months.map((month) => /* @__PURE__ */ jsx(OptionWithTooltip, {
              value: month,
              disabled: isOutsideAllowedMonths(month),
              tooltipContent: "This month is out of range",
              children: formatMonth(month)
            }, formatMonth(month)))
          }),
          !hideYearDropdown && /* @__PURE__ */ jsx(Dropdown, {
            "aria-label": "Year Dropdown",
            selected: selectedYear ? [selectedYear] : [],
            value: formatYear(selectedYear),
            onSelectionChange: handleYearSelect,
            ...YearDropdownProps,
            children: years.map((year) => /* @__PURE__ */ jsx(OptionWithTooltip, {
              value: year,
              tooltipContent: "This year is out of range",
              children: formatYear(year)
            }, formatYear(year)))
          })
        ]
      }),
      /* @__PURE__ */ jsx(Tooltip, {
        placement: "top",
        disabled: canNavigateNext,
        content: "Future dates are out of range",
        enterDelay: 0,
        leaveDelay: 0,
        children: /* @__PURE__ */ jsx(Button, {
          disabled: !canNavigateNext,
          variant: "secondary",
          onClick: handleNavigateNext,
          focusableWhenDisabled: true,
          children: /* @__PURE__ */ jsx(ChevronRightIcon, {
            "aria-label": `Next Month, ${formatDate(
              visibleMonth.add({ months: 1 })
            )}`
          })
        })
      })
    ]
  });
});

export { CalendarNavigation };
//# sourceMappingURL=CalendarNavigation.js.map
