import { jsxs, jsx } from 'react/jsx-runtime';
import { clsx } from 'clsx';
import { forwardRef, useState, useRef } from 'react';
import { makePrefixer, useForkRef, useControlled } from '@salt-ds/core';
import '../form-field-context-legacy/FormFieldLegacyContext.js';
import { useFormFieldLegacyProps } from '../form-field-context-legacy/useFormFieldLegacyProps.js';
import { useCursorOnFocus } from './useCursorOnFocus.js';
import { useWindow } from '@salt-ds/window';
import { useComponentCssInjection } from '@salt-ds/styles';
import css_248z from './InputLegacy.css.js';

const withBaseName = makePrefixer("saltInputLegacy");
function mergeA11yProps(a11yProps = {}, inputProps = {}, misplacedAriaProps) {
  const ariaLabelledBy = clsx(
    a11yProps["aria-labelledby"],
    inputProps["aria-labelledby"]
  );
  return {
    ...misplacedAriaProps,
    ...a11yProps,
    ...inputProps,
    "aria-labelledby": ariaLabelledBy ? Array.from(new Set(ariaLabelledBy.split(" "))).join(" ") : null
  };
}
const InputLegacy = forwardRef(
  function Input({
    "aria-activedescendant": ariaActiveDescendant,
    "aria-expanded": ariaExpanded,
    "aria-owns": ariaOwns,
    className: classNameProp,
    cursorPositionOnFocus,
    disabled,
    emptyReadOnlyMarker = "\u2014",
    endAdornment,
    highlightOnFocus,
    id,
    inputComponent: InputComponent = "input",
    inputProps: inputPropsProp,
    role,
    style,
    value: valueProp,
    defaultValue: defaultValueProp = valueProp === void 0 ? "" : void 0,
    onBlur,
    onChange,
    onFocus,
    onKeyDown,
    onKeyUp,
    onMouseUp,
    onMouseMove,
    onMouseDown,
    readOnly: readOnlyProp,
    renderSuffix,
    startAdornment,
    textAlign = "left",
    type = "text",
    ...other
  }, ref) {
    const targetWindow = useWindow();
    useComponentCssInjection({
      testId: "salt-input-legacy",
      css: css_248z,
      window: targetWindow
    });
    const {
      a11yProps: {
        readOnly: a11yReadOnly,
        disabled: a11yDisabled,
        ...restA11y
      } = {},
      setFocused: setFormFieldFocused,
      inFormField
    } = useFormFieldLegacyProps();
    const [focused, setFocused] = useState(false);
    const inputRef = useRef(null);
    const handleRef = useForkRef(inputRef, ref);
    const cursorOnFocusHelpers = useCursorOnFocus(inputRef, {
      cursorPositionOnFocus,
      highlightOnFocus
    });
    const isDisabled = disabled || a11yDisabled;
    const isReadOnly = readOnlyProp || a11yReadOnly;
    const misplacedAriaProps = {
      "aria-activedescendant": ariaActiveDescendant,
      "aria-expanded": ariaExpanded,
      "aria-owns": ariaOwns,
      role
    };
    const inputProps = mergeA11yProps(
      restA11y,
      inputPropsProp,
      misplacedAriaProps
    );
    const isEmptyReadOnly = isReadOnly && !defaultValueProp && !valueProp;
    const defaultValue = isEmptyReadOnly ? emptyReadOnlyMarker : defaultValueProp;
    const [value, setValue] = useControlled({
      controlled: valueProp,
      default: defaultValue,
      name: "Input",
      state: "value"
    });
    const handleChange = (event) => {
      const value2 = event.target.value;
      setValue(value2);
      onChange == null ? void 0 : onChange(event, value2);
    };
    const handleFocus = (event) => {
      onFocus == null ? void 0 : onFocus(event);
      setFormFieldFocused == null ? void 0 : setFormFieldFocused(true);
      setFocused(true);
    };
    const handleBlur = (event) => {
      onBlur == null ? void 0 : onBlur(event);
      setFormFieldFocused == null ? void 0 : setFormFieldFocused(false);
      setFocused(false);
    };
    const handleMouseMove = (event) => {
      cursorOnFocusHelpers.handleMouseMove(event);
      onMouseMove == null ? void 0 : onMouseMove(event);
    };
    const handleMouseUp = (event) => {
      cursorOnFocusHelpers.handleMouseUp();
      onMouseUp == null ? void 0 : onMouseUp(event);
    };
    const handleMouseDown = (event) => {
      cursorOnFocusHelpers.handleMouseDown();
      onMouseDown == null ? void 0 : onMouseDown(event);
    };
    return /* @__PURE__ */ jsxs("div", {
      className: clsx(
        withBaseName(),
        {
          [withBaseName(`${textAlign}TextAlign`)]: textAlign,
          [withBaseName("formField")]: inFormField,
          [withBaseName("focused")]: focused && !inFormField,
          [withBaseName("disabled")]: isDisabled,
          [withBaseName("inputAdornedStart")]: startAdornment,
          [withBaseName("inputAdornedEnd")]: endAdornment
        },
        classNameProp
      ),
      style,
      ...other,
      children: [
        startAdornment && /* @__PURE__ */ jsx("div", {
          className: withBaseName("prefixContainer"),
          children: startAdornment
        }),
        /* @__PURE__ */ jsx(InputComponent, {
          type,
          id,
          ...inputProps,
          className: clsx(withBaseName("input"), inputProps == null ? void 0 : inputProps.className),
          disabled: isDisabled,
          ref: handleRef,
          value,
          onBlur: handleBlur,
          onChange: handleChange,
          onKeyDown,
          onKeyUp,
          onFocus: handleFocus,
          onMouseDown: handleMouseDown,
          onMouseUp: handleMouseUp,
          onMouseMove: handleMouseMove,
          readOnly: isReadOnly
        }),
        endAdornment && /* @__PURE__ */ jsx("div", {
          className: withBaseName("suffixContainer"),
          children: endAdornment
        }),
        renderSuffix == null ? void 0 : renderSuffix({ disabled, focused })
      ]
    });
  }
);

export { InputLegacy };
//# sourceMappingURL=InputLegacy.js.map
