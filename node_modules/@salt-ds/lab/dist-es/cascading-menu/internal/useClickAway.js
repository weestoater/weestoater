import { useEffect } from 'react';
import { useEventCallback } from '../../utils/useEventCallback.js';
import '@salt-ds/core';
import { useMountedRef } from './useMountedRef.js';

function eventComingFromNodes(nodes, event) {
  return nodes.some(
    (node) => node != null && (node === event.target || node.contains(event.target))
  );
}
const useClickAway = (nodes, containingDocument, onClickAway, onClick = () => void 0, mouseEvent = "mouseup") => {
  const mountedRef = useMountedRef();
  const handleClickAway = useEventCallback((event) => {
    if (event.defaultPrevented) {
      return;
    }
    if (!mountedRef.current) {
      return;
    }
    onClick(event);
    if (!nodes) {
      return;
    }
    const resolvedNodes = typeof nodes === "function" ? nodes() : nodes;
    const isEventComingFromNodes = eventComingFromNodes(resolvedNodes, event);
    const ownerDocumentNode = resolvedNodes.find(
      (node) => node ? node.ownerDocument : false
    );
    const doc = containingDocument || ownerDocumentNode && ownerDocumentNode.ownerDocument;
    if (doc.documentElement && doc.documentElement.contains(event.target) && !isEventComingFromNodes) {
      onClickAway(event);
    }
  });
  useEffect(() => {
    var _a;
    if (containingDocument) {
      containingDocument.addEventListener(
        mouseEvent,
        handleClickAway
      );
      (_a = containingDocument.defaultView) == null ? void 0 : _a.addEventListener("blur", onClickAway);
    }
    return () => {
      var _a2;
      if (containingDocument) {
        containingDocument.removeEventListener(
          mouseEvent,
          handleClickAway
        );
        (_a2 = containingDocument.defaultView) == null ? void 0 : _a2.removeEventListener(
          "blur",
          onClickAway
        );
      }
    };
  }, [handleClickAway, mouseEvent, containingDocument, onClickAway]);
};

export { useClickAway };
//# sourceMappingURL=useClickAway.js.map
