import { isValidElement } from 'react';
import { useEventCallback } from '../../utils/useEventCallback.js';
import '@salt-ds/core';
import { stateChangeTypes } from '../stateChangeTypes.js';
import { CascadingMenuAction } from './CascadingMenuAction.js';

function useMenuTriggerHandlers({
  dispatch,
  children,
  setIsNavigatingWithKeyboard,
  openCloseMenu,
  rootMenuState,
  rootMenuId,
  menusDataById = {}
}) {
  const handleOnClick = useEventCallback((event) => {
    var _a;
    const { type } = event;
    setIsNavigatingWithKeyboard(false);
    if (type === "click") {
      if (isValidElement(children)) {
        const childrenProps = children.props;
        (_a = childrenProps.onClick) == null ? void 0 : _a.call(childrenProps, event);
      }
      openCloseMenu(!rootMenuState);
    }
  });
  const handleOnKeydown = useEventCallback(
    (event) => {
      var _a;
      const { key } = event;
      switch (key) {
        case "Spacebar":
        case " ":
        case "Enter":
          event.stopPropagation();
          event.preventDefault();
          setIsNavigatingWithKeyboard(true);
          dispatch({
            type: rootMenuState ? CascadingMenuAction.CLOSE_MENU : CascadingMenuAction.OPEN_MENU,
            cause: stateChangeTypes.KEYBOARD_TOGGLE,
            targetId: rootMenuId
          });
          break;
        case "ArrowDown":
          event.stopPropagation();
          event.preventDefault();
          setIsNavigatingWithKeyboard(true);
          if (rootMenuState) {
            break;
          }
          dispatch({
            type: CascadingMenuAction.OPEN_MENU,
            cause: stateChangeTypes.KEYBOARD_TOGGLE,
            targetId: rootMenuId
          });
          break;
        case "ArrowUp":
          event.stopPropagation();
          event.preventDefault();
          setIsNavigatingWithKeyboard(true);
          if (rootMenuState || !rootMenuId) {
            break;
          }
          dispatch({
            type: CascadingMenuAction.OPEN_MENU,
            cause: stateChangeTypes.KEYBOARD_TOGGLE,
            targetId: rootMenuId
          });
          dispatch({
            type: CascadingMenuAction.SET_CURRENT_INTERACTED_ITEM,
            cause: stateChangeTypes.ITEM_KEYDOWN_ARROW_UP,
            targetId: rootMenuId,
            highlightedItemIndex: menusDataById[rootMenuId].menuItems.length - 1
          });
          break;
      }
      if (isValidElement(children)) {
        const childrenProps = children.props;
        (_a = childrenProps.onKeyDown) == null ? void 0 : _a.call(childrenProps, event);
      }
    }
  );
  return [handleOnClick, handleOnKeydown];
}

export { useMenuTriggerHandlers };
//# sourceMappingURL=useMenuTriggerHandlers.js.map
