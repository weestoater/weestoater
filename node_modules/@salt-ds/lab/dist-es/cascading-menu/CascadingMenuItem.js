import { jsx, jsxs } from 'react/jsx-runtime';
import { makePrefixer, Tooltip } from '@salt-ds/core';
import { ChevronRightIcon } from '@salt-ds/icons';
import { clsx } from 'clsx';
import { forwardRef, useRef, useState, useEffect } from 'react';
import '../list-deprecated/List.js';
import '../list-deprecated/ListBase.js';
import '../list-deprecated/ListItemBase.js';
import { ListItem as _ListItem } from '../list-deprecated/ListItem.js';
import '../list-deprecated/ListItemContext.js';
import '../list-deprecated/ListStateContext.js';
import { useWindow } from '@salt-ds/window';
import { useComponentCssInjection } from '@salt-ds/styles';
import css_248z from './CascadingMenuItem.css.js';

const noop = () => void 0;
const withBaseName = makePrefixer("saltMenuItem");
const getIcon = (sourceItem, isDisabled = false) => {
  const CustomIcon = sourceItem.icon;
  if (CustomIcon) {
    return /* @__PURE__ */ jsx(CustomIcon, {
      className: clsx(withBaseName("menuItemStartAdornment"), {
        [withBaseName("menuItemDisabled")]: isDisabled
      })
    });
  } else {
    return null;
  }
};
const DefaultMenuItem = forwardRef(
  function(props, ref) {
    const {
      blurSelected,
      className,
      hasEndAdornment,
      hasScrollbar,
      hasStartAdornment,
      onItemClick,
      itemToString,
      isInteracted,
      isNavigatingWithKeyboard,
      isChildMenuOpen,
      hasSubMenu,
      sourceItem,
      tooltipEnterDelay,
      tooltipLeaveDelay,
      ...restProps
    } = props;
    const targetWindow = useWindow();
    useComponentCssInjection({
      testId: "salt-cascading-menu-item",
      css: css_248z,
      window: targetWindow
    });
    const menuTextRef = useRef(null);
    const [hasTooltip, setHasTooltip] = useState(false);
    const menuText = itemToString(sourceItem);
    useEffect(() => {
      const element = menuTextRef.current;
      if (element) {
        if (element.offsetWidth < element.scrollWidth) {
          setHasTooltip(true);
        }
      }
    }, [menuText]);
    const isDisabled = sourceItem.disabled;
    const divider = sourceItem.divider;
    const onClick = isDisabled || hasSubMenu ? noop : onItemClick;
    const handleOnClick = (event) => {
      if (!isDisabled && !hasSubMenu) {
        onClick == null ? void 0 : onClick(sourceItem, event);
      }
    };
    const interactionClasses = isNavigatingWithKeyboard ? {
      [withBaseName(`menuItemKeyboardActive`)]: !isDisabled && isInteracted && !blurSelected,
      [withBaseName(`menuItemKeyboardDisabled`)]: isDisabled && isInteracted
    } : {
      [withBaseName(`menuItemHover`)]: !isDisabled && !blurSelected
    };
    const icon = hasStartAdornment ? getIcon(sourceItem, isDisabled) : null;
    const tooltipTitle = sourceItem.tooltip || menuText;
    return /* @__PURE__ */ jsx(Tooltip, {
      disableFocusListener: true,
      disableHoverListener: true,
      enterDelay: tooltipEnterDelay,
      leaveDelay: tooltipLeaveDelay,
      placement: "top",
      disabled: !tooltipTitle || !hasTooltip || isChildMenuOpen,
      content: tooltipTitle,
      children: /* @__PURE__ */ jsxs(_ListItem, {
        ref,
        "aria-expanded": isChildMenuOpen || void 0,
        className: clsx(
          withBaseName(),
          {
            [withBaseName("menuItemDivider")]: divider,
            [withBaseName("menuItemBlurSelected")]: blurSelected,
            [withBaseName("menuItemSelected")]: !isDisabled && !hasSubMenu && isInteracted,
            ...interactionClasses,
            [withBaseName("menuItemWithScrollbar")]: hasScrollbar
          },
          className
        ),
        disabled: isDisabled,
        role: "menuitem",
        onClick: handleOnClick,
        item: sourceItem,
        ...restProps,
        children: [
          hasStartAdornment && /* @__PURE__ */ jsx("div", {
            className: withBaseName("menuItemStartAdornmentContainer"),
            children: icon
          }),
          /* @__PURE__ */ jsx("div", {
            className: clsx(withBaseName("menuItemText"), {
              [withBaseName("menuItemDisabled")]: isDisabled
            }),
            ref: menuTextRef,
            children: menuText
          }),
          hasEndAdornment && /* @__PURE__ */ jsx("div", {
            className: clsx(withBaseName("menuItemEndAdornmentContainer"), {
              [withBaseName("menuItemAdornmentHidden")]: !hasSubMenu
            }),
            children: /* @__PURE__ */ jsx(ChevronRightIcon, {
              className: clsx(withBaseName("menuItemEndAdornment"), {
                [withBaseName("menuItemDisabled")]: isDisabled
              })
            })
          }),
          divider && /* @__PURE__ */ jsx("div", {
            role: "separator"
          })
        ]
      })
    });
  }
);

export { DefaultMenuItem };
//# sourceMappingURL=CascadingMenuItem.js.map
