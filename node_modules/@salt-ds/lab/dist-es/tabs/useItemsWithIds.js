import { jsx } from 'react/jsx-runtime';
import { useCallback, Children, isValidElement, cloneElement, useMemo } from 'react';
import { TabPanel } from './TabPanel.js';

const useItemsWithIds = (children, id = "root") => {
  const normalizeItems = useCallback(
    (items) => {
      const sourceMap2 = {};
      const tabDescriptors = Children.toArray(items).filter(isValidElement).map((child, index) => {
        const {
          "data-label": dataLabel = `Tab ${index + 1}`,
          enableClose: closeable,
          label = dataLabel
        } = child.props;
        const tabId = `${id}-${index}`;
        const tabPanelId = `${tabId}-panel`;
        const props = {
          "aria-labelledby": tabId,
          id: tabPanelId,
          key: tabId
        };
        const element = child.type === TabPanel ? cloneElement(child, props) : /* @__PURE__ */ jsx(TabPanel, {
          ...props,
          label,
          children: child
        });
        const tab = {
          closeable,
          element,
          id: tabId,
          label
        };
        sourceMap2[tabId] = tab;
        return tab;
      });
      return [tabDescriptors, sourceMap2];
    },
    [id]
  );
  const [sourceWithIds, sourceMap] = useMemo(() => {
    return normalizeItems(children);
  }, [normalizeItems, children]);
  const itemById = useCallback(
    (id2) => sourceMap[id2],
    [sourceWithIds, sourceMap]
  );
  return [sourceWithIds, itemById];
};

export { useItemsWithIds };
//# sourceMappingURL=useItemsWithIds.js.map
