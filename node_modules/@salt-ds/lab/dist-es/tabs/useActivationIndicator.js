import { useState, useRef, useCallback, useEffect } from 'react';
import '@salt-ds/core';
import 'react/jsx-runtime';
import { useResizeObserver, WidthOnly } from '../responsive/useResizeObserver.js';

const MEASUREMENTS = {
  horizontal: {
    pos: "left",
    size: "width"
  },
  vertical: {
    pos: "top",
    size: "height"
  }
};
function useActivationIndicator({
  rootRef,
  tabId,
  orientation
}) {
  const [style, setStyle] = useState({
    left: 0,
    width: 0
  });
  const styleRef = useRef(style);
  const getTabPos = useCallback(() => {
    const { pos, size } = MEASUREMENTS[orientation];
    return [pos, size];
  }, [orientation]);
  const createIndicatorStyle = useCallback(
    (tabElement) => {
      if (tabElement) {
        const tabRect = tabElement.getBoundingClientRect();
        if (rootRef.current && tabRect) {
          const rootRect = rootRef.current.getBoundingClientRect();
          const [pos, size] = getTabPos();
          const { [pos]: existingPos, [size]: existingSize } = styleRef.current;
          const newPos = tabRect[pos] - rootRect[pos];
          const newSize = tabRect[size];
          return {
            [pos]: newPos,
            [size]: newSize,
            hasChanged: newPos !== existingPos || newSize !== existingSize
          };
        }
      }
      return {};
    },
    [orientation, rootRef]
  );
  const onResize = useCallback(() => {
    requestAnimationFrame(() => {
      if (tabId) {
        const tabEl = document.getElementById(tabId);
        const { hasChanged, ...newStyle } = createIndicatorStyle(tabEl);
        if (hasChanged) {
          setStyle(newStyle);
        }
      }
    });
  }, [createIndicatorStyle, tabId]);
  useEffect(() => {
    if (tabId) {
      setTimeout(() => {
        const tabEl = document.getElementById(tabId);
        const { hasChanged, ...newStyle } = createIndicatorStyle(tabEl);
        if (hasChanged) {
          setStyle(styleRef.current = newStyle);
        }
      }, 50);
    }
  }, [createIndicatorStyle, tabId]);
  useResizeObserver(rootRef, WidthOnly, onResize);
  return style;
}

export { useActivationIndicator };
//# sourceMappingURL=useActivationIndicator.js.map
