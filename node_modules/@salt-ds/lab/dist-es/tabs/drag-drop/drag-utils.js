import { FWD } from './dragDropTypes.js';

const LEFT_RIGHT = ["left", "right"];
const TOP_BOTTOM = ["top", "bottom"];
const measureElementSizeAndPosition = (element, dimension = "width", includeAutoMargin = false) => {
  const pos = dimension === "width" ? "left" : "top";
  const { [dimension]: size, [pos]: position } = element.getBoundingClientRect();
  const { padEnd = false, padStart = false } = element.dataset;
  const style = getComputedStyle(element);
  const [start, end] = dimension === "width" ? LEFT_RIGHT : TOP_BOTTOM;
  const marginStart = padStart && !includeAutoMargin ? 0 : parseInt(style.getPropertyValue(`margin-${start}`), 10);
  const marginEnd = padEnd && !includeAutoMargin ? 0 : parseInt(style.getPropertyValue(`margin-${end}`), 10);
  let minWidth = size;
  const flexShrink = parseInt(style.getPropertyValue("flex-shrink"), 10);
  if (flexShrink > 0) {
    const flexBasis = parseInt(style.getPropertyValue("flex-basis"), 10);
    if (!isNaN(flexBasis) && flexBasis > 0) {
      minWidth = flexBasis;
    }
  }
  return [position, marginStart + minWidth + marginEnd];
};
const DIMENSIONS = {
  horizontal: {
    CLIENT_SIZE: "clientWidth",
    CONTRA: "top",
    CONTRA_POS: "clientY",
    DIMENSION: "width",
    END: "right",
    POS: "clientX",
    SCROLL_POS: "scrollTop",
    SCROLL_SIZE: "scrollWidth",
    START: "left"
  },
  vertical: {
    CLIENT_SIZE: "clientHeight",
    CONTRA: "left",
    CONTRA_POS: "clientX",
    DIMENSION: "height",
    END: "bottom",
    POS: "clientY",
    SCROLL_POS: "scrollLeft",
    SCROLL_SIZE: "scrollHeight",
    START: "top"
  }
};
const dimensions = (orientation) => DIMENSIONS[orientation];
const getDraggedItem = (measuredItems) => {
  const result = measuredItems.find((item) => item.isDraggedElement);
  if (result) {
    return result;
  } else {
    throw Error("measuredItems do not contain a draggedElement");
  }
};
const moveDragItem = (measuredItems, dropTarget) => {
  const items = measuredItems.slice();
  const draggedItem = getDraggedItem(items);
  const draggedIndex = items.indexOf(draggedItem);
  const targetIndex = items.indexOf(dropTarget);
  const firstPos = Math.min(draggedIndex, targetIndex);
  const lastPos = Math.max(draggedIndex, targetIndex);
  let { start } = items[firstPos];
  items[draggedIndex] = { ...dropTarget };
  items[targetIndex] = { ...draggedItem };
  for (let i = firstPos; i <= lastPos; i++) {
    const item = items[i];
    item.currentIndex = i;
    item.start = start;
    item.end = start + item.size;
    item.mid = start + item.size / 2;
    start = item.end;
  }
  return items;
};
const isDraggedElement = (item) => item.isDraggedElement;
const measureDropTargets = (container, orientation, draggedItem, itemQuery) => {
  var _a;
  const dragThresholds = [];
  const children = Array.from(
    itemQuery ? container.querySelectorAll(itemQuery) : container.children
  );
  for (let index = 0; index < children.length; index++) {
    const element = children[index];
    const dimension = orientation === "horizontal" ? "width" : "height";
    let [start, size] = measureElementSizeAndPosition(element, dimension);
    dragThresholds.push(
      {
        currentIndex: index,
        dataIndex: parseInt((_a = element.dataset.index) != null ? _a : "-1"),
        index,
        isDraggedElement: element === draggedItem,
        isOverflowIndicator: element.dataset.overflowIndicator === "true",
        element,
        start,
        end: start + size,
        size,
        mid: start + size / 2
      }
    );
  }
  return dragThresholds;
};
const getNextDropTarget = (dropTargets, pos, direction) => {
  const len = dropTargets.length;
  if (direction === FWD) {
    for (let index = 0; index < len; index++) {
      let dropTarget = dropTargets[index];
      const { start, mid, end } = dropTarget;
      if (pos > end) {
        continue;
      } else if (pos > mid) {
        return dropTarget.isDraggedElement ? null : dropTarget;
      } else if (pos > start) {
        dropTarget = dropTargets[index - 1];
        return dropTarget.isDraggedElement ? null : dropTarget;
      }
    }
  } else {
    for (let index = len - 1; index >= 0; index--) {
      let dropTarget = dropTargets[index];
      const { start, mid, end } = dropTarget;
      if (pos < start) {
        continue;
      } else if (pos < mid) {
        return dropTarget.isDraggedElement ? null : dropTarget;
      } else if (pos < end) {
        dropTarget = dropTargets[Math.min(len - 1, index + 1)];
        return dropTarget.isDraggedElement ? null : dropTarget;
      }
    }
  }
  return null;
};

export { dimensions, getDraggedItem, getNextDropTarget, isDraggedElement, measureDropTargets, measureElementSizeAndPosition, moveDragItem };
//# sourceMappingURL=drag-utils.js.map
