import { jsx } from 'react/jsx-runtime';
import { useForkRef } from '@salt-ds/core';
import { clsx } from 'clsx';
import { forwardRef, useCallback } from 'react';
import { Portal } from '../../portal/Portal.js';
import css_248z from './Draggable.css.js';
import { useComponentCssInjection } from '@salt-ds/styles';
import { useWindow } from '@salt-ds/window';

const makeClassNames = (classNames) => classNames.split(" ").map((className) => `saltDraggable-${className}`);
const Draggable = forwardRef(function Draggable2({ wrapperClassName, element, rect, scale = 1 }, forwardedRef) {
  const targetWindow = useWindow();
  useComponentCssInjection({
    testId: "salt-draggable",
    css: css_248z,
    window: targetWindow
  });
  const callbackRef = useCallback(
    (el) => {
      if (el) {
        el.innerHTML = "";
        el.appendChild(element);
        if (scale !== 1) {
          el.style.transform = `scale(${scale},${scale})`;
        }
      }
    },
    [element, scale]
  );
  const forkedRef = useForkRef(forwardedRef, callbackRef);
  const { left, top, width, height } = rect;
  return /* @__PURE__ */ jsx(Portal, {
    children: /* @__PURE__ */ jsx("div", {
      className: clsx("saltDraggable", ...makeClassNames(wrapperClassName)),
      ref: forkedRef,
      style: { left, top, width, height }
    })
  });
});
const createDragSpacer = (transitioning) => {
  const spacer = document.createElement("div");
  spacer.className = "saltDraggable-spacer";
  if (transitioning) {
    spacer.addEventListener("transitionend", () => {
      transitioning.current = false;
    });
  }
  return spacer;
};

export { Draggable, createDragSpacer };
//# sourceMappingURL=Draggable.js.map
