import { jsx } from 'react/jsx-runtime';
import { forwardRef, useState, useCallback, Children } from 'react';
import { makePrefixer, useIsomorphicLayoutEffect } from '@salt-ds/core';
import { DeckItem } from '../deck-item/DeckItem.js';
import '../responsive/useResizeObserver.js';
import { useWidth } from '../responsive/useWidth.js';
import { clsx } from 'clsx';
import { useWindow } from '@salt-ds/window';
import { useComponentCssInjection } from '@salt-ds/styles';
import css_248z from './DeckLayout.css.js';

const withBaseName = makePrefixer("saltDeckLayout");
const DeckLayout = forwardRef(
  function DeckLayout2({
    activeIndex = 0,
    animation,
    className,
    children,
    direction = "horizontal",
    style,
    deckItemProps,
    ...rest
  }, ref) {
    const targetWindow = useWindow();
    useComponentCssInjection({
      testId: "salt-deck-layout",
      css: css_248z,
      window: targetWindow
    });
    const [deckItemRef, deckItemWidth] = useWidth(true);
    const [deckItemHeight, setDeckItemHeight] = useState(0);
    const handleResize = useCallback(
      function handleResize2(contentRect) {
        setDeckItemHeight(contentRect.height);
      },
      []
    );
    useIsomorphicLayoutEffect(() => {
      if (!deckItemRef.current) {
        return void 0;
      }
      handleResize(deckItemRef.current.getBoundingClientRect());
      const observer = new ResizeObserver(
        ([{ contentRect }]) => {
          handleResize(contentRect);
        }
      );
      observer.observe(deckItemRef.current);
      return () => {
        observer.disconnect();
      };
    }, [deckItemRef, handleResize]);
    const deckLayoutStyles = {
      ...style,
      "--deckLayout-width": `${deckItemWidth}px`,
      "--deckLayout-height": `${deckItemHeight}px`
    };
    const innerStyles = {
      "--deckLayout-transform-value": `-${activeIndex * 100}%`
    };
    return /* @__PURE__ */ jsx("div", {
      className: clsx(withBaseName(), className),
      style: deckLayoutStyles,
      ref,
      ...rest,
      children: /* @__PURE__ */ jsx("div", {
        className: clsx(
          {
            [withBaseName("animate")]: animation
          },
          {
            [withBaseName(`${animation || "slide"}-${direction}`)]: animation
          }
        ),
        style: innerStyles,
        children: Children.map(children, (child, index) => {
          return /* @__PURE__ */ jsx(DeckItem, {
            ref: deckItemRef,
            index,
            activeIndex,
            animation,
            ...deckItemProps,
            children: child
          });
        })
      })
    });
  }
);

export { DeckLayout };
//# sourceMappingURL=DeckLayout.js.map
