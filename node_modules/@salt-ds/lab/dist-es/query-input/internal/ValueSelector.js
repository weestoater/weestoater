import { jsx } from 'react/jsx-runtime';
import { makePrefixer, useFloatingUI, useForkRef, useIsomorphicLayoutEffect } from '@salt-ds/core';
import { useMemo } from 'react';
import { CategoryList } from './CategoryList.js';
import { SearchList } from './SearchList.js';
import { ValueList } from './ValueList.js';
import { Portal } from '../../portal/Portal.js';
import { useWindow } from '../../window/WindowContext.js';
import '../../window/ElectronWindow.js';

const withBaseName = makePrefixer("saltQueryInputValueSelector");
function ValueSelector(props) {
  const {
    isOpen,
    inputValue,
    anchorElement,
    popperRef,
    categories,
    selectedCategory,
    onSelectedCategoryChange,
    width,
    selectedItems,
    onValueToggle,
    highlightedIndex,
    visibleCategories,
    highlightedCategoryIndex,
    highlightedValueIndex,
    onSearchListChange,
    setHighlightedValueIndex,
    setHighlightedCategoryIndex,
    setHighlightedIndex
  } = props;
  const selectedCategoryValues = useMemo(() => {
    if (!selectedCategory) {
      return [];
    }
    return selectedItems.filter((item) => item.category === selectedCategory.name).map(({ value }) => value);
  }, [selectedCategory, selectedItems]);
  const onBackToCategories = () => {
    onSelectedCategoryChange(null);
  };
  const renderContent = () => {
    if (inputValue) {
      return /* @__PURE__ */ jsx(SearchList, {
        inputValue,
        selectedItems,
        onChange: onSearchListChange,
        rootWidth: width,
        highlightedIndex,
        visibleCategories,
        setHighlightedIndex
      });
    }
    if (!selectedCategory) {
      return /* @__PURE__ */ jsx(CategoryList, {
        categories,
        rootWidth: width,
        onCategorySelect: onSelectedCategoryChange,
        highlightedCategoryIndex,
        setHighlightedCategoryIndex
      });
    }
    return /* @__PURE__ */ jsx(ValueList, {
      category: selectedCategory,
      rootWidth: width,
      onBack: onBackToCategories,
      selectedValues: selectedCategoryValues,
      onValueToggle,
      highlightedValueIndex,
      setHighlightedValueIndex
    });
  };
  const Window = useWindow();
  const { reference, floating, x, y, strategy } = useFloatingUI({
    placement: "bottom"
  });
  const handleRef = useForkRef(floating, popperRef);
  useIsomorphicLayoutEffect(() => {
    if (anchorElement) {
      reference(anchorElement);
    }
  }, [reference, anchorElement]);
  if (!isOpen) {
    return null;
  }
  return /* @__PURE__ */ jsx(Portal, {
    children: /* @__PURE__ */ jsx(Window, {
      style: {
        top: y != null ? y : 0,
        left: x != null ? x : 0,
        position: strategy
      },
      ref: handleRef,
      children: /* @__PURE__ */ jsx("div", {
        className: withBaseName("content"),
        children: renderContent()
      })
    })
  });
}

export { ValueSelector };
//# sourceMappingURL=ValueSelector.js.map
