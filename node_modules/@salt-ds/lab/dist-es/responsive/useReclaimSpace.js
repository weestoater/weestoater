import { useCallback } from 'react';
import { popNextItemByPriority, measureContainerOverflow, getOverflowIndicator } from './overflowUtils.js';

const getPriority = (item) => item.priority;
const canReclaimSpace = (item) => item.collapsed && item.reclaimSpace;
const hasReclaimedSpace = (item) => item.reclaimedSpace;
const getReclaimableSpace = ({ size, minSize = 0 }) => size - minSize;
const findNextOverflowedItem = (items) => {
  const overflowedItems = items.filter((item) => item.overflowed);
  const minPriority = Math.min(...overflowedItems.map(getPriority));
  for (let i = 0; i < overflowedItems.length; i++) {
    if (overflowedItems[i].priority === minPriority) {
      return overflowedItems[i];
    }
  }
  return null;
};
const addAllVisible = (sum, m) => sum + (m.overflowed ? 0 : m.size);
const canReleaseReclaimedSpace = (size, items) => {
  const claimant = items.find(hasReclaimedSpace);
  const overflowedItem = findNextOverflowedItem(items);
  if (claimant && overflowedItem) {
    const renderedSize = items.reduce(addAllVisible, 0);
    const { size: indicatorSize } = getOverflowIndicator(items);
    const { size: overflowedSize } = overflowedItem;
    const reclaimableSpace = getReclaimableSpace(claimant);
    const renderedSizeAfterReclaim = renderedSize - reclaimableSpace - indicatorSize;
    const maxAvailableSpace = size - renderedSizeAfterReclaim;
    if (maxAvailableSpace >= overflowedSize) {
      return true;
    }
  }
};
const mightBeAbleToReclaimSpace = (items) => items.some(canReclaimSpace);
const useReclaimSpace = ({
  collectionHook,
  label = "Toolbar",
  overflowItemsRef: managedItemsRef,
  overflowContainerRef: ref,
  orientation
}) => {
  useCallback(
    (visibleContentSize, containerSize) => {
      let newlyOverflowedItems = [];
      const { current: managedItems } = managedItemsRef;
      const visibleItems = managedItems.slice();
      while (visibleContentSize > containerSize) {
        const overflowedItem = popNextItemByPriority(visibleItems);
        if (overflowedItem === null) {
          break;
        }
        visibleContentSize -= overflowedItem.size;
        newlyOverflowedItems.push(overflowedItem);
      }
      return newlyOverflowedItems;
    },
    []
  );
  const releaseReclaimedSpace = useCallback(() => {
    const { current: managedItems } = managedItemsRef;
    const claimant = managedItems.find(hasReclaimedSpace);
    if (claimant) {
      collectionHook.dispatch({
        type: "replace-item",
        overflowItem: {
          ...claimant,
          collapsed: true,
          collapsing: false,
          reclaimedSpace: void 0,
          size: claimant.minSize,
          fullSize: claimant.size
        }
      });
    }
  }, []);
  const handleResize = useCallback(
    (size, containerHasGrown) => {
      const { isOverflowing: willOverflow } = measureContainerOverflow(
        ref,
        orientation
      );
      const { current: managedItems } = managedItemsRef;
      if (containerHasGrown && canReleaseReclaimedSpace(size, managedItems)) {
        releaseReclaimedSpace();
      } else if (!containerHasGrown && willOverflow && mightBeAbleToReclaimSpace(managedItems)) {
        const collapsedChild = managedItems.find(canReclaimSpace);
        if (collapsedChild) {
          collectionHook.dispatch({
            type: "replace-item",
            overflowItem: {
              ...collapsedChild,
              collapsed: false,
              collapsing: true,
              reclaimedSpace: true,
              size: collapsedChild.fullSize,
              fullSize: null
            }
          });
        }
      }
    },
    []
  );
  return {
    onResize: handleResize
  };
};

export { addAllVisible, useReclaimSpace };
//# sourceMappingURL=useReclaimSpace.js.map
