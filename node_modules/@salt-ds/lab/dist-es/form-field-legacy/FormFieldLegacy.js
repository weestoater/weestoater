import { jsx, jsxs } from 'react/jsx-runtime';
import { clsx } from 'clsx';
import { forwardRef, useRef, useMemo, useState } from 'react';
import { makePrefixer, useId, useForkRef, Tooltip } from '@salt-ds/core';
import { FormFieldLegacyContext } from '../form-field-context-legacy/FormFieldLegacyContext.js';
import { classBase } from './constant.js';
import { FormActivationIndicator } from './FormActivationIndicator.js';
import { FormHelperText } from './FormHelperText.js';
import { FormLabel } from './FormLabel.js';
import { useWindow } from '@salt-ds/window';
import { useComponentCssInjection } from '@salt-ds/styles';
import css_248z from './FormFieldLegacy.css.js';

const useA11yValue = ({
  required,
  disabled,
  readOnly,
  labelId,
  helperTextId,
  renderHelperText
}) => {
  return useMemo(
    () => ({
      "aria-labelledby": labelId,
      "aria-required": required,
      "aria-describedby": renderHelperText ? helperTextId : void 0,
      disabled,
      readOnly
    }),
    [labelId, disabled, readOnly, required, renderHelperText, helperTextId]
  );
};
const useFormFieldLegacy = ({
  onBlur,
  onFocus
}) => {
  const [focused, setFocused] = useState(false);
  const handleBlur = (event) => {
    setFocused(false);
    onBlur == null ? void 0 : onBlur(event);
  };
  const handleFocus = (event) => {
    setFocused(true);
    onFocus == null ? void 0 : onFocus(event);
  };
  return [
    {
      focused
    },
    {
      setFocused
    },
    {
      onBlur: handleBlur,
      onFocus: handleFocus
    }
  ];
};
const withBaseName = makePrefixer(classBase);
const FormFieldLegacy = forwardRef(
  ({
    ActivationIndicatorComponent = FormActivationIndicator,
    children,
    className,
    disabled,
    disableFocusRing = false,
    fullWidth = true,
    hasStatusIndicator,
    HelperTextComponent = FormHelperText,
    HelperTextProps,
    helperText,
    helperTextPlacement = "bottom",
    label,
    LabelComponent = FormLabel,
    labelPlacement = "top",
    LabelProps = { displayedNecessity: "required" },
    onBlur,
    onFocus,
    readOnly,
    required,
    StatusIndicatorProps: StatusIndicatorProps2,
    validationStatus,
    variant = "primary",
    ...restProps
  }, ref) => {
    const targetWindow = useWindow();
    useComponentCssInjection({
      testId: "salt-form-field-legacy",
      css: css_248z,
      window: targetWindow
    });
    const labelId = useId(LabelProps == null ? void 0 : LabelProps.id);
    const helperTextId = useId(HelperTextProps == null ? void 0 : HelperTextProps.id);
    const rootRef = useRef(null);
    const renderHelperText = !!helperText;
    const a11yValue = useA11yValue({
      required,
      disabled,
      readOnly,
      labelId,
      helperTextId,
      renderHelperText
    });
    const [states, dispatchers, eventHandlers] = useFormFieldLegacy({
      onBlur,
      onFocus
    });
    const hasLabel = label !== void 0;
    const labelTop = hasLabel && labelPlacement === "top";
    const labelLeft = hasLabel && labelPlacement === "left";
    const isWarning = validationStatus === "warning";
    const isError = validationStatus === "error";
    const focusClass = disableFocusRing ? "lowFocused" : "focused";
    const inlineHelperText = renderHelperText && helperTextPlacement === "bottom";
    const tooltipHelperText = renderHelperText && helperTextPlacement === "tooltip" && !hasStatusIndicator;
    const handleTriggerRef = useForkRef(rootRef, ref);
    return /* @__PURE__ */ jsx(Tooltip, {
      disabled: !tooltipHelperText,
      content: helperText,
      children: /* @__PURE__ */ jsx("div", {
        ref: handleTriggerRef,
        className: clsx(
          withBaseName(),
          {
            [withBaseName("disabled")]: disabled,
            [withBaseName("readOnly")]: readOnly,
            [withBaseName("warning")]: isWarning,
            [withBaseName("error")]: isError,
            [withBaseName("fullWidth")]: fullWidth,
            [withBaseName(focusClass)]: states.focused,
            [withBaseName("labelTop")]: labelTop,
            [withBaseName("labelLeft")]: labelLeft,
            [withBaseName(`withHelperText`)]: inlineHelperText,
            [withBaseName(variant)]: variant
          },
          className
        ),
        ...eventHandlers,
        ...restProps,
        children: /* @__PURE__ */ jsxs(FormFieldLegacyContext.Provider, {
          value: {
            ...states,
            ...dispatchers,
            ...eventHandlers,
            a11yProps: a11yValue,
            inFormField: true,
            ref: rootRef
          },
          children: [
            hasLabel && /* @__PURE__ */ jsx(LabelComponent, {
              ...LabelProps,
              validationStatus,
              hasStatusIndicator,
              StatusIndicatorProps: StatusIndicatorProps2,
              className: LabelProps.className,
              label,
              disabled,
              readOnly,
              required,
              tooltipText: helperText,
              id: labelId
            }),
            children,
            /* @__PURE__ */ jsx(ActivationIndicatorComponent, {
              hasIcon: !hasStatusIndicator,
              validationStatus
            }),
            renderHelperText && /* @__PURE__ */ jsx(HelperTextComponent, {
              helperText,
              helperTextPlacement,
              ...HelperTextProps,
              id: helperTextId
            })
          ]
        })
      })
    });
  }
);

export { FormFieldLegacy, useFormFieldLegacy };
//# sourceMappingURL=FormFieldLegacy.js.map
