{"version":3,"file":"useVirtualization.js","sources":["../src/list/useVirtualization.ts"],"sourcesContent":["import {\n  RefObject,\n  UIEvent,\n  useCallback,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport { KeySet } from \"./keyset\";\nimport { CollectionItem } from \"../common-hooks\";\nimport { useIsomorphicLayoutEffect } from \"@salt-ds/core\";\n\n/**\n * [ item key, total height before the item, next row index, CollectionItem<Item>]\n * e.g. first item: [0, 0, 1, data[0]]\n */\nexport type Row<Item> = [number, number, number, CollectionItem<Item>];\n\nconst byKey = ([k1]: Row<unknown>, [k2]: Row<unknown>) => k1 - k2;\n\nconst renderBuffer = 5;\n\ninterface VirtualizationHookProps<Item> {\n  viewportRef: RefObject<HTMLElement>;\n  data: CollectionItem<Item>[];\n  itemGapSize?: number;\n}\n\ninterface VirtualizationHookResult<Item> {\n  rows: Row<Item>[];\n  contentHeight: number;\n  onVerticalScroll: (e: UIEvent<HTMLElement>) => void;\n}\n\nexport const useVirtualization = <Item>({\n  viewportRef,\n  data,\n  itemGapSize = 0,\n}: VirtualizationHookProps<Item>): VirtualizationHookResult<Item> => {\n  const viewportMeasures = useRef({\n    contentHeight: 10000,\n    firstVisibleRow: 0,\n    rowCount: 0,\n    rowHeight: 0,\n    scrollPos: 0,\n  });\n  const [rows, setRows] = useState<Row<Item>[]>([]);\n  const keys = useMemo(() => new KeySet(0, 1), []);\n\n  const updateRows = useCallback(\n    (from: number, to: number) => {\n      const { rowHeight } = viewportMeasures.current;\n      const rowHeightWithGap = rowHeight + itemGapSize;\n      const lo = Math.max(0, from - renderBuffer);\n      const hi = Math.min(data.length, to + renderBuffer);\n      keys.reset(lo, hi);\n      const newRows = data\n        .slice(lo, hi)\n        .map(\n          (value, idx) =>\n            [\n              keys.keyFor(idx + lo),\n              (idx + lo) * rowHeightWithGap,\n              idx + lo + 1,\n              value,\n            ] as Row<Item>\n        )\n        .sort(byKey);\n      setRows(newRows);\n    },\n    [data, itemGapSize, keys]\n  );\n\n  useIsomorphicLayoutEffect(() => {\n    const viewport = viewportMeasures.current;\n    const viewportEl = viewportRef.current;\n    if (viewportEl) {\n      // TODO no reference to ListItem className\n      const listItemEl = viewportEl.querySelector(\".saltListItem\");\n      if (listItemEl) {\n        const { height: viewportHeight } = viewportEl.getBoundingClientRect();\n        const { height: rowHeight } = listItemEl.getBoundingClientRect();\n        viewport.rowHeight = rowHeight;\n        viewport.rowCount = Math.ceil(viewportHeight / rowHeight);\n        viewport.contentHeight = (rowHeight + itemGapSize) * data.length;\n        updateRows(0, viewport.rowCount);\n      }\n    }\n  }, [data, itemGapSize, keys, updateRows]);\n\n  const handleVerticalScroll = useCallback(\n    (e: UIEvent<HTMLElement>) => {\n      const viewport = viewportMeasures.current;\n      // TODO: check `as` cast\n      const scrollTop = (e.target as HTMLElement).scrollTop;\n      if (scrollTop !== viewport.scrollPos) {\n        viewport.scrollPos = scrollTop;\n        const firstRow = Math.floor(scrollTop / viewport.rowHeight);\n        if (firstRow !== viewport.firstVisibleRow) {\n          viewport.firstVisibleRow = firstRow;\n          const from = firstRow;\n          const to = firstRow + viewport.rowCount;\n          updateRows(from, to);\n        }\n      }\n    },\n    [updateRows]\n  );\n\n  return {\n    rows,\n    contentHeight: viewportMeasures.current.contentHeight,\n    onVerticalScroll: handleVerticalScroll,\n  };\n};\n"],"names":[],"mappings":"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"}