{"version":3,"file":"useListHeight.js","sources":["../src/list/useListHeight.ts"],"sourcesContent":["import { useMemo, useState, useCallback, RefObject } from \"react\";\nimport { useResizeObserver, HeightOnly, ResizeHandler } from \"../responsive\";\n\nexport interface ListHeightHookProps {\n  borderless?: boolean;\n  displayedItemCount: number;\n  getItemHeight?: (index: number) => number;\n  height?: number | string;\n  itemCount: number;\n  itemGapSize: number;\n  itemHeight?: number | string;\n  rowHeightRef: RefObject<HTMLElement | null>;\n}\n\nexport interface HeightHookResult {\n  preferredHeight: number | undefined;\n}\n\nexport const useListHeight = ({\n  borderless,\n  displayedItemCount,\n  getItemHeight,\n  // TODO no need to incur the cost of a resizeObserver if height is explicit\n  height,\n  itemCount,\n  itemGapSize,\n  itemHeight: itemHeightProp,\n  rowHeightRef,\n}: ListHeightHookProps): HeightHookResult => {\n  // TODO default by density\n  const [measuredItemHeight, setMeasuredItemHeight] = useState<\n    number | undefined\n  >(36);\n\n  const preferredHeight = useMemo(() => {\n    let result = borderless ? 0 : 2;\n    const itemHeight = itemHeightProp ?? measuredItemHeight;\n\n    // if there are 0 items we render with the preferred count\n    const preferredItemCount =\n      Math.min(displayedItemCount, itemCount) || displayedItemCount;\n\n    if (typeof getItemHeight === \"function\") {\n      result +=\n        Array(preferredItemCount)\n          .fill(0)\n          .reduce<number>(\n            (total, _, index) => total + getItemHeight(index) + itemGapSize,\n            0\n          ) -\n        // We don't want gap after the last item\n        itemGapSize;\n    } else {\n      result +=\n        preferredItemCount * Number(itemHeight) +\n        (preferredItemCount - 1) * itemGapSize;\n    }\n\n    // list height will be undefined if the item height can not be\n    // converted to a number, for example rem or a percentage string\n    return isNaN(result) ? undefined : result;\n  }, [\n    borderless,\n    displayedItemCount,\n    getItemHeight,\n    itemCount,\n    itemGapSize,\n    itemHeightProp,\n    measuredItemHeight,\n  ]);\n\n  const handleRowHeight: ResizeHandler = useCallback(({ height }) => {\n    setMeasuredItemHeight(height);\n  }, []);\n\n  useResizeObserver(rowHeightRef, HeightOnly, handleRowHeight, true);\n\n  return {\n    preferredHeight,\n  };\n};\n"],"names":["height"],"mappings":";;;;;AAkBO,MAAM,gBAAgB,CAAC;AAAA,EAC5B,UAAA;AAAA,EACA,kBAAA;AAAA,EACA,aAAA;AAAA,EAEA,MAAA;AAAA,EACA,SAAA;AAAA,EACA,WAAA;AAAA,EACA,UAAY,EAAA,cAAA;AAAA,EACZ,YAAA;AACF,CAA6C,KAAA;AAE3C,EAAA,MAAM,CAAC,kBAAA,EAAoB,qBAAqB,CAAA,GAAI,SAElD,EAAE,CAAA,CAAA;AAEJ,EAAM,MAAA,eAAA,GAAkB,QAAQ,MAAM;AACpC,IAAI,IAAA,MAAA,GAAS,aAAa,CAAI,GAAA,CAAA,CAAA;AAC9B,IAAA,MAAM,aAAa,cAAkB,IAAA,IAAA,GAAA,cAAA,GAAA,kBAAA,CAAA;AAGrC,IAAA,MAAM,kBACJ,GAAA,IAAA,CAAK,GAAI,CAAA,kBAAA,EAAoB,SAAS,CAAK,IAAA,kBAAA,CAAA;AAE7C,IAAI,IAAA,OAAO,kBAAkB,UAAY,EAAA;AACvC,MAAA,MAAA,IACE,KAAM,CAAA,kBAAkB,CACrB,CAAA,IAAA,CAAK,CAAC,CACN,CAAA,MAAA;AAAA,QACC,CAAC,KAAO,EAAA,CAAA,EAAG,UAAU,KAAQ,GAAA,aAAA,CAAc,KAAK,CAAI,GAAA,WAAA;AAAA,QACpD,CAAA;AAAA,OAGJ,GAAA,WAAA,CAAA;AAAA,KACG,MAAA;AACL,MAAA,MAAA,IACE,kBAAqB,GAAA,MAAA,CAAO,UAAU,CAAA,GAAA,CACrC,qBAAqB,CAAK,IAAA,WAAA,CAAA;AAAA,KAC/B;AAIA,IAAO,OAAA,KAAA,CAAM,MAAM,CAAA,GAAI,KAAY,CAAA,GAAA,MAAA,CAAA;AAAA,GAClC,EAAA;AAAA,IACD,UAAA;AAAA,IACA,kBAAA;AAAA,IACA,aAAA;AAAA,IACA,SAAA;AAAA,IACA,WAAA;AAAA,IACA,cAAA;AAAA,IACA,kBAAA;AAAA,GACD,CAAA,CAAA;AAED,EAAA,MAAM,kBAAiC,WAAY,CAAA,CAAC,EAAE,MAAA,EAAAA,SAAa,KAAA;AACjE,IAAA,qBAAA,CAAsBA,OAAM,CAAA,CAAA;AAAA,GAC9B,EAAG,EAAE,CAAA,CAAA;AAEL,EAAkB,iBAAA,CAAA,YAAA,EAAc,UAAY,EAAA,eAAA,EAAiB,IAAI,CAAA,CAAA;AAEjE,EAAO,OAAA;AAAA,IACL,eAAA;AAAA,GACF,CAAA;AACF;;;;"}