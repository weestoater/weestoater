import { jsxs, jsx, Fragment } from 'react/jsx-runtime';
import { forwardRef, useRef, createElement, isValidElement, cloneElement } from 'react';
import { makePrefixer, useIdMemo, useForkRef } from '@salt-ds/core';
import { clsx } from 'clsx';
import '../common-hooks/collectionProvider.js';
import { itemToString } from '../common-hooks/itemToString.js';
import '../common-hooks/keyUtils.js';
import { useCollectionItems } from '../common-hooks/useCollectionItems.js';
import { useImperativeScrollingAPI } from '../common-hooks/useImperativeScrollingAPI.js';
import { LIST_FOCUS_VISIBLE } from '../common-hooks/useKeyboardNavigation.js';
import '../responsive/useResizeObserver.js';
import { isSelected } from '../common-hooks/utils/isSelected.js';
import { ListItemProxy, ListItem } from './ListItem.js';
import { useList } from './useList.js';
import { useListHeight } from './useListHeight.js';
import { useWindow } from '@salt-ds/window';
import { useComponentCssInjection } from '@salt-ds/styles';
import css_248z from './List.css.js';

const defaultEmptyMessage = "No data to display";
const withBaseName = makePrefixer("saltList");
const List = forwardRef(function List2({
  ListItem: ListItem$1 = ListItem,
  ListPlaceholder,
  borderless,
  children,
  className,
  collapsibleHeaders = false,
  defaultHighlightedIndex,
  defaultSelected,
  disabled: listDisabled = false,
  disableFocus = false,
  disableTypeToSelect,
  displayedItemCount = 10,
  emptyMessage,
  focusVisible: focusVisibleProp,
  getItemHeight: getItemHeightProp,
  getItemId,
  height,
  highlightedIndex: highlightedIndexProp,
  id: idProp,
  itemGapSize = 0,
  itemHeight: itemHeightProp,
  itemTextHighlightPattern,
  itemToString: itemToString$1 = itemToString,
  listHandlers: listHandlersProp,
  maxHeight,
  maxWidth,
  minHeight,
  minWidth,
  onSelect,
  onSelectionChange,
  onHighlight,
  restoreLastFocus,
  selected: selectedProp,
  selectionStrategy,
  checkable = selectionStrategy === "multiple",
  scrollingApiRef,
  selectionKeys,
  showEmptyMessage = false,
  source,
  style: styleProp,
  stickyHeaders,
  tabToSelect,
  width,
  ...htmlAttributes
}, forwardedRef) {
  const targetWindow = useWindow();
  useComponentCssInjection({
    testId: "salt-list",
    css: css_248z,
    window: targetWindow
  });
  const id = useIdMemo(idProp);
  const rootRef = useRef(null);
  const contentRef = useRef(null);
  const rowHeightProxyRef = useRef(null);
  const collectionHook = useCollectionItems({
    id,
    label: "List",
    source,
    children,
    options: {
      collapsibleHeaders,
      getItemId,
      itemToString: itemToString$1
    }
  });
  const { preferredHeight } = useListHeight({
    borderless,
    displayedItemCount,
    getItemHeight: getItemHeightProp,
    height,
    itemCount: collectionHook.data.length,
    itemGapSize,
    itemHeight: itemHeightProp,
    rowHeightRef: rowHeightProxyRef
  });
  const {
    focusVisible,
    highlightedIndex,
    listControlProps,
    listHandlers,
    listItemHeaderHandlers,
    scrollIntoView,
    selected
  } = useList({
    collapsibleHeaders,
    collectionHook,
    containerRef: rootRef,
    contentRef,
    defaultHighlightedIndex,
    defaultSelected: collectionHook.itemToCollectionItem(defaultSelected),
    disabled: listDisabled,
    disableTypeToSelect,
    highlightedIndex: highlightedIndexProp,
    label: id,
    listHandlers: listHandlersProp,
    onSelect,
    onSelectionChange,
    onHighlight,
    restoreLastFocus,
    selected: collectionHook.itemToCollectionItem(selectedProp),
    selectionStrategy,
    selectionKeys,
    stickyHeaders,
    tabToSelect
  });
  useImperativeScrollingAPI({
    collectionHook,
    forwardedRef: scrollingApiRef,
    scrollableRef: rootRef,
    scrollIntoView
  });
  const appliedFocusVisible = focusVisibleProp != null ? focusVisibleProp : focusVisible;
  const createHeader = function createHeader2(idx, headerId, title, expanded) {
    const header = /* @__PURE__ */ createElement(ListItem$1, {
      ...listItemHeaderHandlers,
      className: clsx("saltListItemHeader", {
        focusVisible: collapsibleHeaders && appliedFocusVisible === idx.value
      }),
      "aria-expanded": expanded,
      "data-idx": collapsibleHeaders ? idx.value : void 0,
      "data-highlighted": idx.value === highlightedIndex || void 0,
      "data-sticky": stickyHeaders,
      "data-selectable": false,
      id: headerId,
      key: `header-${idx.value}`,
      label: title
    });
    idx.value += 1;
    return header;
  };
  const getItemHeight = getItemHeightProp === void 0 ? () => itemHeightProp : getItemHeightProp;
  function renderCollectionItem(list, item, idx) {
    var _a;
    const { disabled, value, id: itemId, label } = item;
    const isChildItem = isValidElement(value);
    const listItemProps = {
      className: clsx({
        saltHighlighted: idx.value === highlightedIndex,
        saltFocusVisible: appliedFocusVisible === idx.value
      }),
      disabled: disabled || listDisabled,
      id: itemId,
      item: isChildItem ? void 0 : (_a = item == null ? void 0 : item.value) != null ? _a : void 0,
      itemHeight: getItemHeight(idx.value),
      itemTextHighlightPattern,
      key: itemId,
      "data-idx": idx.value,
      label,
      role: "option",
      selected: isSelected(selected, item),
      showCheckbox: checkable
    };
    list.push(
      isChildItem ? cloneElement(value, listItemProps) : /* @__PURE__ */ jsx(ListItem$1, {
        ...listItemProps
      })
    );
    idx.value += 1;
  }
  const addGroup = function addGroup2(list, items, idx) {
    const { count = 0, id: id2, expanded, label = "" } = items[idx.value];
    const header = createHeader(idx, id2, label, expanded);
    const childItems = expanded !== false ? [header].concat(
      renderCollectionItems(items, idx, idx.value + count) || []
    ) : header;
    list.push(
      /* @__PURE__ */ jsx("div", {
        role: "group",
        children: childItems
      }, id2)
    );
  };
  const renderCollectionItems = (items, idx = { value: 0 }, end = items.length) => {
    const listItems = [];
    while (idx.value < end) {
      const item = items[idx.value];
      if (item.header) {
        listItems.push(
          createHeader(idx, item.id, item.label, item.expanded === false)
        );
      } else if (item.childNodes) {
        addGroup(listItems, items, idx);
      } else {
        renderCollectionItem(listItems, item, idx);
      }
    }
    return listItems;
  };
  function renderEmpty() {
    if (emptyMessage || showEmptyMessage) {
      return /* @__PURE__ */ jsx("span", {
        className: withBaseName("empty-message"),
        children: emptyMessage != null ? emptyMessage : defaultEmptyMessage
      });
    } else {
      return null;
    }
  }
  const renderContent = () => {
    if (collectionHook.data.length) {
      return renderCollectionItems(collectionHook.data);
    } else {
      renderEmpty();
    }
  };
  const contentHeight = "auto";
  const sizeStyles = {
    "--list-item-gap": itemGapSize ? `${itemGapSize}px` : void 0,
    minWidth,
    minHeight,
    width: width != null ? width : "100%",
    height: height != null ? height : "100%",
    maxWidth: maxWidth != null ? maxWidth : width,
    maxHeight: maxHeight != null ? maxHeight : preferredHeight
  };
  return /* @__PURE__ */ jsxs("div", {
    "aria-multiselectable": selectionStrategy === "multiple" || selectionStrategy === "extended" || selectionStrategy === "extended-multi-range" || void 0,
    ...htmlAttributes,
    ...listHandlers,
    ...listControlProps,
    className: clsx(withBaseName(), className, {
      [withBaseName("borderless")]: borderless,
      saltDisabled: listDisabled,
      [withBaseName("collapsible")]: collapsibleHeaders,
      saltFocusVisible: highlightedIndex === LIST_FOCUS_VISIBLE
    }),
    id: `${id}`,
    ref: useForkRef(rootRef, forwardedRef),
    role: "listbox",
    style: { ...styleProp, ...sizeStyles },
    tabIndex: listDisabled || disableFocus ? void 0 : 0,
    children: [
      /* @__PURE__ */ jsx(ListItemProxy, {
        ref: rowHeightProxyRef
      }),
      collectionHook.data.length === 0 && ListPlaceholder !== void 0 ? /* @__PURE__ */ jsx(Fragment, {
        children: /* @__PURE__ */ jsx(ListPlaceholder, {})
      }) : /* @__PURE__ */ jsx("div", {
        className: withBaseName("scrollingContentContainer"),
        ref: contentRef,
        style: { height: contentHeight },
        children: renderContent()
      })
    ]
  });
});

export { List };
//# sourceMappingURL=List.js.map
