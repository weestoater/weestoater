import { jsx, jsxs } from 'react/jsx-runtime';
import { makePrefixer, useIdMemo, useForkRef } from '@salt-ds/core';
import { clsx } from 'clsx';
import { forwardRef, useRef } from 'react';
import '../common-hooks/collectionProvider.js';
import '../common-hooks/keyUtils.js';
import { useCollectionItems } from '../common-hooks/useCollectionItems.js';
import { useImperativeScrollingAPI } from '../common-hooks/useImperativeScrollingAPI.js';
import '../responsive/useResizeObserver.js';
import { isSelected } from '../common-hooks/utils/isSelected.js';
import { useListHeight } from './useListHeight.js';
import { ListItemProxy, ListItem } from './ListItem.js';
import { useList } from './useList.js';
import { useVirtualization } from './useVirtualization.js';
import { useWindow } from '@salt-ds/window';
import { useComponentCssInjection } from '@salt-ds/styles';
import css_248z from './List.css.js';

const defaultEmptyMessage = "No data to display";
const withBaseName = makePrefixer("saltList");
const VirtualizedList = forwardRef(function List({
  borderless,
  children,
  className,
  collapsibleHeaders = false,
  defaultHighlightedIndex: defaultHighlightedIdx,
  defaultSelected,
  disabled: listDisabled = false,
  disableFocus = false,
  disableTypeToSelect,
  displayedItemCount = 10,
  emptyMessage,
  getItemHeight,
  getItemId,
  height,
  highlightedIndex: highlightedIdxProp,
  id: idProp,
  itemGapSize = 0,
  itemHeight: itemHeightProp,
  itemTextHighlightPattern,
  itemToString,
  maxHeight,
  maxWidth,
  minHeight,
  minWidth,
  onSelect,
  onSelectionChange,
  onHighlight,
  restoreLastFocus,
  selected: selectedProp,
  selectionStrategy,
  scrollingApiRef,
  selectionKeys,
  showEmptyMessage = false,
  source,
  style: styleProp,
  stickyHeaders,
  tabToSelect,
  width,
  ...htmlAttributes
}, forwardedRef) {
  const targetWindow = useWindow();
  useComponentCssInjection({
    testId: "salt-list",
    css: css_248z,
    window: targetWindow
  });
  const id = useIdMemo(idProp);
  const rootRef = useRef(null);
  const rowHeightProxyRef = useRef(null);
  const collectionHook = useCollectionItems({
    id,
    label: "List",
    source,
    children,
    options: {
      collapsibleHeaders,
      getItemId,
      itemToString
    }
  });
  const { preferredHeight } = useListHeight({
    borderless,
    displayedItemCount,
    height,
    itemCount: collectionHook.data.length,
    itemGapSize,
    itemHeight: itemHeightProp,
    rowHeightRef: rowHeightProxyRef
  });
  const {
    focusVisible,
    highlightedIndex,
    listControlProps,
    listHandlers,
    scrollIntoView,
    selected
  } = useList({
    collapsibleHeaders,
    collectionHook,
    containerRef: rootRef,
    defaultHighlightedIndex: defaultHighlightedIdx,
    defaultSelected: collectionHook.itemToCollectionItem(defaultSelected),
    disabled: listDisabled,
    disableTypeToSelect,
    highlightedIndex: highlightedIdxProp,
    label: id,
    onSelect,
    onSelectionChange,
    onHighlight,
    restoreLastFocus,
    selected: collectionHook.itemToCollectionItem(selectedProp),
    selectionStrategy,
    selectionKeys,
    stickyHeaders,
    tabToSelect
  });
  const {
    rows: data,
    contentHeight,
    onVerticalScroll: onScroll
  } = useVirtualization({
    viewportRef: rootRef,
    data: collectionHook.data,
    itemGapSize
  });
  useImperativeScrollingAPI({
    collectionHook,
    forwardedRef: scrollingApiRef,
    scrollableRef: rootRef,
    scrollIntoView
  });
  function addItem(list, row, idx) {
    const [key, offset, pos, item] = row;
    const index = pos - 1;
    list.push(
      /* @__PURE__ */ jsx(ListItem, {
        "aria-setsize": collectionHook.data.length,
        "aria-posinset": pos,
        className: clsx(className, {
          saltHighlighted: index === highlightedIndex,
          saltFocusVisible: focusVisible === index
        }),
        "data-idx": index,
        "data-offset": offset,
        role: "option",
        selected: isSelected(selected, item),
        id: item.id,
        style: {
          transform: `translate3d(0px, ${offset}px, 0px)`
        },
        children: item.label
      }, key)
    );
    idx.value += 1;
  }
  function renderItems(data2, idx = { value: 0 }, end = data2.length) {
    const listItems = [];
    while (idx.value < end) {
      const item = data2[idx.value];
      addItem(listItems, item, idx);
    }
    return listItems;
  }
  function renderEmpty() {
    if (emptyMessage || showEmptyMessage) {
      return /* @__PURE__ */ jsx("span", {
        className: withBaseName("empty-message"),
        children: emptyMessage != null ? emptyMessage : defaultEmptyMessage
      });
    } else {
      return null;
    }
  }
  const renderContent = () => {
    if (data.length) {
      return renderItems(data);
    } else {
      renderEmpty();
    }
  };
  const sizeStyles = {
    "--list-item-gap": itemGapSize ? `${itemGapSize}px` : void 0,
    minWidth,
    minHeight,
    width: width != null ? width : "100%",
    height: height != null ? height : "100%",
    maxWidth: maxWidth != null ? maxWidth : width,
    maxHeight: maxHeight != null ? maxHeight : preferredHeight
  };
  return /* @__PURE__ */ jsx("div", {
    ...htmlAttributes,
    ...listHandlers,
    ...listControlProps,
    className: clsx(withBaseName(), className, withBaseName("virtualized")),
    id: `${id}`,
    ref: useForkRef(rootRef, forwardedRef),
    role: "listbox",
    onScroll,
    style: { ...styleProp, ...sizeStyles },
    tabIndex: listDisabled || disableFocus ? void 0 : 0,
    children: /* @__PURE__ */ jsxs("div", {
      className: withBaseName("scrollingContentContainer"),
      style: { height: contentHeight },
      children: [
        /* @__PURE__ */ jsx(ListItemProxy, {
          ref: rowHeightProxyRef
        }),
        renderContent()
      ]
    })
  });
});

export { VirtualizedList };
//# sourceMappingURL=VirtualizedList.js.map
