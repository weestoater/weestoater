import { jsx } from 'react/jsx-runtime';
import { forwardRef, useState, useEffect } from 'react';
import { clsx } from 'clsx';
import { makePrefixer, usePrevious, Scrim } from '@salt-ds/core';
import { useIsViewportLargerThanBreakpoint } from '../utils/useIsViewportLargerThanBreakpoint.js';
import { useWindow } from '@salt-ds/window';
import { useComponentCssInjection } from '@salt-ds/styles';
import css_248z from './LayerLayout.css.js';

const LAYER_POSITIONS = [
  "center",
  "left",
  "top",
  "right",
  "bottom"
];
const withBaseName = makePrefixer("saltLayerLayout");
const ariaAttributes = { role: "dialog", "aria-modal": true };
const LayerLayout = forwardRef(
  function LayerLayout2(props, ref) {
    const {
      children,
      className,
      disableScrim = false,
      position = "center",
      fullScreenAtBreakpoint = "sm",
      disableAnimations = false,
      scrimProps,
      isOpen = true,
      ...rest
    } = props;
    const targetWindow = useWindow();
    useComponentCssInjection({
      testId: "salt-layer-layout",
      css: css_248z,
      window: targetWindow
    });
    const previousDisableAnimationsProp = usePrevious(
      disableAnimations,
      [disableAnimations],
      false
    );
    const [showComponent, setShowComponent] = useState(false);
    const [isAnimating, setIsAnimating] = useState(false);
    useEffect(() => {
      if (!isOpen && disableAnimations || !isOpen && !isAnimating) {
        setShowComponent(false);
      }
      if (isOpen && !showComponent) {
        setShowComponent(true);
      }
    }, [isOpen, showComponent, disableAnimations, isAnimating]);
    const fullScreen = useIsViewportLargerThanBreakpoint(
      fullScreenAtBreakpoint
    );
    const anchored = position !== "center" && !fullScreen;
    const enterAnimation = !disableAnimations && isOpen && !previousDisableAnimationsProp;
    const exitAnimation = !disableAnimations && !isOpen;
    const layerLayout = showComponent ? /* @__PURE__ */ jsx("div", {
      ref,
      className: clsx(withBaseName(), className, {
        [withBaseName("anchor")]: anchored,
        [withBaseName("fullScreen")]: fullScreen,
        [withBaseName(position)]: !fullScreen,
        [withBaseName("enter-animation")]: enterAnimation,
        [withBaseName("exit-animation")]: exitAnimation
      }),
      onAnimationStart: () => setIsAnimating(true),
      onAnimationEnd: () => {
        if (!isOpen && showComponent) {
          setShowComponent(false);
        }
      },
      ...disableScrim && ariaAttributes,
      ...rest,
      children
    }) : null;
    return disableScrim ? layerLayout : /* @__PURE__ */ jsx(Scrim, {
      open: showComponent,
      className: clsx({
        [withBaseName("enter-animation")]: enterAnimation,
        [withBaseName("exit-animation")]: exitAnimation
      }),
      ...scrimProps,
      children: layerLayout
    });
  }
);

export { LAYER_POSITIONS, LayerLayout };
//# sourceMappingURL=LayerLayout.js.map
