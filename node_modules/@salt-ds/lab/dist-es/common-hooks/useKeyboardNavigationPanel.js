import { useControlled } from '@salt-ds/core';
import { useCallback, useRef, useMemo } from 'react';

function nextItemIdx(count, direction, idx, cycleFocus = false) {
  if (direction === "BWD") {
    if (idx > 0) {
      return idx - 1;
    } else {
      return cycleFocus ? count - 1 : idx;
    }
  } else {
    if (idx === null) {
      return 0;
    } else if (idx === count - 1) {
      return cycleFocus ? 0 : idx;
    } else {
      return idx + 1;
    }
  }
}
const isLeaf = (item) => !item.header && !item.childNodes;
const isFocusable = (item) => (isLeaf(item) || item.expanded !== void 0) && item.focusable !== false;
const useKeyboardNavigationPanel = ({
  cycleFocus = false,
  defaultHighlightedIndex: defaultHighlightedIdx = -1,
  focusOnHighlight = false,
  highlightedIndex: highlightedIdxProp,
  indexPositions,
  onHighlight,
  onKeyboardNavigation
}) => {
  const [highlightedIdx, setHighlightedIdx, isControlledHighlighting] = useControlled({
    controlled: highlightedIdxProp,
    default: defaultHighlightedIdx,
    name: "UseKeyboardNavigation"
  });
  const setHighlightedIndex = useCallback(
    (idx) => {
      onHighlight == null ? void 0 : onHighlight(idx);
      setHighlightedIdx(idx);
      if (focusOnHighlight && idx !== -1) {
        const { id } = indexPositions[idx];
        const formField = document.getElementById(id);
        const targetEl = formField == null ? void 0 : formField.querySelector("[tabindex]");
        setIgnoreFocus(true);
        targetEl == null ? void 0 : targetEl.focus();
      }
    },
    [focusOnHighlight, indexPositions, onHighlight, setHighlightedIdx]
  );
  const nextFocusableItemIdx = useCallback(
    (direction = "FWD", idx = direction === "FWD" ? -1 : indexPositions.length) => {
      let nextIdx = nextItemIdx(
        indexPositions.length,
        direction,
        idx,
        cycleFocus
      );
      while ((direction === "FWD" && nextIdx < indexPositions.length || direction === "BWD" && nextIdx > 0) && !isFocusable(indexPositions[nextIdx])) {
        nextIdx = nextItemIdx(
          indexPositions.length,
          direction,
          nextIdx,
          cycleFocus
        );
      }
      return nextIdx;
    },
    [cycleFocus, indexPositions]
  );
  const keyboardNavigation = useRef(true);
  const ignoreFocus = useRef(false);
  const setIgnoreFocus = (value) => ignoreFocus.current = value;
  const handleFocus = useCallback(() => {
    if (ignoreFocus.current) {
      ignoreFocus.current = false;
    } else {
      setHighlightedIndex(nextFocusableItemIdx());
    }
  }, [nextFocusableItemIdx, setHighlightedIndex]);
  const navigateChildItems = useCallback(
    (e) => {
      const direction = e.shiftKey ? "BWD" : "FWD";
      const nextIdx = nextFocusableItemIdx(direction, highlightedIdx);
      console.log(`nextFocusableItem from ${highlightedIdx} is ${nextIdx}`);
      if (nextIdx !== highlightedIdx) {
        setHighlightedIndex(nextIdx);
        onKeyboardNavigation == null ? void 0 : onKeyboardNavigation(e, nextIdx);
      }
    },
    [
      highlightedIdx,
      nextFocusableItemIdx,
      onKeyboardNavigation,
      setHighlightedIndex
    ]
  );
  const handleKeyDown = useCallback(
    (evt) => {
      if (indexPositions.length > 0 && evt.key === "Tab") {
        evt.preventDefault();
        evt.stopPropagation();
        keyboardNavigation.current = true;
        navigateChildItems(evt);
      }
    },
    [indexPositions, navigateChildItems]
  );
  const listProps = useMemo(
    () => ({
      onBlur: () => {
      },
      onFocus: handleFocus,
      onKeyDown: handleKeyDown,
      onMouseDownCapture: () => {
        keyboardNavigation.current = false;
        setIgnoreFocus(true);
      },
      onMouseMove: () => {
        if (keyboardNavigation.current) {
          keyboardNavigation.current = false;
        }
      },
      onMouseLeave: () => {
        keyboardNavigation.current = true;
        setIgnoreFocus(false);
        setHighlightedIndex(-1);
      }
    }),
    [handleFocus, handleKeyDown, setHighlightedIndex]
  );
  return {
    focusVisible: keyboardNavigation.current ? highlightedIdx : -1,
    controlledHighlighting: isControlledHighlighting,
    highlightedIndex: highlightedIdx,
    setHighlightedIndex,
    keyboardNavigation,
    listProps,
    setIgnoreFocus
  };
};

export { useKeyboardNavigationPanel };
//# sourceMappingURL=useKeyboardNavigationPanel.js.map
