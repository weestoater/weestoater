{"version":3,"file":"useKeyboardNavigationPanel.js","sources":["../src/common-hooks/useKeyboardNavigationPanel.ts"],"sourcesContent":["import { useControlled } from \"@salt-ds/core\";\nimport { KeyboardEvent, useCallback, useMemo, useRef } from \"react\";\nimport { Tab } from \"./keyUtils\";\nimport { CollectionItem } from \"./collectionTypes\";\nimport { NavigationProps, NavigationHookResult } from \"./navigationTypes\";\n\ntype NavigationDirection = \"FWD\" | \"BWD\";\n\nfunction nextItemIdx(\n  count: number,\n  direction: NavigationDirection,\n  idx: number,\n  cycleFocus = false\n) {\n  if (direction === \"BWD\") {\n    if (idx > 0) {\n      return idx - 1;\n    } else {\n      return cycleFocus ? count - 1 : idx;\n    }\n  } else {\n    if (idx === null) {\n      return 0;\n    } else if (idx === count - 1) {\n      return cycleFocus ? 0 : idx;\n    } else {\n      return idx + 1;\n    }\n  }\n}\n\nconst isLeaf = <Item>(item: CollectionItem<Item>): boolean =>\n  !item.header && !item.childNodes;\nconst isFocusable = <Item>(item: CollectionItem<Item>) =>\n  (isLeaf(item) || item.expanded !== undefined) && item.focusable !== false;\n\n// we need a way to set highlightedIdx when selection changes\nexport const useKeyboardNavigationPanel = ({\n  cycleFocus = false,\n  defaultHighlightedIndex: defaultHighlightedIdx = -1,\n  focusOnHighlight = false,\n  highlightedIndex: highlightedIdxProp,\n  indexPositions,\n  onHighlight,\n  onKeyboardNavigation,\n}: NavigationProps): NavigationHookResult => {\n  const [highlightedIdx, setHighlightedIdx, isControlledHighlighting] =\n    useControlled({\n      controlled: highlightedIdxProp,\n      default: defaultHighlightedIdx,\n      name: \"UseKeyboardNavigation\",\n    });\n\n  const setHighlightedIndex = useCallback(\n    (idx: number) => {\n      onHighlight?.(idx);\n      setHighlightedIdx(idx);\n      if (focusOnHighlight && idx !== -1) {\n        const { id } = indexPositions[idx];\n        const formField = document.getElementById(id);\n        const targetEl = formField?.querySelector(\"[tabindex]\") as HTMLElement;\n        setIgnoreFocus(true);\n        targetEl?.focus();\n      }\n    },\n    [focusOnHighlight, indexPositions, onHighlight, setHighlightedIdx]\n  );\n\n  const nextFocusableItemIdx = useCallback(\n    (\n      direction: NavigationDirection = \"FWD\",\n      idx = direction === \"FWD\" ? -1 : indexPositions.length\n    ) => {\n      let nextIdx = nextItemIdx(\n        indexPositions.length,\n        direction,\n        idx,\n        cycleFocus\n      );\n      while (\n        ((direction === \"FWD\" && nextIdx < indexPositions.length) ||\n          (direction === \"BWD\" && nextIdx > 0)) &&\n        !isFocusable(indexPositions[nextIdx])\n      ) {\n        nextIdx = nextItemIdx(\n          indexPositions.length,\n          direction,\n          nextIdx,\n          cycleFocus\n        );\n      }\n      return nextIdx;\n    },\n    [cycleFocus, indexPositions]\n  );\n\n  // does this belong here or should it be a method passed in?\n  const keyboardNavigation = useRef(true);\n  const ignoreFocus = useRef<boolean>(false);\n  const setIgnoreFocus = (value: boolean) => (ignoreFocus.current = value);\n\n  const handleFocus = useCallback(() => {\n    if (ignoreFocus.current) {\n      ignoreFocus.current = false;\n    } else {\n      setHighlightedIndex(nextFocusableItemIdx());\n    }\n  }, [nextFocusableItemIdx, setHighlightedIndex]);\n\n  const navigateChildItems = useCallback(\n    (e: React.KeyboardEvent) => {\n      const direction: NavigationDirection = e.shiftKey ? \"BWD\" : \"FWD\";\n      const nextIdx = nextFocusableItemIdx(direction, highlightedIdx);\n      console.log(`nextFocusableItem from ${highlightedIdx} is ${nextIdx}`);\n      if (nextIdx !== highlightedIdx) {\n        setHighlightedIndex(nextIdx);\n        // What exactly is the point of this ?\n        onKeyboardNavigation?.(e, nextIdx);\n      }\n    },\n    [\n      highlightedIdx,\n      nextFocusableItemIdx,\n      onKeyboardNavigation,\n      setHighlightedIndex,\n    ]\n  );\n\n  const handleKeyDown = useCallback(\n    (evt: KeyboardEvent) => {\n      if (indexPositions.length > 0 && evt.key === \"Tab\") {\n        evt.preventDefault();\n        evt.stopPropagation();\n        keyboardNavigation.current = true;\n        navigateChildItems(evt);\n      }\n    },\n    [indexPositions, navigateChildItems]\n  );\n\n  const listProps = useMemo(\n    () => ({\n      onBlur: () => {\n        // This sets highlightedIdx to -1 before a click on ListItem can effect selection\n        // maybe in a timeout\n        // setHighlightedIndex(-1);\n      },\n      onFocus: handleFocus,\n      // Does this have to be capture ? We'll have to change the types\n      // onKeyDownCapture: handleKeyDown,\n      onKeyDown: handleKeyDown,\n      onMouseDownCapture: () => {\n        keyboardNavigation.current = false;\n        setIgnoreFocus(true);\n      },\n\n      // onMouseEnter would seem less expensive but it misses some cases\n      onMouseMove: () => {\n        if (keyboardNavigation.current) {\n          keyboardNavigation.current = false;\n        }\n      },\n      onMouseLeave: () => {\n        keyboardNavigation.current = true;\n        setIgnoreFocus(false);\n        setHighlightedIndex(-1);\n      },\n    }),\n    [handleFocus, handleKeyDown, setHighlightedIndex]\n  );\n\n  return {\n    focusVisible: keyboardNavigation.current ? highlightedIdx : -1,\n    controlledHighlighting: isControlledHighlighting,\n    highlightedIndex: highlightedIdx,\n    setHighlightedIndex,\n    keyboardNavigation,\n    listProps,\n    setIgnoreFocus,\n  };\n};\n"],"names":[],"mappings":"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"}