import { useMemo, useImperativeHandle } from 'react';

const noScrolling = {
  scrollToIndex: (itemIndex) => void 0,
  scrollToItem: (item) => void 0,
  scrollTo: (scrollOffset) => void 0
};
const useImperativeScrollingAPI = ({
  collectionHook,
  forwardedRef,
  scrollableRef,
  scrollIntoView
}) => {
  const scrollHandles = useMemo(
    () => ({
      scrollToIndex: (itemIndex) => {
        const collectionItem = collectionHook.data[itemIndex];
        if (collectionItem) {
          scrollIntoView == null ? void 0 : scrollIntoView(collectionItem);
        }
      },
      scrollToItem: (item) => {
        const collectionItem = collectionHook.toCollectionItem(item);
        if (collectionItem) {
          scrollIntoView == null ? void 0 : scrollIntoView(collectionItem);
        }
      },
      scrollTo: (scrollOffset) => {
        if (scrollableRef == null ? void 0 : scrollableRef.current) {
          scrollableRef.current.scrollTop = scrollOffset;
        }
      }
    }),
    [collectionHook.data, collectionHook.toCollectionItem, scrollIntoView]
  );
  useImperativeHandle(
    forwardedRef,
    () => {
      if (scrollableRef.current) {
        return scrollHandles;
      } else {
        return noScrolling;
      }
    },
    [scrollHandles]
  );
};

export { useImperativeScrollingAPI };
//# sourceMappingURL=useImperativeScrollingAPI.js.map
