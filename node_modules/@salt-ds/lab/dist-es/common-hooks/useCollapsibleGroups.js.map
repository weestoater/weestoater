{"version":3,"file":"useCollapsibleGroups.js","sources":["../src/common-hooks/useCollapsibleGroups.ts"],"sourcesContent":["import { MouseEvent, useCallback } from \"react\";\nimport { ArrowLeft, ArrowRight, Enter } from \"./keyUtils\";\nimport { ListHandlers } from \"./selectionTypes\";\nimport { CollectionHookResult, CollectionItem } from \"./collectionTypes\";\n\nconst NO_HANDLERS = {};\nconst canToggleItem = (item: CollectionItem<unknown>) =>\n  Array.isArray(item.childNodes);\n// TODO how do we determine this and where does this function belong = in the collectionHook ?\nconst canSelectItem = (item: CollectionItem<unknown>) => true;\n\nconst toggleIconClicked = (el: HTMLElement) => {\n  const closestToggle = el.closest(\n    \"[data-toggle],[aria-expanded]\"\n  ) as HTMLElement;\n  return closestToggle.dataset.toggle === \"true\";\n};\n\ninterface CollapsibleHookProps<Item> {\n  collapsibleHeaders?: boolean;\n  collectionHook: CollectionHookResult<Item>;\n  highlightedIdx: number;\n  onToggle?: (node: Item) => void;\n}\n\ninterface CollapsibleHookResult<Item> {\n  onClick?: ListHandlers[\"onClick\"];\n  onKeyDown?: ListHandlers[\"onKeyDown\"];\n}\n\nexport const useCollapsibleGroups = <Item>({\n  collapsibleHeaders,\n  collectionHook,\n  highlightedIdx,\n  onToggle,\n}: CollapsibleHookProps<Item>): CollapsibleHookResult<Item> => {\n  const handleKeyDown = useCallback(\n    (e: KeyboardEvent) => {\n      if (e.key === ArrowRight || e.key === Enter) {\n        const item = collectionHook.data[highlightedIdx];\n        if (item) {\n          if (item.expanded === false && item.value) {\n            e.preventDefault();\n            collectionHook.expandGroupItem(item);\n            onToggle?.(item.value);\n          }\n        }\n      }\n\n      if (e.key === ArrowLeft || e.key === Enter) {\n        const item = collectionHook.data[highlightedIdx];\n        if (item) {\n          if (item.expanded && item.value) {\n            e.preventDefault();\n            collectionHook.collapseGroupItem(item);\n            onToggle?.(item.value);\n          }\n        }\n      }\n    },\n    [\n      collectionHook.collapseGroupItem,\n      collectionHook.data,\n      collectionHook.expandGroupItem,\n      highlightedIdx,\n    ]\n  );\n\n  const handleClick = useCallback(\n    (evt: MouseEvent<HTMLElement>) => {\n      console.log(`useCollapsibleGroups idx=${highlightedIdx}`);\n      const item = collectionHook.data[highlightedIdx];\n      console.log(evt.target, evt.currentTarget);\n      if (\n        item &&\n        canToggleItem(item) &&\n        (!canSelectItem(item) || toggleIconClicked(evt.target as HTMLElement))\n      ) {\n        evt.stopPropagation();\n        evt.preventDefault();\n        if (item.expanded === false && item.value) {\n          collectionHook.expandGroupItem(item);\n          onToggle?.(item.value);\n        } else if (item.expanded === true && item.value) {\n          collectionHook.collapseGroupItem(item);\n          onToggle?.(item.value);\n        }\n      }\n    },\n    [\n      collectionHook.collapseGroupItem,\n      collectionHook.data,\n      collectionHook.expandGroupItem,\n      highlightedIdx,\n    ]\n  );\n\n  /**\n   * These are List handlers, so we will not have reference to the actual node\n   * element. We must rely on highlightedIdx to tell us which node is interactive.\n   */\n  const listHandlers = {\n    onClick: handleClick,\n    onKeyDown: handleKeyDown,\n  };\n\n  return collapsibleHeaders ? listHandlers : NO_HANDLERS;\n};\n"],"names":[],"mappings":"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"}