import { jsx } from 'react/jsx-runtime';
import { useForkRef, useIsomorphicLayoutEffect, SaltProvider } from '@salt-ds/core';
import { forwardRef, useState, useRef, useCallback, useEffect } from 'react';
import ReactDOM from 'react-dom';
import { isDesktop, Window as Window$1 } from './WindowContext.js';
import { useWindowParentContext, WindowParentContext } from './desktop-utils.js';
import { useWindow } from '@salt-ds/window';
import { useComponentCssInjection } from '@salt-ds/styles';
import css_248z from './ElectronWindow.css.js';

const Window = forwardRef(function ElectronWindow2({ className, children, id = "dialog", open = true, style = {}, ...rest }, forwardedRef) {
  const { top, left, position, ...styleRest } = style;
  const targetWindow = useWindow();
  useComponentCssInjection({
    testId: "salt-electron-window",
    css: css_248z,
    window: targetWindow
  });
  const [mountNode, setMountNode] = useState(null);
  const [windowRef, setWindowRef] = useState(null);
  const windowRoot = useRef(null);
  const forkedRef = useForkRef(forwardedRef, windowRoot);
  if (!mountNode) {
    const win = window.open("", id);
    win.document.write(
      `<html lang="en"><head><title>${id}</title><base href="${location.origin}"><style>body {margin: 0;}</style></head><body></body></html>`
    );
    document.head.querySelectorAll("style").forEach((htmlElement) => {
      win.document.head.appendChild(htmlElement.cloneNode(true));
    });
    const bodyElement = win.document.body;
    setMountNode(bodyElement);
    setWindowRef(win);
  }
  const parentWindow = useWindowParentContext();
  const closeWindow = useCallback(() => {
    const { ipcRenderer } = global;
    if (ipcRenderer) {
      ipcRenderer.send("window-close", { id });
    }
  }, [id]);
  useEffect(() => {
    setTimeout(() => {
      if (windowRoot.current) {
        const { scrollHeight: height, scrollWidth: width } = windowRoot.current;
        const { ipcRenderer } = global;
        if (ipcRenderer) {
          ipcRenderer.send("window-size", {
            id,
            height: Math.ceil(height + 1),
            width: Math.ceil(width + 1)
          });
        }
      }
    }, 80);
  });
  useEffect(() => {
    const { ipcRenderer } = global;
    if (ipcRenderer) {
      setTimeout(() => {
        ipcRenderer.send("window-ready", { id });
      }, 100);
    }
    return () => {
      closeWindow();
    };
  }, [closeWindow, windowRef, id]);
  useIsomorphicLayoutEffect(() => {
    setTimeout(() => {
      const { ipcRenderer } = global;
      if (ipcRenderer) {
        ipcRenderer.send("window-position", {
          id,
          parentWindowID: parentWindow.id,
          left: style.left,
          top: style.top
        });
      }
    }, 90);
  }, [style]);
  return mountNode ? ReactDOM.createPortal(
    /* @__PURE__ */ jsx(SaltProvider, {
      children: /* @__PURE__ */ jsx(WindowParentContext.Provider, {
        value: {
          top: style.top + parentWindow.top,
          left: style.left + parentWindow.left,
          id
        },
        children: /* @__PURE__ */ jsx("div", {
          className: "saltWindow",
          ref: forkedRef,
          children: /* @__PURE__ */ jsx("div", {
            className,
            style: { ...styleRest },
            ...rest,
            children
          })
        })
      })
    }),
    mountNode
  ) : null;
});
const ElectronWindow = isDesktop ? Window : Window$1;

export { ElectronWindow };
//# sourceMappingURL=ElectronWindow.js.map
