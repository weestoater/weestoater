import { jsxs, jsx } from 'react/jsx-runtime';
import { clsx } from 'clsx';
import { makePrefixer } from '@salt-ds/core';
import { AlphaInput } from './AlphaInputField.js';
import { SwatchesPicker } from './SwatchesPicker.js';
import { useWindow } from '@salt-ds/window';
import { useComponentCssInjection } from '@salt-ds/styles';
import css_248z from './Swatches.css.js';

const withBaseName = makePrefixer("saltColorChooserSwatches");
const Swatches = ({
  allColors,
  color,
  alpha,
  handleColorChange,
  displayColorName,
  placeholder,
  onDialogClosed
}) => {
  const targetWindow = useWindow();
  useComponentCssInjection({
    testId: "salt-swatches",
    css: css_248z,
    window: targetWindow
  });
  return /* @__PURE__ */ jsxs("div", {
    "data-testid": "swatches",
    className: clsx(withBaseName("pickerDiv")),
    children: [
      /* @__PURE__ */ jsx(SwatchesPicker, {
        allColors,
        color,
        onChange: handleColorChange,
        alpha,
        onDialogClosed
      }),
      /* @__PURE__ */ jsxs("div", {
        className: clsx(withBaseName("textDiv")),
        children: [
          /* @__PURE__ */ jsxs("div", {
            children: [
              /* @__PURE__ */ jsx("span", {
                className: clsx(withBaseName("colorTextDiv")),
                children: "Color:"
              }),
              /* @__PURE__ */ jsx("span", {
                className: clsx(withBaseName("colorNameTextDiv")),
                children: displayColorName != null ? displayColorName : placeholder
              })
            ]
          }),
          /* @__PURE__ */ jsxs("div", {
            children: [
              /* @__PURE__ */ jsx("span", {
                className: clsx(withBaseName("alphaTextDiv")),
                children: "Opacity:"
              }),
              /* @__PURE__ */ jsx(AlphaInput, {
                alphaValue: (color == null ? void 0 : color.rgba.a) === 0 ? 0 : alpha,
                showAsOpacity: true,
                onSubmit: (alpha2, e) => {
                  const newColor = color == null ? void 0 : color.setAlpha(alpha2);
                  handleColorChange(newColor, false, e);
                }
              })
            ]
          })
        ]
      })
    ]
  });
};

export { Swatches };
//# sourceMappingURL=Swatches.js.map
