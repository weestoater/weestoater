import { jsxs, jsx } from 'react/jsx-runtime';
import { SketchPicker } from 'react-color';
import { clsx } from 'clsx';
import { makePrefixer, Button } from '@salt-ds/core';
import { Color } from './Color.js';
import { hexValueWithoutAlpha } from './ColorHelpers.js';
import { HexInput } from './HexInput.js';
import { RGBAInput } from './RGBAInput.js';
import { useWindow } from '@salt-ds/window';
import { useComponentCssInjection } from '@salt-ds/styles';
import css_248z from './ColorPicker.css.js';

const withBaseName = makePrefixer("saltColorChooserPicker");
const ColorPicker = ({
  alpha = 1,
  disableAlphaChooser,
  color,
  onChange,
  onDialogClosed
}) => {
  var _a;
  const targetWindow = useWindow();
  useComponentCssInjection({
    testId: "salt-color-picker",
    css: css_248z,
    window: targetWindow
  });
  const rgbaValue = (_a = color == null ? void 0 : color.rgba) != null ? _a : Color.makeColorFromRGB(0, 0, 0, alpha).rgba;
  const rgbaText = disableAlphaChooser ? "RGB" : "RGBA";
  const onSubmitHex = (hexValue, e) => {
    const newColor = Color.makeColorFromHex(hexValue);
    onChange(newColor, false, e);
  };
  const onSubmitRgb = (rgba, e) => {
    const newColor = Color.makeColorFromRGB(rgba.r, rgba.g, rgba.b, rgba.a);
    onChange(newColor, false, e);
  };
  const onSubmitAlpha = (alpha2, e) => {
    const newColor = Color.makeColorFromRGB(
      rgbaValue.r,
      rgbaValue.g,
      rgbaValue.b,
      Math.max(0, Math.min(alpha2, 1))
    );
    onChange(newColor, false, e);
  };
  const onSketchPickerChange = (colorResult, e) => {
    var _a2;
    const newColor = Color.makeColorFromRGB(
      colorResult.rgb.r,
      colorResult.rgb.g,
      colorResult.rgb.b,
      (_a2 = colorResult.rgb.a) != null ? _a2 : alpha
    );
    onChange(newColor, false, e);
  };
  const onApply = () => {
    onChange(color, true);
    onDialogClosed();
  };
  return /* @__PURE__ */ jsxs("div", {
    "data-testid": "color-picker",
    className: clsx(withBaseName()),
    children: [
      /* @__PURE__ */ jsx(SketchPicker, {
        className: clsx(withBaseName("swatchPickerStyles"), {
          [withBaseName("rootDisabledAlpha")]: disableAlphaChooser,
          [withBaseName("root")]: !disableAlphaChooser
        }),
        color: rgbaValue,
        onChange: onSketchPickerChange,
        presetColors: [],
        disableAlpha: disableAlphaChooser
      }),
      /* @__PURE__ */ jsxs("div", {
        className: clsx(withBaseName("inputContainer")),
        children: [
          /* @__PURE__ */ jsxs("div", {
            className: clsx(withBaseName("inputDivs")),
            children: [
              /* @__PURE__ */ jsx("span", {
                className: clsx(withBaseName("textDivOverrides")),
                children: "HEX"
              }),
              /* @__PURE__ */ jsx(HexInput, {
                hexValue: disableAlphaChooser ? hexValueWithoutAlpha(color == null ? void 0 : color.hex) : color == null ? void 0 : color.hex,
                disableAlphaChooser,
                onSubmit: onSubmitHex
              }),
              /* @__PURE__ */ jsx(RGBAInput, {
                disableAlphaChooser,
                rgbaText,
                rgbaValue,
                onSubmitAlpha,
                onSubmitRgb
              })
            ]
          }),
          /* @__PURE__ */ jsx("div", {
            className: clsx(withBaseName("applyButtonDiv")),
            children: /* @__PURE__ */ jsx(Button, {
              "data-testid": "apply-button",
              variant: "cta",
              onClick: onApply,
              children: "Apply"
            })
          })
        ]
      })
    ]
  });
};

export { ColorPicker };
//# sourceMappingURL=ColorPicker.js.map
