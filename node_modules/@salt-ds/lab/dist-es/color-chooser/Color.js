import tinycolor from 'tinycolor2';
import { getColorNameByHexValue } from './ColorHelpers.js';

class Color {
  constructor() {
    this.color = tinycolor();
  }
  get hex() {
    return this.color.getAlpha() === 1 ? this.color.toHexString() : this.color.toHex8String();
  }
  get rgba() {
    return {
      r: this.color.toRgb().r,
      g: this.color.toRgb().g,
      b: this.color.toRgb().b,
      a: this.color.toRgb().a
    };
  }
  get colorName() {
    return getColorNameByHexValue(
      this.color.toHex8String(),
      false,
      void 0,
      true
    );
  }
  static makeColorFromHex(hexValue) {
    const colorObj = new Color();
    colorObj.color = tinycolor(hexValue);
    if (colorObj.color.isValid()) {
      return colorObj;
    } else {
      return void 0;
    }
  }
  static makeColorFromRGB(r, g, b, a) {
    const colorObj = new Color();
    colorObj.color = tinycolor({ r, g, b, a });
    return colorObj;
  }
  setAlpha(alpha) {
    const colorObj = new Color();
    colorObj.color = this.color.setAlpha(alpha);
    return colorObj;
  }
}

export { Color };
//# sourceMappingURL=Color.js.map
