import { jsx } from 'react/jsx-runtime';
import { useState, useEffect } from 'react';
import { makePrefixer } from '@salt-ds/core';
import { InputLegacy } from '../input-legacy/InputLegacy.js';
import '../input-legacy/StaticInputAdornment.js';
import css_248z from './RGBAInput.css.js';
import { useWindow } from '@salt-ds/window';
import { useComponentCssInjection } from '@salt-ds/styles';

const withBaseName = makePrefixer("saltColorChooser");
const RGBInput = ({
  rgbaValue,
  value,
  onSubmit
}) => {
  const targetWindow = useWindow();
  useComponentCssInjection({
    testId: "salt-rgba-input",
    css: css_248z,
    window: targetWindow
  });
  const [rgbaInputValue, setRgbaInputValue] = useState(
    rgbaValue ? rgbaValue[value] : ""
  );
  useEffect(() => {
    setRgbaInputValue(rgbaValue ? rgbaValue[value] : "");
  }, [rgbaValue, value]);
  const handleRGBInputChange = (e, value2) => {
    let rgb;
    rgb = parseInt(value2);
    if (value2.trim() === "" || Number.isNaN(rgb)) {
      rgb = "";
    }
    setRgbaInputValue(rgb);
  };
  const handleKeyDownRGB = (e) => {
    if (e.key === "Enter") {
      const newRgb = { ...rgbaValue, [value]: e.currentTarget.value };
      const validatedRgb = {
        r: Math.max(0, Math.min(newRgb.r, 255)),
        g: Math.max(0, Math.min(newRgb.g, 255)),
        b: Math.max(0, Math.min(newRgb.b, 255)),
        a: newRgb.a
      };
      onSubmit(validatedRgb);
    }
  };
  const handleOnBlurRGB = (e) => {
    const newRgb = { ...rgbaValue, [value]: e.target.value };
    const validatedRgb = {
      r: Math.max(0, Math.min(newRgb.r, 255)),
      g: Math.max(0, Math.min(newRgb.g, 255)),
      b: Math.max(0, Math.min(newRgb.b, 255)),
      a: newRgb.a
    };
    onSubmit(validatedRgb, e);
  };
  return /* @__PURE__ */ jsx(InputLegacy, {
    inputProps: {
      "data-testid": `${value}-input`
    },
    className: withBaseName("rgbaInput"),
    value: rgbaInputValue.toString(),
    onChange: handleRGBInputChange,
    onBlur: handleOnBlurRGB,
    onKeyDown: handleKeyDownRGB
  });
};

export { RGBInput };
//# sourceMappingURL=RGBAInputField.js.map
