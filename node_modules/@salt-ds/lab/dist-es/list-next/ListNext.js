import { jsx } from 'react/jsx-runtime';
import { makePrefixer, useId, useForkRef } from '@salt-ds/core';
import { forwardRef, useRef } from 'react';
import { clsx } from 'clsx';
import { useList } from './useList.js';
import { useWindow } from '@salt-ds/window';
import { useComponentCssInjection } from '@salt-ds/styles';
import css_248z from './ListNext.css.js';
import { ListNextContext } from './ListNextContext.js';

const withBaseName = makePrefixer("saltListNext");
const ListNext = forwardRef(
  function ListNext2({
    children,
    className,
    disabled,
    disableFocus,
    id,
    onSelect,
    onFocus,
    onBlur,
    onKeyDown,
    onMouseOver,
    highlightedItem,
    selected,
    defaultSelected,
    onChange,
    ...rest
  }, ref) {
    const targetWindow = useWindow();
    useComponentCssInjection({
      testId: "salt-list-next",
      css: css_248z,
      window: targetWindow
    });
    const listId = useId(id);
    const listRef = useRef(null);
    const handleRef = useForkRef(listRef, ref);
    const {
      focusHandler,
      keyDownHandler,
      blurHandler,
      mouseOverHandler,
      activeDescendant,
      contextValue,
      focusVisibleRef
    } = useList({
      disabled,
      highlightedItem,
      selected,
      defaultSelected,
      onChange,
      onSelect,
      id: listId,
      ref: listRef
    });
    const setListRef = useForkRef(focusVisibleRef, handleRef);
    const handleFocus = (event) => {
      focusHandler(event);
      onFocus == null ? void 0 : onFocus(event);
    };
    const handleKeyDown = (event) => {
      if (disableFocus) {
        event.preventDefault();
        return;
      }
      keyDownHandler(event);
      onKeyDown == null ? void 0 : onKeyDown(event);
    };
    const handleBlur = (event) => {
      blurHandler();
      onBlur == null ? void 0 : onBlur(event);
    };
    const handleMouseOver = (event) => {
      mouseOverHandler();
      onMouseOver == null ? void 0 : onMouseOver(event);
    };
    return /* @__PURE__ */ jsx(ListNextContext.Provider, {
      value: contextValue,
      children: /* @__PURE__ */ jsx("ul", {
        ref: setListRef,
        id: listId,
        className: clsx(withBaseName(), className),
        role: "listbox",
        tabIndex: disabled || disableFocus ? -1 : 0,
        "aria-activedescendant": disabled ? void 0 : activeDescendant,
        "aria-disabled": disabled,
        onFocus: handleFocus,
        onKeyDown: handleKeyDown,
        onBlur: handleBlur,
        onMouseOver: handleMouseOver,
        ...rest,
        children
      })
    });
  }
);

export { ListNext };
//# sourceMappingURL=ListNext.js.map
