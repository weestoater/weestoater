import { useState } from 'react';

const isToggleList = (event) => event.altKey && ["ArrowUp", "ArrowDown"].indexOf(event.key) !== -1;
const usePopperStatus = (props) => {
  const { initialOpen, isMultiSelect = false, onClose } = props;
  const [isOpen, setOpen] = useState(initialOpen === true);
  const handleCloseList = (event) => {
    setOpen(false);
    if (onClose) {
      onClose(event);
    }
  };
  const handleInputKeyDown = (event) => {
    if (isToggleList(event)) {
      setOpen((open) => !open);
    } else if (!isOpen && ["Alt", "Tab", "Escape", "Control", "Shift", "Meta"].indexOf(
      event.key
    ) === -1) {
      setOpen(true);
    } else if (isOpen && event.key === "Escape") {
      handleCloseList(event);
    } else if (isOpen && !isMultiSelect && event.key === "Enter") {
      handleCloseList(event);
    }
  };
  const notifyPopper = (event) => {
    switch (event.type) {
      case "focus":
        setOpen(true);
        break;
      case "blur":
        handleCloseList(event);
        break;
      case "keydown":
        handleInputKeyDown(event);
        break;
      case "click":
        handleCloseList(event);
        break;
      case "keyup":
        break;
      default:
        throw Error(`usePopper: unexpected event type ${event.type}`);
    }
  };
  return {
    isOpen,
    notifyPopper
  };
};

export { isToggleList, usePopperStatus };
//# sourceMappingURL=usePopperStatus.js.map
