import { jsx } from 'react/jsx-runtime';
import { makePrefixer, useId, useForkRef } from '@salt-ds/core';
import { clsx } from 'clsx';
import { forwardRef, useRef } from 'react';
import { DefaultComboBox } from './internal/DefaultComboBox.js';
import { MultiSelectComboBox } from './internal/MultiSelectComboBox.js';
import { useWidth } from '../list-deprecated/internal/useWidth.js';
import '../form-field-context-legacy/FormFieldLegacyContext.js';
import { useFormFieldLegacyProps } from '../form-field-context-legacy/useFormFieldLegacyProps.js';
import { useWindow } from '@salt-ds/window';
import { useComponentCssInjection } from '@salt-ds/styles';
import css_248z from './ComboBox.css.js';

const withBaseName = makePrefixer("saltComboBox");
function getMultiSelect({
  multiSelect,
  initialSelectedItem,
  selectedItem
}) {
  return multiSelect || Array.isArray(initialSelectedItem) || Array.isArray(selectedItem);
}
const validateProps = ({
  isMultiSelect,
  delimiter
}) => {
  if (process.env.NODE_ENV !== "production") {
    if (!isMultiSelect && delimiter) {
      console.warn("Delimiter can only be used for a multi-select combo-box.");
    }
  }
};
const ComboBoxDeprecated = forwardRef(function ComboBox(props, ref) {
  const targetWindow = useWindow();
  useComponentCssInjection({
    testId: "salt-combo-box-deprecated",
    css: css_248z,
    window: targetWindow
  });
  const {
    inFormField,
    a11yProps: {
      "aria-labelledby": ariaLabelledBy,
      "aria-required": ariaRequired,
      disabled: formFieldDisabled
    } = {}
  } = useFormFieldLegacyProps();
  const { current: isMultiSelect } = useRef(getMultiSelect(props));
  validateProps({ isMultiSelect, ...props });
  const {
    inputRef,
    listRef,
    className,
    disabled = formFieldDisabled,
    source = [],
    multiSelect,
    initialSelectedItem,
    selectedItem,
    width,
    listWidth,
    id: idProp,
    "aria-label": ariaLabel,
    ...restProps
  } = props;
  const id = useId(idProp);
  const [rootRef, rootWidth] = useWidth(
    width == null && listWidth == null
  );
  const ComboBoxComponent = isMultiSelect ? MultiSelectComboBox : DefaultComboBox;
  return /* @__PURE__ */ jsx("div", {
    className: clsx(
      withBaseName(),
      {
        [withBaseName("disabled")]: disabled,
        [withBaseName(`field`)]: inFormField
      },
      className
    ),
    id,
    ref: useForkRef(ref, rootRef),
    style: { width },
    children: /* @__PURE__ */ jsx(ComboBoxComponent, {
      ...{
        ...restProps,
        id,
        source,
        disabled,
        rootRef,
        rootWidth,
        inputRef,
        listRef,
        listWidth,
        initialSelectedItem,
        selectedItem,
        "aria-label": clsx(ariaLabel),
        "aria-labelledby": ariaLabelledBy,
        "aria-required": ariaRequired
      }
    })
  });
});

export { ComboBoxDeprecated };
//# sourceMappingURL=ComboBoxDeprecated.js.map
