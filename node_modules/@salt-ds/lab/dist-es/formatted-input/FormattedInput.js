import { jsx } from 'react/jsx-runtime';
import { clsx } from 'clsx';
import { forwardRef } from 'react';
import { useRifm } from 'rifm';
import { useControlled } from '@salt-ds/core';
import { InputLegacy } from '../input-legacy/InputLegacy.js';
import '../input-legacy/StaticInputAdornment.js';
import { baseName, InputWithMask } from './internal/InputWithMask.js';
import { useWindow } from '@salt-ds/window';
import { useComponentCssInjection } from '@salt-ds/styles';
import css_248z from './FormattedInput.css.js';

const defaultFormatter = (string) => string;
const defaultRifmOptions = {};
const FormattedInput = forwardRef(
  function FormattedInput2({
    defaultValue = "",
    className,
    inputProps,
    mask,
    onChange,
    rifmOptions = defaultRifmOptions,
    value: valueProp,
    textAlign,
    ...other
  }, ref) {
    const targetWindow = useWindow();
    useComponentCssInjection({
      testId: "salt-formatted-input",
      css: css_248z,
      window: targetWindow
    });
    const [valueState, setValueState] = useControlled({
      default: defaultValue,
      controlled: valueProp,
      name: "FormattedInput",
      state: "value"
    });
    const handleChange = (value) => {
      setValueState(value);
      onChange == null ? void 0 : onChange(value);
    };
    let rifmMask = false;
    if (rifmOptions.mask) {
      rifmMask = typeof rifmOptions.mask === "function" ? rifmOptions.mask(valueState) : rifmOptions.mask;
    }
    const rifm = useRifm({
      format: defaultFormatter,
      accept: /.*/,
      ...rifmOptions,
      mask: rifmMask,
      value: valueState || "",
      onChange: handleChange
    });
    return /* @__PURE__ */ jsx(InputLegacy, {
      className: clsx(baseName, className),
      inputComponent: InputWithMask,
      inputProps: { mask, textAlign, ...inputProps },
      onChange: rifm.onChange,
      textAlign,
      value: rifm.value,
      ...other,
      ref
    });
  }
);

export { FormattedInput };
//# sourceMappingURL=FormattedInput.js.map
