import { jsxs, Fragment, jsx } from 'react/jsx-runtime';
import { makePrefixer, useId, Button } from '@salt-ds/core';
import { ChevronUpIcon, ChevronDownIcon } from '@salt-ds/icons';
import { clsx } from 'clsx';
import { forwardRef, useState } from 'react';
import './internal/FavoriteToggleWithTooltip.js';
import { useContactDetailsContext } from './internal/ContactDetailsContext.js';

const withBaseName = makePrefixer("saltContactMetadata");
const ContactMetadata = forwardRef(
  function ContactMetadata2(props, ref) {
    const { collapsible, children, collapseButtonId, className, ...restProps } = props;
    const { primaryId, variant, isStacked } = useContactDetailsContext();
    const [showMetadata, setShowMetadata] = useState(!collapsible);
    const toggleShowMetadata = () => {
      setShowMetadata(!showMetadata);
    };
    if (variant !== "default") {
      return null;
    }
    const variantClassName = withBaseName(isStacked ? "stacked" : "default");
    const id = useId(collapseButtonId);
    return /* @__PURE__ */ jsxs(Fragment, {
      children: [
        collapsible ? /* @__PURE__ */ jsx(Button, {
          "aria-expanded": showMetadata,
          "aria-label": showMetadata ? "Collapse" : "Expand",
          "aria-labelledby": `${id} ${primaryId}`,
          id,
          onClick: toggleShowMetadata,
          variant: "secondary",
          className: withBaseName("expander"),
          children: showMetadata ? /* @__PURE__ */ jsx(ChevronUpIcon, {}) : /* @__PURE__ */ jsx(ChevronDownIcon, {})
        }) : null,
        !collapsible || showMetadata ? /* @__PURE__ */ jsxs("div", {
          ...restProps,
          ref,
          className: clsx(withBaseName(), variantClassName, className),
          children: [
            collapsible ? /* @__PURE__ */ jsx("div", {
              className: withBaseName("separator")
            }) : null,
            children
          ]
        }) : null
      ]
    });
  }
);

export { ContactMetadata };
//# sourceMappingURL=ContactMetadata.js.map
