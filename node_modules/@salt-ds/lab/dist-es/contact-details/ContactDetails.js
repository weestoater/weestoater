import { jsx, jsxs } from 'react/jsx-runtime';
import { makePrefixer, useForkRef } from '@salt-ds/core';
import { clsx } from 'clsx';
import { forwardRef, useState } from 'react';
import './internal/FavoriteToggleWithTooltip.js';
import { ContactDetailsContext } from './internal/ContactDetailsContext.js';
import { useComponentSize } from './internal/useComponentSize.js';
import { useWindow } from '@salt-ds/window';
import { useComponentCssInjection } from '@salt-ds/styles';
import css_248z from './ContactDetails.css.js';

const withBaseName = makePrefixer("saltContactDetails");
function getClassName(variant, isStacked) {
  return withBaseName(`${variant}${isStacked ? "-stacked" : ""}`);
}
const ContactDetails = forwardRef(
  function ContactDetails2(props, externalRef) {
    const {
      children,
      variant = "default",
      className,
      stackAtBreakpoint = 300,
      embedded,
      ...restProps
    } = props;
    const targetWindow = useWindow();
    useComponentCssInjection({
      testId: "salt-contact-details",
      css: css_248z,
      window: targetWindow
    });
    const [hasAvatar, setHasAvatar] = useState(false);
    const [primary, setPrimary] = useState();
    const [primaryId, setPrimaryId] = useState();
    const [secondary, setSecondary] = useState();
    const [secondaryId, setSecondaryId] = useState();
    const [tertiary, setTertiary] = useState();
    const [tertiaryId, setTertiaryId] = useState();
    const [containerRef, componentSize] = useComponentSize(stackAtBreakpoint);
    const isStacked = componentSize && componentSize.width < stackAtBreakpoint;
    variant === "compact" && isStacked && console.log("componentSize", componentSize.width, containerRef.current);
    const ref = useForkRef(externalRef, containerRef);
    const contextValue = {
      variant,
      hasAvatar,
      setHasAvatar,
      isStacked,
      primary,
      setPrimary,
      primaryId,
      setPrimaryId,
      secondary,
      setSecondary,
      secondaryId,
      setSecondaryId,
      tertiary,
      setTertiary,
      tertiaryId,
      setTertiaryId
    };
    const showNoAvatar = !hasAvatar && !embedded && variant !== "mini";
    return /* @__PURE__ */ jsx(ContactDetailsContext.Provider, {
      value: contextValue,
      children: /* @__PURE__ */ jsxs("div", {
        ...restProps,
        ref,
        className: clsx(
          withBaseName(),
          getClassName(variant, isStacked),
          {
            [withBaseName("embedded")]: embedded,
            [withBaseName("noAvatar")]: showNoAvatar
          },
          className
        ),
        role: "article",
        "aria-roledescription": "Contact Card",
        children: [
          children,
          showNoAvatar ? /* @__PURE__ */ jsx("div", {
            className: withBaseName("noAvatar-indicator")
          }) : null
        ]
      })
    });
  }
);

export { ContactDetails };
//# sourceMappingURL=ContactDetails.js.map
