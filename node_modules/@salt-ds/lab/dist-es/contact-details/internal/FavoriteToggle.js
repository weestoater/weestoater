import { jsx } from 'react/jsx-runtime';
import { useIsFocusVisible, useControlled, useForkRef } from '@salt-ds/core';
import { forwardRef, useState } from 'react';
import { StarIconContainer } from './StarIconContainer.js';

const FavoriteToggle = forwardRef(
  function FavoriteToggle2(props, ref) {
    const {
      isSelected: isSelectedProp,
      onBlur: onBlurProp,
      onFocus: onFocusProp,
      onClick: onClickProp,
      onChange: onChangeProp,
      onMouseEnter: onMouseEnterProp,
      onMouseLeave: onMouseLeaveProp,
      onKeyDown: onKeyDownProp,
      ...restProps
    } = props;
    const {
      isFocusVisibleRef,
      ref: focusVisibleRef,
      onFocus,
      onBlur
    } = useIsFocusVisible();
    const [isFocused, setIsFocused] = useState(false);
    const [isHighlighted, setIsHighlighted] = useState(false);
    const [isFocusVisible, setIsFocusVisible] = useState(false);
    const [isSelected, setIsSelected] = useControlled({
      controlled: isSelectedProp,
      default: false,
      name: "FavoriteToggle",
      state: "isSelected"
    });
    const toggleSelected = () => {
      setIsSelected((s) => !s);
      if (onChangeProp) {
        onChangeProp(!isSelected);
      }
    };
    const handleFocus = (event) => {
      if (onFocusProp) {
        onFocusProp(event);
      }
      onFocus(event);
      setIsFocused(true);
      setIsFocusVisible(isFocusVisibleRef.current);
    };
    const handleBlur = (event) => {
      if (onBlurProp) {
        onBlurProp(event);
      }
      onBlur();
      setIsFocused(false);
      setIsFocusVisible(false);
    };
    const handleClick = (event) => {
      if (onClickProp) {
        onClickProp(event);
      }
      setIsFocusVisible(isFocusVisibleRef.current);
      toggleSelected();
    };
    const handleMouseEnter = (event) => {
      if (onMouseEnterProp) {
        onMouseEnterProp(event);
      }
      setIsHighlighted(true);
    };
    const handleMouseLeave = (event) => {
      if (onMouseLeaveProp) {
        onMouseLeaveProp(event);
      }
      setIsHighlighted(false);
    };
    const handleKeyDown = (event) => {
      if (onKeyDownProp) {
        onKeyDownProp(event);
      }
      setIsFocusVisible(isFocusVisibleRef.current);
      if (["Enter", " "].includes(event.key)) {
        toggleSelected();
      }
    };
    return /* @__PURE__ */ jsx(StarIconContainer, {
      isFocusVisible,
      isFocused,
      isHighlighted,
      isSelected,
      onBlur: handleBlur,
      onClick: handleClick,
      onFocus: handleFocus,
      onKeyDown: handleKeyDown,
      onMouseEnter: handleMouseEnter,
      onMouseLeave: handleMouseLeave,
      ref: useForkRef(focusVisibleRef, ref),
      tabIndex: 0,
      ...restProps
    });
  }
);

export { FavoriteToggle };
//# sourceMappingURL=FavoriteToggle.js.map
