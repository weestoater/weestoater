import { useCallback } from 'react';
import { ArrowLeft } from '../common-hooks/keyUtils.js';

const getNodeParentPath = ({ id }) => {
  let pos = id.lastIndexOf("-");
  if (pos !== -1) {
    const path = id.slice(pos + 1);
    const steps = path.split(".");
    if (steps.length === 1) {
      return null;
    } else {
      steps.pop();
      return `${id.slice(0, pos)}-${steps.join(".")}`;
    }
  } else if ((pos = id.lastIndexOf("/")) !== -1) {
    return id.slice(0, pos);
  }
};
const useKeyboardNavigation = ({
  collectionHook,
  highlightedIdx,
  highlightItemAtIndex
}) => {
  const handleKeyDown = useCallback(
    (e) => {
      if (e.key === ArrowLeft) {
        const node = collectionHook.data[highlightedIdx];
        const parentId = getNodeParentPath(node);
        if (parentId) {
          highlightItemAtIndex(
            collectionHook.data.findIndex((item) => item.id === parentId)
          );
        }
      }
    },
    [highlightedIdx, highlightItemAtIndex]
  );
  const listHandlers = {
    onKeyDown: handleKeyDown
  };
  return {
    listHandlers
  };
};

export { getNodeParentPath, useKeyboardNavigation };
//# sourceMappingURL=use-tree-keyboard-navigation.js.map
