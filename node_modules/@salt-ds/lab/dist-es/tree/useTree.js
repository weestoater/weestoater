import { useRef, useCallback } from 'react';
import '@salt-ds/core';
import '../common-hooks/collectionProvider.js';
import '../common-hooks/keyUtils.js';
import { useCollapsibleGroups } from '../common-hooks/useCollapsibleGroups.js';
import { closestListItemIndex } from '../common-hooks/list-dom-utils.js';
import { useKeyboardNavigation } from '../common-hooks/useKeyboardNavigation.js';
import { useSelection } from '../common-hooks/useSelection.js';
import { useViewportTracking } from '../common-hooks/useViewportTracking.js';
import { useKeyboardNavigation as useKeyboardNavigation$1 } from './use-tree-keyboard-navigation.js';

const useTree = ({
  collectionHook,
  containerRef,
  contentRef = containerRef,
  defaultSelected,
  disabled,
  groupSelection,
  onSelect,
  onSelectionChange,
  onToggle,
  onHighlight: onHighlightProp,
  selected: selectedProp,
  selectionStrategy
}) => {
  const lastSelection = useRef(selectedProp || defaultSelected);
  const handleKeyboardNavigation = (evt, nextIdx) => {
    var _a, _b;
    (_b = (_a = selectionHook.listHandlers).onKeyboardNavigation) == null ? void 0 : _b.call(_a, evt, nextIdx);
  };
  const { highlightedIndex: highlightedIdx, ...keyboardHook } = useKeyboardNavigation({
    containerRef,
    indexPositions: collectionHook.data,
    onHighlight: onHighlightProp,
    onKeyboardNavigation: handleKeyboardNavigation,
    selected: lastSelection.current
  });
  const collapsibleHook = useCollapsibleGroups({
    collapsibleHeaders: true,
    collectionHook,
    highlightedIdx,
    onToggle
  });
  const selectionHook = useSelection({
    defaultSelected,
    highlightedIdx,
    indexPositions: collectionHook.data,
    onSelect,
    onSelectionChange,
    selected: selectedProp,
    selectionStrategy
  });
  const treeNavigationHook = useKeyboardNavigation$1({
    collectionHook,
    highlightedIdx,
    highlightItemAtIndex: keyboardHook.setHighlightedIndex
  });
  const handleClick = useCallback(
    (evt) => {
      var _a, _b, _c;
      (_a = collapsibleHook == null ? void 0 : collapsibleHook.onClick) == null ? void 0 : _a.call(collapsibleHook, evt);
      if (!evt.defaultPrevented) {
        (_c = (_b = selectionHook.listHandlers).onClick) == null ? void 0 : _c.call(_b, evt);
      }
    },
    [collapsibleHook, selectionHook]
  );
  const handleKeyDown = useCallback(
    (evt) => {
      var _a, _b, _c, _d, _e, _f, _g;
      (_b = (_a = keyboardHook.listProps).onKeyDown) == null ? void 0 : _b.call(_a, evt);
      if (!evt.defaultPrevented) {
        (_d = (_c = selectionHook.listHandlers).onKeyDown) == null ? void 0 : _d.call(_c, evt);
      }
      if (!evt.defaultPrevented) {
        (_e = collapsibleHook == null ? void 0 : collapsibleHook.onKeyDown) == null ? void 0 : _e.call(collapsibleHook, evt);
      }
      if (!evt.defaultPrevented) {
        (_g = (_f = treeNavigationHook.listHandlers).onKeyDown) == null ? void 0 : _g.call(_f, evt);
      }
    },
    [
      collapsibleHook.onClick,
      collapsibleHook.onKeyDown,
      keyboardHook.listProps,
      selectionHook.listHandlers,
      treeNavigationHook.listHandlers
    ]
  );
  const { isScrolling, scrollIntoView } = useViewportTracking({
    containerRef,
    contentRef,
    highlightedIdx,
    indexPositions: collectionHook.data
  });
  const handleMouseMove = useCallback(
    (evt) => {
      if (!isScrolling.current && !disabled) {
        keyboardHook.listProps.onMouseMove();
        const idx = closestListItemIndex(evt.target);
        if (idx !== void 0 && idx !== highlightedIdx) {
          const item = collectionHook.data[idx];
          if (item.disabled) {
            keyboardHook.setHighlightedIndex(-1);
          } else {
            keyboardHook.setHighlightedIndex(idx);
          }
        }
      }
    },
    [
      collectionHook.data,
      disabled,
      keyboardHook.setHighlightedIndex,
      highlightedIdx,
      isScrolling
    ]
  );
  const getActiveDescendant = () => {
    var _a;
    return highlightedIdx === void 0 || highlightedIdx === -1 ? void 0 : (_a = collectionHook.data[highlightedIdx]) == null ? void 0 : _a.id;
  };
  lastSelection.current = selectionHook.selected;
  const listProps = {
    "aria-activedescendant": getActiveDescendant(),
    onBlur: keyboardHook.listProps.onBlur,
    onFocus: keyboardHook.listProps.onFocus,
    onKeyDown: handleKeyDown,
    onMouseDownCapture: keyboardHook.listProps.onMouseDownCapture,
    onMouseLeave: keyboardHook.listProps.onMouseLeave
  };
  const listHandlers = {
    onClick: handleClick,
    onMouseMove: handleMouseMove
  };
  const listItemHandlers = {
    onClick: handleClick
  };
  return {
    focusVisible: keyboardHook.focusVisible,
    highlightedIdx,
    highlightItemAtIndex: keyboardHook.setHighlightedIndex,
    listHandlers,
    listProps,
    listItemHandlers,
    selected: selectionHook.selected,
    setSelected: selectionHook.setSelected
  };
};

export { useTree };
//# sourceMappingURL=useTree.js.map
