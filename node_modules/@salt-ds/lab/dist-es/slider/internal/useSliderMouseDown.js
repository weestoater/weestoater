import { useRef, useEffect, useCallback } from 'react';
import { roundValue, clampValue } from './utils.js';

const valueFromClientX = (context, x) => {
  const { min, max, step, trackRef } = context;
  const rect = trackRef.current.getBoundingClientRect();
  const localX = x - rect.x;
  let v = localX / rect.width * (max - min) + min;
  v = roundValue(v, step);
  v = clampValue(v, min, max);
  return v;
};
function getNearestHandle(value, clickValue) {
  if (!Array.isArray(value)) {
    return 0;
  }
  let minDistance = Number.MAX_VALUE;
  let handleIndex = -1;
  value.forEach((v, i) => {
    const d = Math.abs(clickValue - v);
    if (d < minDistance) {
      minDistance = d;
      handleIndex = i;
    }
  });
  return handleIndex;
}
function useSliderMouseDown(trackRef, value, min, max, step, updateValueItem, setValue, onChange) {
  const mouseContext = useRef({
    min,
    max,
    step,
    value,
    trackRef,
    updateValueItem,
    setValue,
    onChange
  });
  useEffect(() => {
    const c = mouseContext.current;
    c.min = min;
    c.max = max;
    c.step = step;
    c.value = value;
    c.updateValueItem = updateValueItem;
    c.onChange = onChange;
    c.setValue = setValue;
  }, [min, max, step, value, setValue, updateValueItem, onChange]);
  const onMouseMove = useCallback((event) => {
    const { handleIndex, value: value2, updateValueItem: updateValueItem2, setValue: setValue2, onChange: onChange2 } = mouseContext.current;
    if (handleIndex === void 0) {
      return;
    }
    const { clientX } = event;
    const clickValue = valueFromClientX(mouseContext.current, clientX);
    const newValue = updateValueItem2(value2, handleIndex, clickValue);
    if (newValue !== value2) {
      setValue2(newValue);
      if (onChange2) {
        onChange2(newValue);
      }
    }
  }, []);
  const onMouseUp = useCallback((event) => {
    document.removeEventListener("mouseup", onMouseUp);
    document.removeEventListener("mousemove", onMouseMove);
    mouseContext.current.handleIndex = void 0;
  }, []);
  return useCallback((event) => {
    const { value: value2, setValue: setValue2, onChange: onChange2 } = mouseContext.current;
    document.addEventListener("mouseup", onMouseUp);
    document.addEventListener("mousemove", onMouseMove);
    const { clientX } = event;
    const clickValue = valueFromClientX(mouseContext.current, clientX);
    const handleIndex = getNearestHandle(value2, clickValue);
    mouseContext.current.handleIndex = handleIndex;
    const newValue = updateValueItem(value2, handleIndex, clickValue);
    if (newValue !== value2) {
      setValue2(newValue);
      if (onChange2) {
        onChange2(newValue);
      }
    }
    event.preventDefault();
  }, []);
}

export { useSliderMouseDown };
//# sourceMappingURL=useSliderMouseDown.js.map
