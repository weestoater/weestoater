import { jsx } from 'react/jsx-runtime';
import { useRef, useMemo } from 'react';
import { OverlayContext } from './OverlayContext.js';
import { useControlled, useFloatingUI } from '@salt-ds/core';
import { offset, flip, shift, limitShift, arrow, useInteractions, useRole, useClick, useDismiss } from '@floating-ui/react';

const Overlay = ({
  children,
  open,
  onOpenChange,
  placement: placementProp = "top"
}) => {
  const arrowRef = useRef(null);
  const [openState, setOpenState] = useControlled({
    controlled: open,
    default: false,
    name: "Overlay",
    state: "open"
  });
  const handleOpenChange = (newOpen) => {
    setOpenState(newOpen);
    onOpenChange == null ? void 0 : onOpenChange(newOpen);
  };
  const { x, y, strategy, context, elements, floating, reference } = useFloatingUI({
    open: openState,
    onOpenChange: handleOpenChange,
    placement: placementProp,
    middleware: [
      offset(11),
      flip(),
      shift({ limiter: limitShift() }),
      arrow({ element: arrowRef })
    ]
  });
  const { getReferenceProps, getFloatingProps } = useInteractions([
    useRole(context, { role: "dialog" }),
    useClick(context),
    useDismiss(context)
  ]);
  const floatingStyles = useMemo(() => {
    var _a, _b;
    return {
      top: y != null ? y : 0,
      left: x != null ? x : 0,
      position: strategy,
      width: (_a = elements.floating) == null ? void 0 : _a.offsetWidth,
      height: (_b = elements.floating) == null ? void 0 : _b.offsetHeight
    };
  }, [elements.floating, strategy, x, y]);
  const arrowProps = {
    ref: arrowRef,
    context
  };
  return /* @__PURE__ */ jsx(OverlayContext.Provider, {
    value: {
      openState,
      floatingStyles,
      context,
      arrowProps,
      floating,
      reference,
      getFloatingProps,
      getReferenceProps
    },
    children
  });
};

export { Overlay };
//# sourceMappingURL=Overlay.js.map
