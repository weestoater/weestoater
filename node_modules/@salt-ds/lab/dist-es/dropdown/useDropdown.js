import { useControlled } from '@salt-ds/core';
import { useCallback, useMemo } from 'react';
import '../list/Highlighter.js';
import '../list/ListItem.js';
import '../list/List.js';
import { useList } from '../list/useList.js';
import '../list/VirtualizedList.js';
import '../common-hooks/collectionProvider.js';
import { itemToString } from '../common-hooks/itemToString.js';
import '../common-hooks/keyUtils.js';
import 'react/jsx-runtime';
import '../responsive/useResizeObserver.js';

const NULL_REF = { current: null };
const useDropdown = ({
  collectionHook,
  defaultHighlightedIndex: defaultHighlightedIndexProp,
  defaultIsOpen,
  defaultSelected,
  highlightedIndex: highlightedIndexProp,
  isOpen: isOpenProp,
  itemToString: itemToString$1 = itemToString,
  onHighlight,
  onOpenChange,
  onSelectionChange,
  onSelect,
  selected,
  selectionStrategy
}) => {
  const isMultiSelect = selectionStrategy === "multiple" || selectionStrategy === "extended";
  const [isOpen, setIsOpen] = useControlled({
    controlled: isOpenProp,
    default: defaultIsOpen != null ? defaultIsOpen : false,
    name: "useDropdownList"
  });
  const handleSelectionChange = useCallback(
    (evt, selected2) => {
      if (!isMultiSelect) {
        setIsOpen(false);
        onOpenChange == null ? void 0 : onOpenChange(false);
      }
      onSelectionChange == null ? void 0 : onSelectionChange(evt, selected2);
    },
    [isMultiSelect, onOpenChange, onSelectionChange, setIsOpen]
  );
  const handleSelect = useCallback(
    (evt, selected2) => {
      if (!isMultiSelect) {
        setIsOpen(false);
        onOpenChange == null ? void 0 : onOpenChange(false);
      }
      onSelect == null ? void 0 : onSelect(evt, selected2);
    },
    [isMultiSelect, onOpenChange, onSelect, setIsOpen]
  );
  const listHook = useList({
    collectionHook,
    defaultHighlightedIndex: (defaultHighlightedIndexProp != null ? defaultHighlightedIndexProp : highlightedIndexProp === void 0) ? 0 : void 0,
    defaultSelected,
    label: "useDropDownList",
    onSelectionChange: handleSelectionChange,
    onSelect: handleSelect,
    containerRef: NULL_REF,
    highlightedIndex: highlightedIndexProp,
    onHighlight,
    selected,
    selectionStrategy,
    tabToSelect: !isMultiSelect
  });
  const handleOpenChange = useCallback(
    (open) => {
      setIsOpen(open);
      onOpenChange == null ? void 0 : onOpenChange(open);
    },
    [onOpenChange, setIsOpen]
  );
  const triggerLabel = useMemo(() => {
    if (isMultiSelect && Array.isArray(listHook.selected)) {
      const selectedItems = listHook.selected;
      if (selectedItems.length === 0) {
        return void 0;
      } else if (selectedItems.length === 1) {
        const { value } = selectedItems[0];
        return value === null ? void 0 : itemToString$1(value);
      } else {
        return `${selectedItems.length} items selected`;
      }
    } else {
      const selectedItem = listHook.selected;
      return selectedItem == null || selectedItem.value === null ? void 0 : itemToString$1(selectedItem.value);
    }
  }, [isMultiSelect, itemToString$1, listHook.selected]);
  return {
    isOpen,
    onOpenChange: handleOpenChange,
    triggerLabel,
    ...listHook
  };
};

export { useDropdown };
//# sourceMappingURL=useDropdown.js.map
