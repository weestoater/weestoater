import { jsxs, jsx } from 'react/jsx-runtime';
import { makePrefixer, Text, Display3, Display2, Display1 } from '@salt-ds/core';
import { ArrowDownIcon, ArrowUpIcon } from '@salt-ds/icons';
import { clsx } from 'clsx';
import { forwardRef } from 'react';
import { useMetricContext } from './internal/MetricContext.js';
import { useWindow } from '@salt-ds/window';
import { useComponentCssInjection } from '@salt-ds/styles';
import css_248z from './MetricContent.css.js';

const iconComponentMap = {
  down: ArrowDownIcon,
  up: ArrowUpIcon
};
const withBaseName = makePrefixer("saltMetricContent");
const MetricContent = forwardRef(
  function MetricContent2({
    IndicatorIconProps,
    IndicatorIconComponent,
    className,
    value,
    subvalue,
    ...restProps
  }, ref) {
    const targetWindow = useWindow();
    useComponentCssInjection({
      testId: "salt-metric-content",
      css: css_248z,
      window: targetWindow
    });
    const {
      direction,
      showIndicator,
      indicatorPosition,
      size = "medium",
      valueId,
      titleId,
      subtitleId
    } = useMetricContext();
    const iconSize = size === "large" ? 2 : 1;
    const valueComponentMap = {
      small: Display3,
      medium: Display2,
      large: Display1
    };
    const ValueComponent = valueComponentMap[size];
    const iconProps = {
      "aria-label": direction,
      className: withBaseName("indicator"),
      name: direction ? `movement-${direction}` : "",
      size: iconSize,
      ...IndicatorIconProps
    };
    const IconComponent = IndicatorIconComponent != null ? IndicatorIconComponent : direction ? iconComponentMap[direction] : void 0;
    const icon = showIndicator && IconComponent ? /* @__PURE__ */ jsx(IconComponent, {
      ...iconProps
    }) : null;
    return /* @__PURE__ */ jsxs("div", {
      ...restProps,
      className: clsx(withBaseName(), className),
      "aria-labelledby": `${titleId || ""} ${subtitleId || ""}`,
      ref,
      children: [
        /* @__PURE__ */ jsxs("div", {
          className: withBaseName("value-container"),
          children: [
            indicatorPosition === "start" && icon,
            /* @__PURE__ */ jsx(ValueComponent, {
              "data-testid": "metric-value",
              id: valueId,
              className: withBaseName("value"),
              children: value
            }),
            indicatorPosition === "end" && icon
          ]
        }),
        subvalue && /* @__PURE__ */ jsx(Text, {
          className: withBaseName("subvalue"),
          "data-testid": "metric-subvalue",
          children: subvalue
        })
      ]
    });
  }
);

export { MetricContent };
//# sourceMappingURL=MetricContent.js.map
