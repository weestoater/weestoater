import { jsx, jsxs } from 'react/jsx-runtime';
import { makePrefixer, Text, Link } from '@salt-ds/core';
import { clsx } from 'clsx';
import { forwardRef, useCallback } from 'react';
import { useMetricContext } from './internal/MetricContext.js';
import { useWindow } from '@salt-ds/window';
import { useComponentCssInjection } from '@salt-ds/styles';
import css_248z from './MetricHeader.css.js';

const withBaseName = makePrefixer("saltMetricHeader");
const MetricHeader = forwardRef(
  function MetricHeader2({ SubtitleLinkProps, className, title, subtitle, ...restProps }, ref) {
    const targetWindow = useWindow();
    useComponentCssInjection({
      testId: "salt-metric-header",
      css: css_248z,
      window: targetWindow
    });
    const { titleId, subtitleId, headingAriaLevel } = useMetricContext();
    const renderSubtitle = useCallback(() => {
      if (!subtitle)
        return null;
      const subtitleComponent = /* @__PURE__ */ jsx(Text, {
        id: subtitleId,
        className: withBaseName("subtitle"),
        "data-testid": "metric-subtitle",
        variant: "secondary",
        children: subtitle
      });
      if (SubtitleLinkProps) {
        const { href = "", ...restLinkProps } = SubtitleLinkProps;
        return /* @__PURE__ */ jsx(Link, {
          href,
          ...restLinkProps,
          children: subtitleComponent
        });
      }
      return subtitleComponent;
    }, [subtitle, subtitleId, SubtitleLinkProps]);
    return /* @__PURE__ */ jsxs("div", {
      ...restProps,
      className: clsx(withBaseName(), className),
      ref,
      children: [
        /* @__PURE__ */ jsx(Text, {
          styleAs: "h4",
          className: withBaseName("title"),
          "data-testid": "metric-title",
          id: titleId,
          role: "heading",
          "aria-level": headingAriaLevel,
          children: title
        }),
        renderSubtitle()
      ]
    });
  }
);

export { MetricHeader };
//# sourceMappingURL=MetricHeader.js.map
