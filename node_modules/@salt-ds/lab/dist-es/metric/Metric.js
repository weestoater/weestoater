import { jsx } from 'react/jsx-runtime';
import { makePrefixer, useId } from '@salt-ds/core';
import { clsx } from 'clsx';
import { forwardRef, useMemo } from 'react';
import { MetricContextProvider } from './internal/MetricContext.js';
import { useWindow } from '@salt-ds/window';
import { useComponentCssInjection } from '@salt-ds/styles';
import css_248z from './Metric.css.js';

const withBaseName = makePrefixer("saltMetric");
const Metric = forwardRef(function Metric2({
  className,
  children,
  direction,
  showIndicator,
  align = "left",
  orientation = "vertical",
  indicatorPosition = "end",
  headingAriaLevel = 2,
  id: idProp,
  size = "medium",
  ...restProps
}, ref) {
  const targetWindow = useWindow();
  useComponentCssInjection({
    testId: "salt-metric",
    css: css_248z,
    window: targetWindow
  });
  const id = useId(idProp);
  const titleId = `metric-title-${id}`;
  const subtitleId = `metric-subtitle-${id}`;
  const valueId = `metric-value-${id}`;
  const value = useMemo(
    () => ({
      align,
      direction,
      orientation,
      showIndicator,
      indicatorPosition,
      headingAriaLevel,
      size,
      titleId,
      subtitleId,
      valueId
    }),
    [
      align,
      direction,
      orientation,
      showIndicator,
      indicatorPosition,
      headingAriaLevel,
      size,
      titleId,
      subtitleId,
      valueId
    ]
  );
  return /* @__PURE__ */ jsx(MetricContextProvider, {
    value,
    children: /* @__PURE__ */ jsx("div", {
      ...restProps,
      className: clsx(
        withBaseName(),
        withBaseName(`size-${size}`),
        {
          [withBaseName(`direction-${direction}`)]: direction,
          [withBaseName(`orientation-${orientation}`)]: orientation,
          [withBaseName(`align-${align}`)]: align
        },
        className
      ),
      id,
      ref,
      children
    })
  });
});

export { Metric };
//# sourceMappingURL=Metric.js.map
