import { jsx, jsxs, Fragment } from 'react/jsx-runtime';
import { makePrefixer, FlexItem, FlexLayout } from '@salt-ds/core';
import { clsx } from 'clsx';
import { forwardRef, useEffect } from 'react';
import { useIsViewportLargerThanBreakpoint } from '../utils/useIsViewportLargerThanBreakpoint.js';
import { useWindow } from '@salt-ds/window';
import { useComponentCssInjection } from '@salt-ds/styles';
import css_248z from './ParentChildLayout.css.js';

const withBaseName = makePrefixer("saltParentChildLayout");
const ParentChildLayout = forwardRef(function ParentChildLayout2({
  collapseAtBreakpoint = "sm",
  collapsedViewElement = "parent",
  disableAnimations = false,
  parentPosition = "left",
  parent,
  child,
  gap = 0,
  className,
  onCollapseChange,
  ...rest
}, ref) {
  const targetWindow = useWindow();
  useComponentCssInjection({
    testId: "salt-parent-child-layout",
    css: css_248z,
    window: targetWindow
  });
  const isCollapsed = useIsViewportLargerThanBreakpoint(collapseAtBreakpoint);
  const collapsedViewChildren = {
    parent: /* @__PURE__ */ jsx(FlexItem, {
      className: clsx(withBaseName("parent"), {
        ["saltFlexItem-stacked"]: isCollapsed
      }),
      children: parent
    }),
    child: /* @__PURE__ */ jsx(FlexItem, {
      className: clsx(withBaseName("child"), {
        ["saltFlexItem-stacked"]: isCollapsed
      }),
      children: child
    })
  };
  useEffect(() => {
    onCollapseChange == null ? void 0 : onCollapseChange(isCollapsed);
  }, [isCollapsed, onCollapseChange]);
  return /* @__PURE__ */ jsx(FlexLayout, {
    ref,
    className: clsx(
      withBaseName(),
      {
        [withBaseName(`no-animations`)]: disableAnimations,
        [withBaseName(`reversed`)]: parentPosition === "right"
      },
      className
    ),
    gap,
    ...rest,
    children: isCollapsed ? collapsedViewChildren[collapsedViewElement] : /* @__PURE__ */ jsxs(Fragment, {
      children: [
        /* @__PURE__ */ jsx(FlexItem, {
          grow: 0,
          children: parent
        }),
        /* @__PURE__ */ jsx(FlexItem, {
          grow: 2,
          children: child
        })
      ]
    })
  });
});

export { ParentChildLayout };
//# sourceMappingURL=ParentChildLayout.js.map
