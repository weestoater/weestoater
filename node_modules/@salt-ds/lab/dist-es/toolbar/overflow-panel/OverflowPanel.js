import { jsxs, jsx } from 'react/jsx-runtime';
import { makePrefixer, useIdMemo, useControlled, Button } from '@salt-ds/core';
import { OverflowMenuIcon } from '@salt-ds/icons';
import { clsx } from 'clsx';
import React, { forwardRef, useRef, useCallback } from 'react';
import { ToolbarField } from '../toolbar-field/ToolbarField.js';
import { OverflowSeparator } from './OverflowSeparator.js';
import '../../common-hooks/collectionProvider.js';
import '../../common-hooks/keyUtils.js';
import { useCollectionItems } from '../../common-hooks/useCollectionItems.js';
import { useKeyboardNavigationPanel } from '../../common-hooks/useKeyboardNavigationPanel.js';
import '../../responsive/useResizeObserver.js';
import { DropdownBase } from '../../dropdown/DropdownBase.js';
import '../../dropdown/DropdownButton.js';
import '../../dropdown/Dropdown.js';
import '../../form-field-context-legacy/FormFieldLegacyContext.js';
import css_248z from './OverflowPanel.css.js';
import { useWindow } from '@salt-ds/window';
import { useComponentCssInjection } from '@salt-ds/styles';

const withBaseName = makePrefixer("saltOverflowPanel");
const OverflowPanel = forwardRef(function DropdownPanel({
  children,
  className,
  defaultIsOpen,
  isOpen: isOpenProp,
  onOpenChange,
  triggerButtonIcon,
  triggerButtonLabel,
  ...props
}, forwardedRef) {
  const targetWindow = useWindow();
  useComponentCssInjection({
    testId: "salt-overflow-panel",
    css: css_248z,
    window: targetWindow
  });
  const id = useIdMemo();
  const collectionHook = useCollectionItems({
    id,
    children
  });
  const triggerRef = useRef(null);
  const [isOpen, setIsOpen] = useControlled({
    controlled: isOpenProp,
    default: defaultIsOpen || false,
    name: "DropdownPanel"
  });
  const { highlightedIndex: highlightedIdx, ...keyboardHook } = useKeyboardNavigationPanel({
    cycleFocus: true,
    defaultHighlightedIndex: 0,
    focusOnHighlight: true,
    indexPositions: collectionHook.data
  });
  const focusTrigger = useCallback(() => {
    if (triggerRef.current) {
      triggerRef.current.focus();
    }
  }, []);
  const setPanelRef = useCallback((el) => el == null ? void 0 : el.focus(), []);
  const handleItemClick = (evt) => {
    setIsOpen(false);
    focusTrigger();
  };
  const handleOpenChange = (open) => {
    setIsOpen(open);
    onOpenChange == null ? void 0 : onOpenChange(open);
  };
  const getTriggerButtonIcon = () => (triggerButtonIcon != null ? triggerButtonIcon : triggerButtonLabel === void 0) ? /* @__PURE__ */ jsx(OverflowMenuIcon, {}) : void 0;
  return /* @__PURE__ */ jsxs(DropdownBase, {
    ...props,
    className: clsx(withBaseName(), className),
    isOpen,
    onOpenChange: handleOpenChange,
    placement: "bottom-end",
    ref: forwardedRef,
    children: [
      /* @__PURE__ */ jsxs(Button, {
        variant: "secondary",
        ref: triggerRef,
        children: [
          getTriggerButtonIcon(),
          triggerButtonLabel
        ]
      }),
      /* @__PURE__ */ jsx("div", {
        className: withBaseName("content"),
        ref: setPanelRef,
        tabIndex: -1,
        ...keyboardHook.listProps,
        children: collectionHook.data.map((item) => {
          const { type } = item.value;
          if (type === OverflowSeparator) {
            return item.value;
          } else {
            const formFieldProps = {
              id: item.id,
              inOverflowPanel: true,
              key: item.id,
              onClick: handleItemClick
            };
            if (type === ToolbarField) {
              return React.cloneElement(
                item.value,
                formFieldProps
              );
            } else {
              return /* @__PURE__ */ jsx(ToolbarField, {
                ...formFieldProps,
                children: item.value
              });
            }
          }
        })
      })
    ]
  });
});

export { OverflowPanel };
//# sourceMappingURL=OverflowPanel.js.map
