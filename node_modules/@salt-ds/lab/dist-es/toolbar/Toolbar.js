import { jsx, jsxs } from 'react/jsx-runtime';
import { useIdMemo, useForkRef } from '@salt-ds/core';
import { clsx } from 'clsx';
import { forwardRef, useRef, Children, cloneElement } from 'react';
import { OverflowPanel } from './overflow-panel/OverflowPanel.js';
import { OverflowSeparator } from './overflow-panel/OverflowSeparator.js';
import { isOverflowed } from '../responsive/overflowUtils.js';
import '../responsive/useResizeObserver.js';
import { useOverflowCollectionItems } from '../responsive/useOverflowCollectionItems.js';
import { useOverflowLayout } from '../responsive/useOverflowLayout.js';
import { renderToolbarItems } from './internal/renderToolbarItems.js';
import { Tooltray } from './Tooltray.js';
import { useWindow } from '@salt-ds/window';
import { useComponentCssInjection } from '@salt-ds/styles';
import css_248z from './Toolbar.css.js';

const classBase = "saltToolbar";
const Toolbar = forwardRef(
  function Toolbar2(props, ref) {
    const {
      TooltipComponent,
      "aria-label": ariaLabel,
      "aria-labelledby": ariaLabelledBy,
      children,
      className,
      id: idProp,
      overflowButtonIcon,
      overflowButtonLabel,
      overflowButtonPlacement = "end",
      responsive = true,
      disabled = false,
      orientation = "horizontal",
      ...restProp
    } = props;
    const targetWindow = useWindow();
    useComponentCssInjection({
      testId: "salt-toolbar",
      css: css_248z,
      window: targetWindow
    });
    const toolbarId = useIdMemo(idProp);
    const containerRef = useRef(null);
    const setContainerRef = useForkRef(ref, containerRef);
    const collectionHook = useOverflowCollectionItems({
      children,
      id: toolbarId,
      orientation,
      label: "Toolbar"
    });
    const [innerContainerRef] = useOverflowLayout({
      collectionHook,
      id: toolbarId,
      orientation,
      label: "Toolbar"
    });
    const overflowedItems = collectionHook.data.filter(isOverflowed);
    const overflowMenuItems = overflowedItems.reduce(
      (items, item, i, arr) => {
        const { element, id } = item;
        if (element.type === Tooltray) {
          const tooltrayProps = element.props;
          const nestedElements = tooltrayProps.children;
          items.push(
            ...Children.map(
              nestedElements,
              (el) => cloneElement(el, {
                "data-is-inside-panel": true,
                key: id
              })
            )
          );
          if (i < arr.length - 1) {
            items.push(/* @__PURE__ */ jsx(OverflowSeparator, {}, `separator-${i}`));
          }
        } else {
          items.push(
            cloneElement(element, {
              key: id,
              "data-is-inside-panel": true
            })
          );
        }
        return items;
      },
      []
    );
    const overflowIndicator = collectionHook.data.find(
      (i) => i.isOverflowIndicator
    );
    const overflowPanel = overflowIndicator ? /* @__PURE__ */ jsx(OverflowPanel, {
      className: clsx("saltToolbarField"),
      "data-index": collectionHook.data.length,
      "data-overflow-indicator": true,
      "data-priority": 1,
      id: overflowIndicator.id,
      triggerButtonIcon: overflowButtonIcon,
      triggerButtonLabel: overflowButtonLabel,
      children: overflowMenuItems
    }) : null;
    return /* @__PURE__ */ jsx("div", {
      "aria-label": ariaLabel,
      "aria-labelledby": clsx(toolbarId, ariaLabelledBy),
      "aria-orientation": orientation,
      className: clsx(classBase, className, {
        [`${classBase}-disabled`]: disabled,
        [`${classBase}-nonResponsive`]: !responsive
      }),
      id: toolbarId,
      ref: setContainerRef,
      role: "toolbar",
      ...restProp,
      children: /* @__PURE__ */ jsxs("div", {
        className: "Responsive-inner",
        ref: innerContainerRef,
        "data-collapsing": collectionHook.data.some((item) => item.collapsing),
        children: [
          overflowButtonPlacement === "start" && overflowPanel,
          renderToolbarItems(collectionHook, overflowedItems, orientation),
          overflowButtonPlacement === "end" && overflowPanel
        ]
      })
    });
  }
);

export { Toolbar };
//# sourceMappingURL=Toolbar.js.map
