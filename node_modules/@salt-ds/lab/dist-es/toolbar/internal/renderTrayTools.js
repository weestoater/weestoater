import React, { createElement } from 'react';
import { isResponsiveAttribute, liftResponsivePropsToFormField } from '../../responsive/utils.js';
import { ToolbarField } from '../toolbar-field/ToolbarField.js';

const renderTrayTools = (collectionHook, overflowedItems, orientation, collapsed) => {
  if (collapsed) {
    return [];
  }
  let index = -1;
  const items = collectionHook.data.filter((item) => !item.isOverflowIndicator);
  return items.map((item) => {
    var _a;
    index += 1;
    const props = item.element.props;
    const overflowed = overflowedItems.findIndex((i) => i.index === index) === -1 ? void 0 : true;
    const toolbarItemProps = {
      "data-index": index,
      "data-priority": (_a = props["data-priority"]) != null ? _a : 2,
      "data-overflowed": overflowed,
      id: item.id,
      orientation
    };
    if (item.element.type === ToolbarField) {
      return React.cloneElement(item.element, {
        key: index,
        ...toolbarItemProps
      });
    } else {
      if (Object.keys(props).some(isResponsiveAttribute)) {
        const [toolbarProps, restProps] = liftResponsivePropsToFormField(props);
        return /* @__PURE__ */ createElement(ToolbarField, {
          ...toolbarProps,
          ...toolbarItemProps,
          "data-index": index,
          "data-priority": 2,
          key: index,
          "data-orientation": orientation
        }, React.cloneElement(item.element, { ...restProps }));
      } else {
        return /* @__PURE__ */ createElement(ToolbarField, {
          ...toolbarItemProps,
          "data-index": index,
          "data-overflowed": overflowed,
          "data-priority": 2,
          key: index,
          "data-orientation": orientation
        }, React.cloneElement(item.element, {
          id: `tooltray-control-${item.id}`
        }));
      }
    }
  });
};

export { renderTrayTools };
//# sourceMappingURL=renderTrayTools.js.map
