import { jsx, Fragment } from 'react/jsx-runtime';
import { forwardRef, useState, useRef, isValidElement, cloneElement } from 'react';
import { createPortal } from 'react-dom';
import { useForkRef, useIsomorphicLayoutEffect, ownerDocument, SaltProvider } from '@salt-ds/core';

function getContainer(container) {
  return typeof container === "function" ? container() : container;
}
const DEFAULT_ID = "portal-root";
const Portal = forwardRef(function Portal2({
  children,
  container: containerProp = document.body,
  disablePortal = false,
  id = DEFAULT_ID
}, ref) {
  var _a;
  const [mounted, setMounted] = useState(false);
  const portalRef = useRef(null);
  const handleRef = useForkRef(
    isValidElement(children) ? children.ref : null,
    ref
  );
  const container = (_a = getContainer(containerProp)) != null ? _a : document.body;
  useIsomorphicLayoutEffect(() => {
    const root = ownerDocument(container).getElementById(id);
    if (root) {
      portalRef.current = root;
    } else {
      portalRef.current = ownerDocument(container).createElement("div");
      portalRef.current.id = id;
    }
    const el = portalRef.current;
    if (!container.contains(el)) {
      container.appendChild(el);
    }
    setMounted(true);
  }, [id, container]);
  if (disablePortal) {
    if (isValidElement(children)) {
      return cloneElement(children, {
        ref: handleRef
      });
    }
    return /* @__PURE__ */ jsx(Fragment, {
      children
    });
  }
  if (mounted && portalRef.current && children) {
    return createPortal(
      /* @__PURE__ */ jsx(SaltProvider, {
        children
      }),
      portalRef.current
    );
  }
  return null;
});

export { Portal };
//# sourceMappingURL=Portal.js.map
