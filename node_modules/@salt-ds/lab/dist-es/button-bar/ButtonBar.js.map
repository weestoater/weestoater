{"version":3,"file":"ButtonBar.js","sources":["../src/button-bar/ButtonBar.tsx"],"sourcesContent":["import {\n  Children,\n  forwardRef,\n  HTMLAttributes,\n  ReactNode,\n  useMemo,\n} from \"react\";\nimport { clsx } from \"clsx\";\n\nimport { ButtonBarContext } from \"./internal/ButtonBarContext\";\nimport { DescendantProvider } from \"./internal/DescendantContext\";\nimport { useDescendants } from \"./internal/useDescendants\";\nimport { ButtonVariant, makePrefixer } from \"@salt-ds/core\";\n\nimport { useWindow } from \"@salt-ds/window\";\nimport { useComponentCssInjection } from \"@salt-ds/styles\";\n\nimport buttonBarCss from \"./ButtonBar.css\";\n\nexport type PartialRecord<K extends keyof any, T> = Partial<Record<K, T>>;\n\ntype ButtonBarOrderKey = \"order\" | \"alignLeftOrder\" | \"stackOrder\";\nexport type ButtonBarSortOrder = \"asc\" | \"desc\";\n\nexport const DefaultButtonsOrderByVariant: Record<\n  ButtonVariant,\n  Record<ButtonBarOrderKey, number>\n> = {\n  cta: {\n    order: 0,\n    alignLeftOrder: 1,\n    stackOrder: 2,\n  },\n  primary: {\n    order: 1,\n    alignLeftOrder: 2,\n    stackOrder: 1,\n  },\n  secondary: {\n    order: 2,\n    alignLeftOrder: 0,\n    stackOrder: 0,\n  },\n};\n\ntype OrderedButtonData = { variant?: ButtonVariant } & PartialRecord<\n  ButtonBarOrderKey,\n  number\n>;\n\nfunction getPriorityForButton(\n  item: OrderedButtonData,\n  field: ButtonBarOrderKey\n) {\n  const variant = item?.variant || \"primary\";\n  return item?.[field] ?? DefaultButtonsOrderByVariant[variant][field];\n}\nconst createComparatorForField = (\n  field: ButtonBarOrderKey,\n  sort: ButtonBarSortOrder,\n  alignLeft: boolean,\n  childrenData: Array<OrderedButtonData>\n) => {\n  let equalityResult: number;\n  if (field === \"order\" || field === \"stackOrder\") {\n    equalityResult = sort === \"asc\" ? 1 : 0;\n  } else {\n    equalityResult = alignLeft ? 1 : -1;\n  }\n\n  function createDescComparator(indexA: number, indexB: number) {\n    const priorityA = getPriorityForButton(childrenData[indexA], field);\n    const priorityB = getPriorityForButton(childrenData[indexB], field);\n    if (priorityA == null && priorityB == null) {\n      return 0;\n    }\n    if (priorityA == null) {\n      return 1;\n    }\n    if (priorityB == null) {\n      return -1;\n    }\n    if (priorityA === priorityB) {\n      return equalityResult;\n    }\n    return priorityB - priorityA;\n  }\n\n  function createAscComparator(indexA: number, indexB: number) {\n    return createDescComparator(indexA, indexB) * -1;\n  }\n\n  return sort === \"asc\" ? createAscComparator : createDescComparator;\n};\n\nfunction alignSecondaryChild(\n  orderedChildrenData: Array<OrderedButtonData & { index: number }>,\n  sortOrder: ButtonBarSortOrder,\n  alignLeft: boolean\n): { index?: number; align?: \"left\" | \"right\" } {\n  const noSecondaryChildren = { index: undefined, align: undefined };\n  if (sortOrder === \"asc\" || alignLeft) {\n    const firstSecondaryChildIndex = orderedChildrenData.findIndex(\n      (childData) => childData.variant === \"secondary\"\n    );\n\n    if (firstSecondaryChildIndex !== -1) {\n      const originalChildIndex =\n        orderedChildrenData[firstSecondaryChildIndex].index;\n      return { index: originalChildIndex, align: \"right\" };\n    } else {\n      return noSecondaryChildren;\n    }\n  } else {\n    let index = orderedChildrenData.length;\n    while (index--) {\n      if (orderedChildrenData[index].variant === \"secondary\") {\n        return { index: orderedChildrenData[index].index, align: \"left\" };\n      }\n    }\n    return noSecondaryChildren;\n  }\n}\n\nexport interface ButtonBarProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * By default ButtonBar lays buttons from right to left horizontally ordering action buttons by order prop.\n   * Use this prop to lay button from left to right instead.\n   * Actions buttons will be ordered by alignLeftOrder prop.\n   */\n  alignLeft?: boolean;\n  /**\n   * A list of OrderButtons. Required to have some children.\n   */\n  children: ReactNode;\n  /**\n   * The className(s) of the component\n   */\n  className?: string;\n  /**\n   * By default ButtonBar aligns secondary buttons to the left while displayed horizontally\n   * and to the right while aligned left or sorting ascending.\n   * Use this prop to disable this behavior.\n   */\n  disableAutoAlignment?: boolean;\n  /**\n   * By default ButtonBar sorts buttons in descending order.\n   * Use this prop to change that when the button bar is NOT stacked and aligned left.\n   */\n  sortAlignLeft?: ButtonBarSortOrder;\n  /**\n   * By default ButtonBar sorts buttons in descending order.\n   * Use this prop to change that when the button bar is NOT stacked and NOT aligned left.\n   */\n  sortOrder?: ButtonBarSortOrder;\n  /**\n   * By default ButtonBar sorts buttons in descending order.\n   * Use this prop to change that when the button bar is stacked.\n   */\n  sortStackOrder?: ButtonBarSortOrder;\n  /**\n   * When the viewport is equal to or smaller than the breakpoint the buttons will be stacked vertically.\n   * Alternatively pass a screen width number in pixels.\n   * Use `0` to disable this feature. Defaults to 'xs'.\n   * Actions buttons will be ordered by stackOrder prop.\n   */\n  stackAtBreakpoint?: \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\" | number;\n}\n\nconst withBaseName = makePrefixer(\"saltButtonBar\");\n\nexport const ButtonBar = forwardRef<HTMLDivElement, ButtonBarProps>(\n  function ButtonBar(\n    {\n      alignLeft = false,\n      children: childrenProp,\n      className,\n      disableAutoAlignment,\n      sortAlignLeft = \"desc\",\n      sortOrder = \"desc\",\n      sortStackOrder = \"desc\",\n      stackAtBreakpoint = \"xs\",\n      ...rest\n    },\n    ref\n  ) {\n    const targetWindow = useWindow();\n    useComponentCssInjection({\n      testId: \"salt-button-bar\",\n      css: buttonBarCss,\n      window: targetWindow,\n    });\n\n    const [childrenData, setChildrenData] = useDescendants<OrderedButtonData>();\n    // TODO: we need a mechanism to work with breakpoints.\n    const matches = false;\n\n    const childrenArray = Children.toArray(childrenProp);\n    const childrenIndexes = childrenArray.map((_, index) => index);\n    const stackOrderComparator = createComparatorForField(\n      \"stackOrder\",\n      sortStackOrder,\n      alignLeft,\n      childrenData\n    );\n    const orderComparator = createComparatorForField(\n      \"order\",\n      sortOrder,\n      alignLeft,\n      childrenData\n    );\n    const alignLeftComparator = createComparatorForField(\n      \"alignLeftOrder\",\n      sortAlignLeft,\n      alignLeft,\n      childrenData\n    );\n\n    let orderedChildrenIndexes: number[];\n\n    if (childrenData.length !== childrenIndexes.length) {\n      orderedChildrenIndexes = childrenIndexes;\n    } else {\n      orderedChildrenIndexes = matches\n        ? childrenIndexes.sort(stackOrderComparator)\n        : childrenIndexes.sort(\n            alignLeft ? alignLeftComparator : orderComparator\n          );\n    }\n\n    let secondaryChildAlignment: { index?: number; align?: \"left\" | \"right\" } =\n      {\n        index: undefined,\n        align: undefined,\n      };\n    if (!disableAutoAlignment) {\n      secondaryChildAlignment = alignSecondaryChild(\n        orderedChildrenIndexes.map((index) => ({\n          index,\n          ...childrenData[index],\n        })),\n        sortOrder,\n        alignLeft\n      );\n    }\n\n    const hasSecondaryButtons = childrenData.some(\n      (buttonData) => buttonData.variant === \"secondary\"\n    );\n\n    const orderedChildren = orderedChildrenIndexes.map(\n      (index) => childrenArray[index]\n    );\n\n    const buttonBarContextValue = useMemo(\n      () => ({\n        matches,\n        alignedIndex: secondaryChildAlignment.index,\n        align: secondaryChildAlignment.align,\n      }),\n      [matches, secondaryChildAlignment.align, secondaryChildAlignment.index]\n    );\n\n    return (\n      <ButtonBarContext.Provider value={buttonBarContextValue}>\n        <DescendantProvider items={childrenData} setItems={setChildrenData}>\n          <div\n            aria-label=\"button bar\"\n            className={clsx(\n              withBaseName(),\n              {\n                [withBaseName(\"stacked\")]: matches,\n                [withBaseName(\"alignLeft\")]: alignLeft,\n                [withBaseName(\"autoAligning\")]:\n                  hasSecondaryButtons && !disableAutoAlignment,\n              },\n              className\n            )}\n            ref={ref}\n            role=\"region\"\n            {...rest}\n          >\n            {orderedChildren}\n          </div>\n        </DescendantProvider>\n      </ButtonBarContext.Provider>\n    );\n  }\n);\n"],"names":["ButtonBar","buttonBarCss"],"mappings":"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"}