import { orientationType } from "../../responsive";
import { Direction } from "./dragDropTypes";
export declare type MeasuredDropTarget = {
    currentIndex: number;
    dataIndex?: number;
    element: HTMLElement;
    index: number;
    isDraggedElement: boolean;
    isOverflowIndicator?: boolean;
    start: number;
    end: number;
    mid: number;
    size: number;
};
export declare type targetType = {
    element: HTMLElement | null;
    index: number;
    isLast?: boolean;
};
declare type Dimension = keyof Pick<DOMRect, "width" | "height">;
export declare const measureElementSizeAndPosition: (element: HTMLElement, dimension?: Dimension, includeAutoMargin?: boolean) => number[];
export declare const dimensions: (orientation: orientationType) => {
    CLIENT_SIZE: "scrollTop" | "scrollWidth" | "scrollHeight" | "clientHeight" | "clientWidth" | "scrollLeft";
    CONTRA: "x" | "y" | "height" | "width" | "left" | "right" | "top" | "bottom";
    CONTRA_POS: "clientX" | "clientY";
    DIMENSION: "height" | "width";
    END: "x" | "y" | "height" | "width" | "left" | "right" | "top" | "bottom";
    POS: "clientX" | "clientY";
    SCROLL_POS: "scrollTop" | "scrollWidth" | "scrollHeight" | "clientHeight" | "clientWidth" | "scrollLeft";
    SCROLL_SIZE: "scrollTop" | "scrollWidth" | "scrollHeight" | "clientHeight" | "clientWidth" | "scrollLeft";
    START: "x" | "y" | "height" | "width" | "left" | "right" | "top" | "bottom";
} | {
    CLIENT_SIZE: "scrollTop" | "scrollWidth" | "scrollHeight" | "clientHeight" | "clientWidth" | "scrollLeft";
    CONTRA: "x" | "y" | "height" | "width" | "left" | "right" | "top" | "bottom";
    CONTRA_POS: "clientX" | "clientY";
    DIMENSION: "height" | "width";
    END: "x" | "y" | "height" | "width" | "left" | "right" | "top" | "bottom";
    POS: "clientX" | "clientY";
    SCROLL_POS: "scrollTop" | "scrollWidth" | "scrollHeight" | "clientHeight" | "clientWidth" | "scrollLeft";
    SCROLL_SIZE: "scrollTop" | "scrollWidth" | "scrollHeight" | "clientHeight" | "clientWidth" | "scrollLeft";
    START: "x" | "y" | "height" | "width" | "left" | "right" | "top" | "bottom";
};
export declare const getDraggedItem: (measuredItems: MeasuredDropTarget[]) => MeasuredDropTarget;
export declare const moveDragItem: (measuredItems: MeasuredDropTarget[], dropTarget: MeasuredDropTarget) => MeasuredDropTarget[];
export declare const isDraggedElement: (item: MeasuredDropTarget) => boolean;
export declare const measureDropTargets: (container: HTMLElement, orientation: orientationType, draggedItem: HTMLElement, itemQuery?: string | undefined) => MeasuredDropTarget[];
export declare const getNextDropTarget: (dropTargets: MeasuredDropTarget[], pos: number, direction: Direction) => MeasuredDropTarget | null;
export {};
