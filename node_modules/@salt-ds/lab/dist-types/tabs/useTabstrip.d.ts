import { RefObject } from "react";
import { ContainerNavigationProps } from "./useKeyboardNavigation";
import { dragStrategy, DragHookResult } from "./drag-drop";
import { ExitEditModeHandler, EditableItemHookResult } from "./useEditableItem";
import { OverflowCollectionHookResult } from "../responsive";
import { composableTabProps, navigationProps, TabDescriptor, TabElement } from "./TabsTypes";
interface tabstripHookProps {
    activeTabIndex?: number | null;
    allowDragDrop?: boolean | dragStrategy;
    collectionHook: OverflowCollectionHookResult;
    defaultActiveTabIndex?: number;
    defaultTabs?: TabDescriptor[];
    editing?: boolean;
    enableAddTab: boolean;
    idRoot: string;
    innerContainerRef: RefObject<HTMLDivElement>;
    keyBoardActivation?: "manual" | "automatic";
    onActiveChange?: (tabIndex: number) => void;
    onCloseTab?: (indexPosition: number) => void;
    onEnterEditMode?: () => void;
    onExitEditMode?: ExitEditModeHandler;
    onMoveTab?: (fromIndex: number, toIndex: number) => void;
    orientation: "horizontal" | "vertical";
    promptForNewTabName?: boolean;
    tabs?: TabDescriptor[] | TabElement[];
}
interface tabstripHookResult extends DragHookResult, Pick<EditableItemHookResult, "editing"> {
    activateTab: (tabIndex: number) => void;
    activeTabIndex: number | null;
    addTab: (indexPosition?: number) => void;
    closeTab: (indexPosition: number) => void;
    containerProps: ContainerNavigationProps;
    controlledSelection: boolean;
    highlightedIdx: number;
    focusVisible: number;
    focusIsWithinComponent: boolean;
    focusTab: (tabIndex: number, immediateFocus?: boolean) => void;
    navigationProps: navigationProps;
    tabProps: composableTabProps;
}
export declare const useTabstrip: ({ activeTabIndex: activeTabIndexProp, allowDragDrop, collectionHook, defaultActiveTabIndex, editing: editingProp, idRoot, innerContainerRef, keyBoardActivation, onActiveChange, onCloseTab, onEnterEditMode, onExitEditMode, onMoveTab, orientation, promptForNewTabName, }: tabstripHookProps) => tabstripHookResult & DragHookResult;
export {};
