import { ListHookProps, ListHookResult } from "../list";
import { DropdownHookResult, DropdownHookProps } from "../dropdown";
import { SelectionStrategy } from "../common-hooks";
import { InputLegacyProps as InputProps } from "../input-legacy";
export interface ComboboxHookProps<Item, Strategy extends SelectionStrategy> extends Partial<Omit<DropdownHookProps, "id" | "onKeyDown">>, Pick<InputProps, "onBlur" | "onChange" | "onFocus" | "onSelect">, Omit<ListHookProps<Item, Strategy>, "containerRef" | "defaultSelected" | "selected" | "onSelect"> {
    InputProps?: InputProps;
    allowFreeText?: boolean;
    ariaLabel?: string;
    defaultValue?: string;
    id: string;
    itemToString?: (item: Item) => string;
    stringToItem?: (value?: string) => Item | null | undefined;
    value?: string;
}
export interface ComboboxHookResult<Item, Selection extends SelectionStrategy> extends Pick<ListHookResult<Item, Selection>, "focusVisible" | "highlightedIndex" | "listControlProps" | "listHandlers" | "selected">, Partial<DropdownHookResult> {
    inputProps: InputProps;
    onOpenChange: (isOpen: boolean) => void;
}
export declare const useCombobox: <Item, Selection_1 extends SelectionStrategy = "default">({ allowFreeText, ariaLabel, collectionHook, defaultIsOpen, defaultValue, disabled, onBlur, onFocus, onChange, onSelect, id, isOpen: isOpenProp, itemToString, onOpenChange, onSelectionChange, selectionStrategy, stringToItem, value: valueProp, InputProps: inputProps, }: ComboboxHookProps<Item, Selection_1>) => ComboboxHookResult<Item, Selection_1>;
