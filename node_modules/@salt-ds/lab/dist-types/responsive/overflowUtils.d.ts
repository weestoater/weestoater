import { ElementRef, OverflowItem, orientationType } from "./overflowTypes";
export declare const DropdownPlaceholder: () => null;
export declare const getDropdownPlaceholder: () => JSX.Element;
export declare type heightOrWidth = "width" | "height";
export declare const NO_DATA: {};
export declare const allExceptOverflowIndicator: (sum: number, m: OverflowItem) => number;
export declare const isCollapsed: (item: OverflowItem) => boolean;
export declare const isCollapsing: (item: OverflowItem) => boolean;
export declare const isCollapsedOrCollapsing: (item: OverflowItem) => boolean;
export declare const isOverflowed: (item: OverflowItem) => boolean;
export declare const notOverflowed: (item: OverflowItem) => boolean;
export declare const isCollapsible: (item: OverflowItem) => boolean;
export declare const getIsOverflowed: (managedItems: OverflowItem[]) => boolean;
export declare const measureContainer: (ref: ElementRef, orientation?: orientationType) => {
    innerContainerSize: number;
    rootContainerDepth: number;
    innerContainerDepth: number;
};
export declare const measureContainerOverflow: (ref: ElementRef, orientation?: orientationType) => {
    isOverflowing: boolean;
    innerContainerSize: number;
    rootContainerDepth: number;
};
/**
 * Compute element size including margin.
 * Exclude margin where this has been applied for alignment, via margin: auto
 * which can be identified by the data-pad-end, data-pad-start attributes.
 **/
export declare function measureElementSize(element: HTMLElement, dimension?: heightOrWidth, includeAutoMargin?: boolean): number;
export declare const byDescendingPriority: (m1: OverflowItem, m2: OverflowItem) => number;
export declare const getOverflowIndicator: (managedItems: OverflowItem[]) => OverflowItem<"child"> | undefined;
export declare const popNextItemByPriority: (items: OverflowItem[]) => OverflowItem | null;
export declare const measureOverflowItems: (items: OverflowItem[], dimension: heightOrWidth) => OverflowItem[];
export declare const addAll: (sum: number, m: OverflowItem) => number;
export declare const getElementForItem: (ref: ElementRef, item: OverflowItem) => HTMLElement;
declare type dimension = "left" | "right" | "top" | "bottom";
export declare const getRuntimePadding: (el: HTMLElement, ...dimensions: dimension[]) => number[];
export {};
