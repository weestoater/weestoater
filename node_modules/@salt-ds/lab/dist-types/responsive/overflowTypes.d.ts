import { ReactElement, ReactNode, RefObject } from "react";
import { OverflowAction as overflowAction2 } from "./OverflowReducer";
declare type dimension = "width" | "height" | "scrollWidth" | "scrollHeight";
declare type dimensions = {
    size: dimension;
    depth: dimension;
    scrollDepth: dimension;
};
export declare type dimensionsType = {
    horizontal: dimensions;
    vertical: dimensions;
};
export declare type orientationType = keyof dimensionsType;
export declare type collapsibleType = "instant" | "dynamic";
interface NonNullableRefObject<T> {
    current: T;
}
export declare type FilterPredicate = (item: OverflowItem) => boolean;
export declare type ElementRef = RefObject<HTMLDivElement>;
export interface OverflowSource {
    id?: string;
    label: string;
    editable?: boolean;
    closeable?: boolean;
    position?: number;
    priority?: number;
}
export declare type InjectedSourceItem = {
    source: OverflowSource;
};
export declare type InjectedChildItem = {
    element: JSX.Element;
};
export declare type InjectedItem = InjectedChildItem | InjectedSourceItem;
export declare type overflowItemType = "source" | "child";
export declare type OverflowItem<T extends overflowItemType = "child"> = {
    collapsed?: boolean;
    collapsible?: collapsibleType;
    collapsing?: boolean;
    disabled?: boolean;
    element: T extends "child" ? ReactElement : null;
    fullSize: number | null;
    id: string;
    index: number;
    isInjectedItem?: boolean;
    isOverflowIndicator?: boolean;
    label?: string;
    minSize?: number;
    overflowed?: boolean;
    position?: number;
    priority: number;
    reclaimSpace?: boolean;
    reclaimedSpace?: boolean;
    size: number;
    source: T extends "source" ? any : null;
    type: overflowItemType;
    editable?: boolean;
    closeable?: boolean;
};
export declare type OverflowItems = OverflowItem<"source" | "child">[];
export declare type ManagedListRef = NonNullableRefObject<OverflowItem[]>;
export declare type overflowState = {
    overflowIndicatorSize: number;
    visibleItems: OverflowItem[];
};
export declare type overflowAction = {
    type: string;
    managedItems?: OverflowItem[];
    managedItem?: OverflowItem;
};
export declare type overflowDispatch = (action: overflowAction2) => void;
export declare type OverflowCollectionOptions = {
    closeable?: boolean;
    editable?: boolean;
    getPriority?: (item: any, index: number) => number | undefined;
};
export declare type OverflowCollectionHookProps = {
    children?: ReactNode;
    defaultSource?: OverflowSource[];
    id: string;
    injectedItems?: InjectedItem[];
    label?: string;
    options?: OverflowCollectionOptions;
    orientation: orientationType;
    source?: OverflowSource[];
};
export declare type OverflowCollectionHookResult = {
    data: OverflowItem[];
    dispatch: (action: overflowAction2 | {
        type: "reset";
    }) => void;
    isControlled: boolean;
    version: number;
};
export interface OverflowLayoutHookProps {
    collectionHook: OverflowCollectionHookResult;
    disableOverflow?: boolean;
    id: string;
    label?: string;
    orientation: orientationType;
}
export interface OverflowHookProps {
    collectionHook: OverflowCollectionHookResult;
    dispatchOverflowAction?: overflowDispatch;
    id?: string;
    innerContainerSize?: number;
    label?: string;
    overflowContainerRef: ElementRef;
    orientation: orientationType;
    hasOverflowedItems?: boolean;
    overflowItemsRef: ManagedListRef;
}
export interface OverflowHookResult {
    onResize: (size: number, containerHasGrown?: boolean) => void;
    resetMeasurements?: (isOverflowing: boolean, innerContainerSize: number) => boolean | undefined;
}
export interface InstantCollapseHookResult extends Omit<OverflowHookResult, "resetMeasurements"> {
    resetMeasurements: (isOverflowing?: boolean) => boolean | undefined;
}
export interface DynamicCollapseHookResult extends Omit<OverflowHookResult, "resetMeasurements"> {
    resetMeasurements: () => boolean | undefined;
}
export {};
