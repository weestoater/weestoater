import { FocusEvent, KeyboardEvent, RefObject, SyntheticEvent } from "react";
export interface UseListProps {
    /**
     * If true, all items in list will be disabled.
     */
    disabled?: boolean;
    highlightedItem?: string;
    selected?: string;
    defaultSelected?: string;
    onChange?: (e: SyntheticEvent, data: {
        value: string | undefined;
    }) => void;
    onSelect?: (e: SyntheticEvent, data: {
        value: string;
    }) => void;
    id?: string;
    ref: RefObject<HTMLUListElement>;
}
export declare const useList: ({ disabled, highlightedItem: highlightedItemProp, selected: selectedProp, defaultSelected, onChange, onSelect, id, ref, }: UseListProps) => {
    focusHandler: (event: FocusEvent<HTMLUListElement | HTMLElement>) => void;
    keyDownHandler: (event: KeyboardEvent<HTMLElement>) => void;
    blurHandler: () => void;
    mouseOverHandler: () => void;
    activeDescendant: string | undefined;
    selectedItem: string | undefined;
    highlightedItem: string | undefined;
    setSelectedItem: import("react").Dispatch<import("react").SetStateAction<string | undefined>>;
    setHighlightedItem: import("react").Dispatch<import("react").SetStateAction<string | undefined>>;
    contextValue: {
        disabled: boolean;
        id: string | undefined;
        select: (event: SyntheticEvent<HTMLLIElement>) => void;
        isSelected: (value: string) => boolean;
        isFocused: (value: string) => boolean;
        highlight: (event: SyntheticEvent<HTMLLIElement>) => void;
        isHighlighted: (value: string) => boolean;
    };
    focusVisibleRef: import("react").Ref<HTMLElement>;
};
