import { KeyboardEvent, KeyboardEventHandler, MouseEvent, RefObject, SyntheticEvent } from "react";
import { ExpandButtonProps } from "../../tokenized-input";
import { MultiSelectComboBoxProps } from "./MultiSelectComboBox";
export declare type UseMultiSelectComboBoxProps<Item> = Omit<MultiSelectComboBoxProps<Item>, "inputRef" | "listContext" | "inputHelpers" | "inputProps" | "listProps"> & {
    expandButtonRef: RefObject<HTMLElement>;
};
export declare const useMultiSelectComboBox: <Item>(props: Omit<UseMultiSelectComboBoxProps<Item>, "rootRef" | "classes">) => {
    inputHelpers: import("../../tokenized-input").TokenizedInputHelpers<Item>;
    inputRef: import("react").Ref<any>;
    listContext: {
        state: import("../../list-deprecated").ListState<Item, "multiple">;
        helpers: import("../../list-deprecated").ListHelpers<Item, "multiple">;
    };
    inputProps: {
        selectedItems: Item[];
        allowAnnouncement: boolean;
        id: string;
        value: string;
        ExpandButtonProps: ExpandButtonProps;
        InputProps: {
            inputProps: {
                role: string;
                "aria-roledescription": string;
                accept?: string | undefined;
                alt?: string | undefined;
                autoComplete?: string | undefined;
                autoFocus?: boolean | undefined;
                capture?: boolean | "user" | "environment" | undefined;
                checked?: boolean | undefined;
                crossOrigin?: "" | "anonymous" | "use-credentials" | undefined;
                disabled?: boolean | undefined;
                enterKeyHint?: "search" | "enter" | "done" | "go" | "next" | "previous" | "send" | undefined;
                form?: string | undefined;
                formAction?: string | undefined;
                formEncType?: string | undefined;
                formMethod?: string | undefined;
                formNoValidate?: boolean | undefined;
                formTarget?: string | undefined;
                height?: string | number | undefined;
                list?: string | undefined;
                max?: string | number | undefined;
                maxLength?: number | undefined;
                min?: string | number | undefined;
                minLength?: number | undefined;
                multiple?: boolean | undefined;
                name?: string | undefined;
                pattern?: string | undefined;
                placeholder?: string | undefined;
                readOnly?: boolean | undefined;
                required?: boolean | undefined;
                size?: number | undefined;
                src?: string | undefined;
                step?: string | number | undefined;
                type?: import("react").HTMLInputTypeAttribute | undefined;
                value?: string | number | readonly string[] | undefined;
                width?: string | number | undefined;
                onChange?: import("react").ChangeEventHandler<HTMLInputElement> | undefined;
                defaultChecked?: boolean | undefined;
                defaultValue?: string | number | readonly string[] | undefined;
                suppressContentEditableWarning?: boolean | undefined;
                suppressHydrationWarning?: boolean | undefined;
                accessKey?: string | undefined;
                className?: string | undefined;
                contentEditable?: (boolean | "true" | "false") | "inherit" | undefined;
                contextMenu?: string | undefined;
                dir?: string | undefined;
                draggable?: (boolean | "true" | "false") | undefined;
                hidden?: boolean | undefined;
                id?: string | undefined;
                lang?: string | undefined;
                nonce?: string | undefined;
                slot?: string | undefined;
                spellCheck?: (boolean | "true" | "false") | undefined;
                style?: import("react").CSSProperties | undefined;
                tabIndex?: number | undefined;
                title?: string | undefined;
                translate?: "yes" | "no" | undefined;
                radioGroup?: string | undefined;
                about?: string | undefined;
                datatype?: string | undefined;
                inlist?: any;
                prefix?: string | undefined;
                property?: string | undefined;
                resource?: string | undefined;
                typeof?: string | undefined;
                vocab?: string | undefined;
                autoCapitalize?: string | undefined;
                autoCorrect?: string | undefined;
                autoSave?: string | undefined;
                color?: string | undefined;
                itemProp?: string | undefined;
                itemScope?: boolean | undefined;
                itemType?: string | undefined;
                itemID?: string | undefined;
                itemRef?: string | undefined;
                results?: number | undefined;
                security?: string | undefined;
                unselectable?: "on" | "off" | undefined;
                inputMode?: "text" | "none" | "search" | "tel" | "url" | "email" | "numeric" | "decimal" | undefined;
                is?: string | undefined;
                'aria-activedescendant'?: string | undefined;
                'aria-atomic'?: (boolean | "true" | "false") | undefined;
                'aria-autocomplete'?: "list" | "none" | "both" | "inline" | undefined;
                'aria-busy'?: (boolean | "true" | "false") | undefined;
                'aria-checked'?: boolean | "true" | "false" | "mixed" | undefined;
                'aria-colcount'?: number | undefined;
                'aria-colindex'?: number | undefined;
                'aria-colspan'?: number | undefined;
                'aria-controls'?: string | undefined;
                'aria-current'?: boolean | "time" | "true" | "false" | "step" | "date" | "page" | "location" | undefined;
                'aria-describedby'?: string | undefined;
                'aria-details'?: string | undefined;
                'aria-disabled'?: (boolean | "true" | "false") | undefined;
                'aria-dropeffect'?: "link" | "none" | "copy" | "move" | "execute" | "popup" | undefined;
                'aria-errormessage'?: string | undefined;
                'aria-expanded'?: (boolean | "true" | "false") | undefined;
                'aria-flowto'?: string | undefined;
                'aria-grabbed'?: (boolean | "true" | "false") | undefined;
                'aria-haspopup'?: boolean | "dialog" | "menu" | "true" | "false" | "grid" | "listbox" | "tree" | undefined;
                'aria-hidden'?: (boolean | "true" | "false") | undefined;
                'aria-invalid'?: boolean | "true" | "false" | "grammar" | "spelling" | undefined;
                'aria-keyshortcuts'?: string | undefined;
                'aria-label'?: string | undefined;
                'aria-labelledby'?: string | undefined;
                'aria-level'?: number | undefined;
                'aria-live'?: "off" | "assertive" | "polite" | undefined;
                'aria-modal'?: (boolean | "true" | "false") | undefined;
                'aria-multiline'?: (boolean | "true" | "false") | undefined;
                'aria-multiselectable'?: (boolean | "true" | "false") | undefined;
                'aria-orientation'?: "horizontal" | "vertical" | undefined;
                'aria-owns'?: string | undefined;
                'aria-placeholder'?: string | undefined;
                'aria-posinset'?: number | undefined;
                'aria-pressed'?: boolean | "true" | "false" | "mixed" | undefined;
                'aria-readonly'?: (boolean | "true" | "false") | undefined;
                'aria-relevant'?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
                'aria-required'?: (boolean | "true" | "false") | undefined;
                'aria-rowcount'?: number | undefined;
                'aria-rowindex'?: number | undefined;
                'aria-rowspan'?: number | undefined;
                'aria-selected'?: (boolean | "true" | "false") | undefined;
                'aria-setsize'?: number | undefined;
                'aria-sort'?: "none" | "ascending" | "descending" | "other" | undefined;
                'aria-valuemax'?: number | undefined;
                'aria-valuemin'?: number | undefined;
                'aria-valuenow'?: number | undefined;
                'aria-valuetext'?: string | undefined;
                children?: import("react").ReactNode;
                dangerouslySetInnerHTML?: {
                    __html: string;
                } | undefined;
                onCopy?: import("react").ClipboardEventHandler<HTMLInputElement> | undefined;
                onCopyCapture?: import("react").ClipboardEventHandler<HTMLInputElement> | undefined;
                onCut?: import("react").ClipboardEventHandler<HTMLInputElement> | undefined;
                onCutCapture?: import("react").ClipboardEventHandler<HTMLInputElement> | undefined;
                onPaste?: import("react").ClipboardEventHandler<HTMLInputElement> | undefined;
                onPasteCapture?: import("react").ClipboardEventHandler<HTMLInputElement> | undefined;
                onCompositionEnd?: import("react").CompositionEventHandler<HTMLInputElement> | undefined;
                onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLInputElement> | undefined;
                onCompositionStart?: import("react").CompositionEventHandler<HTMLInputElement> | undefined;
                onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLInputElement> | undefined;
                onCompositionUpdate?: import("react").CompositionEventHandler<HTMLInputElement> | undefined;
                onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLInputElement> | undefined;
                onFocus?: import("react").FocusEventHandler<HTMLInputElement> | undefined;
                onFocusCapture?: import("react").FocusEventHandler<HTMLInputElement> | undefined;
                onBlur?: import("react").FocusEventHandler<HTMLInputElement> | undefined;
                onBlurCapture?: import("react").FocusEventHandler<HTMLInputElement> | undefined;
                onChangeCapture?: import("react").FormEventHandler<HTMLInputElement> | undefined;
                onBeforeInput?: import("react").FormEventHandler<HTMLInputElement> | undefined;
                onBeforeInputCapture?: import("react").FormEventHandler<HTMLInputElement> | undefined;
                onInput?: import("react").FormEventHandler<HTMLInputElement> | undefined;
                onInputCapture?: import("react").FormEventHandler<HTMLInputElement> | undefined;
                onReset?: import("react").FormEventHandler<HTMLInputElement> | undefined;
                onResetCapture?: import("react").FormEventHandler<HTMLInputElement> | undefined;
                onSubmit?: import("react").FormEventHandler<HTMLInputElement> | undefined;
                onSubmitCapture?: import("react").FormEventHandler<HTMLInputElement> | undefined;
                onInvalid?: import("react").FormEventHandler<HTMLInputElement> | undefined;
                onInvalidCapture?: import("react").FormEventHandler<HTMLInputElement> | undefined;
                onLoad?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
                onLoadCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
                onError?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
                onErrorCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
                onKeyDown?: KeyboardEventHandler<HTMLInputElement> | undefined;
                onKeyDownCapture?: KeyboardEventHandler<HTMLInputElement> | undefined;
                onKeyPress?: KeyboardEventHandler<HTMLInputElement> | undefined;
                onKeyPressCapture?: KeyboardEventHandler<HTMLInputElement> | undefined;
                onKeyUp?: KeyboardEventHandler<HTMLInputElement> | undefined;
                onKeyUpCapture?: KeyboardEventHandler<HTMLInputElement> | undefined;
                onAbort?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
                onAbortCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
                onCanPlay?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
                onCanPlayCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
                onCanPlayThrough?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
                onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
                onDurationChange?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
                onDurationChangeCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
                onEmptied?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
                onEmptiedCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
                onEncrypted?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
                onEncryptedCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
                onEnded?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
                onEndedCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
                onLoadedData?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
                onLoadedDataCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
                onLoadedMetadata?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
                onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
                onLoadStart?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
                onLoadStartCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
                onPause?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
                onPauseCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
                onPlay?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
                onPlayCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
                onPlaying?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
                onPlayingCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
                onProgress?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
                onProgressCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
                onRateChange?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
                onRateChangeCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
                onResize?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
                onResizeCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
                onSeeked?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
                onSeekedCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
                onSeeking?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
                onSeekingCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
                onStalled?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
                onStalledCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
                onSuspend?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
                onSuspendCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
                onTimeUpdate?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
                onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
                onVolumeChange?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
                onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
                onWaiting?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
                onWaitingCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
                onAuxClick?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
                onAuxClickCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
                onClick?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
                onClickCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
                onContextMenu?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
                onContextMenuCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
                onDoubleClick?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
                onDoubleClickCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
                onDrag?: import("react").DragEventHandler<HTMLInputElement> | undefined;
                onDragCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
                onDragEnd?: import("react").DragEventHandler<HTMLInputElement> | undefined;
                onDragEndCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
                onDragEnter?: import("react").DragEventHandler<HTMLInputElement> | undefined;
                onDragEnterCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
                onDragExit?: import("react").DragEventHandler<HTMLInputElement> | undefined;
                onDragExitCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
                onDragLeave?: import("react").DragEventHandler<HTMLInputElement> | undefined;
                onDragLeaveCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
                onDragOver?: import("react").DragEventHandler<HTMLInputElement> | undefined;
                onDragOverCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
                onDragStart?: import("react").DragEventHandler<HTMLInputElement> | undefined;
                onDragStartCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
                onDrop?: import("react").DragEventHandler<HTMLInputElement> | undefined;
                onDropCapture?: import("react").DragEventHandler<HTMLInputElement> | undefined;
                onMouseDown?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
                onMouseDownCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
                onMouseEnter?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
                onMouseLeave?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
                onMouseMove?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
                onMouseMoveCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
                onMouseOut?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
                onMouseOutCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
                onMouseOver?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
                onMouseOverCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
                onMouseUp?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
                onMouseUpCapture?: import("react").MouseEventHandler<HTMLInputElement> | undefined;
                onSelect?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
                onSelectCapture?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
                onTouchCancel?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
                onTouchCancelCapture?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
                onTouchEnd?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
                onTouchEndCapture?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
                onTouchMove?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
                onTouchMoveCapture?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
                onTouchStart?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
                onTouchStartCapture?: import("react").TouchEventHandler<HTMLInputElement> | undefined;
                onPointerDown?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
                onPointerDownCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
                onPointerMove?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
                onPointerMoveCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
                onPointerUp?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
                onPointerUpCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
                onPointerCancel?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
                onPointerCancelCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
                onPointerEnter?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
                onPointerEnterCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
                onPointerLeave?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
                onPointerLeaveCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
                onPointerOver?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
                onPointerOverCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
                onPointerOut?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
                onPointerOutCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
                onGotPointerCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
                onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
                onLostPointerCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
                onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLInputElement> | undefined;
                onScroll?: import("react").UIEventHandler<HTMLInputElement> | undefined;
                onScrollCapture?: import("react").UIEventHandler<HTMLInputElement> | undefined;
                onWheel?: import("react").WheelEventHandler<HTMLInputElement> | undefined;
                onWheelCapture?: import("react").WheelEventHandler<HTMLInputElement> | undefined;
                onAnimationStart?: import("react").AnimationEventHandler<HTMLInputElement> | undefined;
                onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLInputElement> | undefined;
                onAnimationEnd?: import("react").AnimationEventHandler<HTMLInputElement> | undefined;
                onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLInputElement> | undefined;
                onAnimationIteration?: import("react").AnimationEventHandler<HTMLInputElement> | undefined;
                onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLInputElement> | undefined;
                onTransitionEnd?: import("react").TransitionEventHandler<HTMLInputElement> | undefined;
                onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLInputElement> | undefined;
            };
            'aria-describedby'?: string | undefined;
        };
        onKeyDown: (event: KeyboardEvent<HTMLInputElement | HTMLButtonElement | HTMLDivElement>) => void;
        slot?: string | undefined;
        style?: import("react").CSSProperties | undefined;
        title?: string | undefined;
        className?: string | undefined;
        color?: string | undefined;
        lang?: string | undefined;
        role?: import("react").AriaRole | undefined;
        tabIndex?: number | undefined;
        'aria-activedescendant'?: string | undefined;
        'aria-atomic'?: (boolean | "true" | "false") | undefined;
        'aria-autocomplete'?: "list" | "none" | "both" | "inline" | undefined;
        'aria-busy'?: (boolean | "true" | "false") | undefined;
        'aria-checked'?: boolean | "true" | "false" | "mixed" | undefined;
        'aria-colcount'?: number | undefined;
        'aria-colindex'?: number | undefined;
        'aria-colspan'?: number | undefined;
        'aria-controls'?: string | undefined;
        'aria-current'?: boolean | "time" | "true" | "false" | "step" | "date" | "page" | "location" | undefined;
        'aria-describedby'?: string | undefined;
        'aria-details'?: string | undefined;
        'aria-disabled'?: (boolean | "true" | "false") | undefined;
        'aria-dropeffect'?: "link" | "none" | "copy" | "move" | "execute" | "popup" | undefined;
        'aria-errormessage'?: string | undefined;
        'aria-expanded'?: (boolean | "true" | "false") | undefined;
        'aria-flowto'?: string | undefined;
        'aria-grabbed'?: (boolean | "true" | "false") | undefined;
        'aria-haspopup'?: boolean | "dialog" | "menu" | "true" | "false" | "grid" | "listbox" | "tree" | undefined;
        'aria-hidden'?: (boolean | "true" | "false") | undefined;
        'aria-invalid'?: boolean | "true" | "false" | "grammar" | "spelling" | undefined;
        'aria-keyshortcuts'?: string | undefined;
        'aria-label'?: string | undefined;
        'aria-labelledby'?: string | undefined;
        'aria-level'?: number | undefined;
        'aria-live'?: "off" | "assertive" | "polite" | undefined;
        'aria-modal'?: (boolean | "true" | "false") | undefined;
        'aria-multiline'?: (boolean | "true" | "false") | undefined;
        'aria-multiselectable'?: (boolean | "true" | "false") | undefined;
        'aria-orientation'?: "horizontal" | "vertical" | undefined;
        'aria-owns'?: string | undefined;
        'aria-placeholder'?: string | undefined;
        'aria-posinset'?: number | undefined;
        'aria-pressed'?: boolean | "true" | "false" | "mixed" | undefined;
        'aria-readonly'?: (boolean | "true" | "false") | undefined;
        'aria-relevant'?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
        'aria-required'?: (boolean | "true" | "false") | undefined;
        'aria-roledescription'?: string | undefined;
        'aria-rowcount'?: number | undefined;
        'aria-rowindex'?: number | undefined;
        'aria-rowspan'?: number | undefined;
        'aria-selected'?: (boolean | "true" | "false") | undefined;
        'aria-setsize'?: number | undefined;
        'aria-sort'?: "none" | "ascending" | "descending" | "other" | undefined;
        'aria-valuemax'?: number | undefined;
        'aria-valuemin'?: number | undefined;
        'aria-valuenow'?: number | undefined;
        'aria-valuetext'?: string | undefined;
        children?: import("react").ReactNode;
        dangerouslySetInnerHTML?: {
            __html: string;
        } | undefined;
        onCopy?: import("react").ClipboardEventHandler<HTMLDivElement> | undefined;
        onCopyCapture?: import("react").ClipboardEventHandler<HTMLDivElement> | undefined;
        onCut?: import("react").ClipboardEventHandler<HTMLDivElement> | undefined;
        onCutCapture?: import("react").ClipboardEventHandler<HTMLDivElement> | undefined;
        onPaste?: import("react").ClipboardEventHandler<HTMLDivElement> | undefined;
        onPasteCapture?: import("react").ClipboardEventHandler<HTMLDivElement> | undefined;
        onCompositionEnd?: import("react").CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionStart?: import("react").CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionUpdate?: import("react").CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLDivElement> | undefined;
        onFocus?: import("react").FocusEventHandler<HTMLButtonElement | HTMLInputElement> | undefined;
        onFocusCapture?: import("react").FocusEventHandler<HTMLDivElement> | undefined;
        onBlur?: import("react").FocusEventHandler<HTMLButtonElement | HTMLInputElement> | undefined;
        onBlurCapture?: import("react").FocusEventHandler<HTMLDivElement> | undefined;
        onChangeCapture?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onBeforeInput?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onBeforeInputCapture?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onInput?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onInputCapture?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onReset?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onResetCapture?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onSubmit?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onSubmitCapture?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onInvalid?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onInvalidCapture?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onLoad?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onLoadCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onError?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onErrorCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onKeyDownCapture?: KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyPress?: KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyPressCapture?: KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyUp?: KeyboardEventHandler<HTMLInputElement> | undefined;
        onKeyUpCapture?: KeyboardEventHandler<HTMLDivElement> | undefined;
        onAbort?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onAbortCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onCanPlay?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onCanPlayCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onCanPlayThrough?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onDurationChange?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onDurationChangeCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onEmptied?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onEmptiedCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onEncrypted?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onEncryptedCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onEnded?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onEndedCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onLoadedData?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onLoadedDataCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onLoadedMetadata?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onLoadStart?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onLoadStartCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onPause?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onPauseCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onPlay?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onPlayCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onPlaying?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onPlayingCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onProgress?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onProgressCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onRateChange?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onRateChangeCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onResize?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onResizeCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onSeeked?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onSeekedCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onSeeking?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onSeekingCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onStalled?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onStalledCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onSuspend?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onSuspendCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onTimeUpdate?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onVolumeChange?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onWaiting?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onWaitingCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onAuxClick?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onAuxClickCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onClick?: ((event: SyntheticEvent<HTMLElement, Event>) => void) | undefined;
        onClickCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onContextMenu?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onContextMenuCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onDoubleClick?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onDoubleClickCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onDrag?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragEnd?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragEndCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragEnter?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragEnterCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragExit?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragExitCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragLeave?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragLeaveCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragOver?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragOverCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragStart?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragStartCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDrop?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDropCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onMouseDown?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseDownCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseEnter?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseLeave?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseMove?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseMoveCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseOut?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseOutCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseOver?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseOverCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseUp?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseUpCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onSelect?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onSelectCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onTouchCancel?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
        onTouchCancelCapture?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
        onTouchEnd?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
        onTouchEndCapture?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
        onTouchMove?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
        onTouchMoveCapture?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
        onTouchStart?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
        onTouchStartCapture?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
        onPointerDown?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerDownCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerMove?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerMoveCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerUp?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerUpCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerCancel?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerCancelCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerEnter?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerEnterCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerLeave?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerLeaveCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerOver?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerOverCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerOut?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerOutCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onGotPointerCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onLostPointerCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onScroll?: import("react").UIEventHandler<HTMLDivElement> | undefined;
        onScrollCapture?: import("react").UIEventHandler<HTMLDivElement> | undefined;
        onWheel?: import("react").WheelEventHandler<HTMLDivElement> | undefined;
        onWheelCapture?: import("react").WheelEventHandler<HTMLDivElement> | undefined;
        onAnimationStart?: import("react").AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationEnd?: import("react").AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationIteration?: import("react").AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLDivElement> | undefined;
        onTransitionEnd?: import("react").TransitionEventHandler<HTMLDivElement> | undefined;
        onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLDivElement> | undefined;
        defaultChecked?: boolean | undefined;
        defaultValue?: string | number | readonly string[] | undefined;
        suppressContentEditableWarning?: boolean | undefined;
        suppressHydrationWarning?: boolean | undefined;
        accessKey?: string | undefined;
        contentEditable?: (boolean | "true" | "false") | "inherit" | undefined;
        contextMenu?: string | undefined;
        dir?: string | undefined;
        draggable?: (boolean | "true" | "false") | undefined;
        hidden?: boolean | undefined;
        nonce?: string | undefined;
        placeholder?: string | undefined;
        spellCheck?: (boolean | "true" | "false") | undefined;
        translate?: "yes" | "no" | undefined;
        radioGroup?: string | undefined;
        about?: string | undefined;
        datatype?: string | undefined;
        inlist?: any;
        prefix?: string | undefined;
        property?: string | undefined;
        resource?: string | undefined;
        typeof?: string | undefined;
        vocab?: string | undefined;
        autoCapitalize?: string | undefined;
        autoCorrect?: string | undefined;
        autoSave?: string | undefined;
        itemProp?: string | undefined;
        itemScope?: boolean | undefined;
        itemType?: string | undefined;
        itemID?: string | undefined;
        itemRef?: string | undefined;
        results?: number | undefined;
        security?: string | undefined;
        unselectable?: "on" | "off" | undefined;
        inputMode?: "text" | "none" | "search" | "tel" | "url" | "email" | "numeric" | "decimal" | undefined;
        is?: string | undefined;
        disabled?: boolean | undefined;
        expanded?: boolean | undefined;
        focused?: boolean | undefined;
        inputRef?: import("react").Ref<HTMLInputElement> | undefined;
        itemToString?: import("../../tokenized-input").ItemToString<Item> | undefined;
        highlightedIndex?: number | undefined;
        onClear?: import("react").ReactEventHandler<Element> | undefined;
        onInputFocus?: import("react").FocusEventHandler<HTMLInputElement> | undefined;
        onInputBlur?: import("react").FocusEventHandler<HTMLInputElement> | undefined;
        onInputChange?: import("react").ChangeEventHandler<HTMLInputElement> | undefined;
        onInputSelect?: import("react").ReactEventHandler<HTMLInputElement> | undefined;
        activeIndices?: number[] | undefined;
        expandButtonRef?: import("react").Ref<HTMLButtonElement> | undefined;
        onRemoveItem?: import("../../tokenized-input").RemoveItemHandler | undefined;
    };
    listProps: {
        source: readonly Item[];
        itemToString: (item: Item) => string;
        itemTextHighlightPattern: RegExp | undefined;
        onClick: (event: MouseEvent<HTMLDivElement>) => void;
        isListOpen: boolean;
        disableTypeToSelect?: boolean | undefined;
        getItemIndex?: ((item: Item) => number) | undefined;
        highlightedIndex?: number | undefined;
        initialSelectedItem?: Item[] | undefined;
        onChange?: import("../../list-deprecated").ListChangeHandler<Item, "multiple"> | undefined;
        onSelect?: import("../../list-deprecated").ListSelectHandler<Item> | undefined;
        selectedItem?: Item[] | undefined;
        selectionVariant?: "multiple" | undefined;
        tabToSelect?: boolean | undefined;
        ListItem?: any;
        ListPlaceholder?: any;
        borderless?: boolean | undefined;
        disableFocus?: boolean | undefined;
        disableMouseDown?: boolean | undefined;
        disabled?: boolean | undefined;
        displayedItemCount?: number | undefined;
        getItemAtIndex?: ((index: number) => Item) | undefined;
        getItemHeight?: ((index?: number | undefined) => number) | undefined;
        getItemId?: ((index: number) => string) | undefined;
        height?: string | number | undefined;
        itemCount?: number | undefined;
        itemGapSize?: number | undefined;
        itemHeight?: string | number | undefined;
        listRef?: import("react").Ref<HTMLElement> | undefined;
        maxHeight?: string | number | undefined;
        maxWidth?: string | number | undefined;
        minHeight?: string | number | undefined;
        minWidth?: string | number | undefined;
        overscanCount?: number | undefined;
        restoreLastFocus?: boolean | undefined;
        virtualized?: boolean | undefined;
        width?: string | number | undefined;
        slot?: string | undefined;
        style?: import("react").CSSProperties | undefined;
        title?: string | undefined;
        className?: string | undefined;
        color?: string | undefined;
        id?: string | undefined;
        lang?: string | undefined;
        role: (import("react").AriaRole | undefined) & string;
        tabIndex?: number | undefined;
        'aria-atomic'?: (boolean | "true" | "false") | undefined;
        'aria-autocomplete'?: "list" | "none" | "both" | "inline" | undefined;
        'aria-busy'?: (boolean | "true" | "false") | undefined;
        'aria-checked'?: boolean | "true" | "false" | "mixed" | undefined;
        'aria-colcount'?: number | undefined;
        'aria-colindex'?: number | undefined;
        'aria-colspan'?: number | undefined;
        'aria-controls'?: string | undefined;
        'aria-current'?: boolean | "time" | "true" | "false" | "step" | "date" | "page" | "location" | undefined;
        'aria-describedby'?: string | undefined;
        'aria-details'?: string | undefined;
        'aria-disabled'?: (boolean | "true" | "false") | undefined;
        'aria-dropeffect'?: "link" | "none" | "copy" | "move" | "execute" | "popup" | undefined;
        'aria-errormessage'?: string | undefined;
        'aria-expanded'?: (boolean | "true" | "false") | undefined;
        'aria-flowto'?: string | undefined;
        'aria-grabbed'?: (boolean | "true" | "false") | undefined;
        'aria-haspopup'?: boolean | "dialog" | "menu" | "true" | "false" | "grid" | "listbox" | "tree" | undefined;
        'aria-hidden'?: (boolean | "true" | "false") | undefined;
        'aria-invalid'?: boolean | "true" | "false" | "grammar" | "spelling" | undefined;
        'aria-keyshortcuts'?: string | undefined;
        'aria-label'?: string | undefined;
        'aria-labelledby'?: string | undefined;
        'aria-level'?: number | undefined;
        'aria-live'?: "off" | "assertive" | "polite" | undefined;
        'aria-modal'?: (boolean | "true" | "false") | undefined;
        'aria-multiline'?: (boolean | "true" | "false") | undefined;
        'aria-multiselectable'?: (boolean | "true" | "false") | undefined;
        'aria-orientation'?: "horizontal" | "vertical" | undefined;
        'aria-owns'?: string | undefined;
        'aria-placeholder'?: string | undefined;
        'aria-posinset'?: number | undefined;
        'aria-pressed'?: boolean | "true" | "false" | "mixed" | undefined;
        'aria-readonly'?: (boolean | "true" | "false") | undefined;
        'aria-relevant'?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
        'aria-required'?: (boolean | "true" | "false") | undefined;
        'aria-roledescription'?: string | undefined;
        'aria-rowcount'?: number | undefined;
        'aria-rowindex'?: number | undefined;
        'aria-rowspan'?: number | undefined;
        'aria-selected'?: (boolean | "true" | "false") | undefined;
        'aria-setsize'?: number | undefined;
        'aria-sort'?: "none" | "ascending" | "descending" | "other" | undefined;
        'aria-valuemax'?: number | undefined;
        'aria-valuemin'?: number | undefined;
        'aria-valuenow'?: number | undefined;
        'aria-valuetext'?: string | undefined;
        children?: import("react").ReactNode;
        dangerouslySetInnerHTML?: {
            __html: string;
        } | undefined;
        onCopy?: import("react").ClipboardEventHandler<HTMLDivElement> | undefined;
        onCopyCapture?: import("react").ClipboardEventHandler<HTMLDivElement> | undefined;
        onCut?: import("react").ClipboardEventHandler<HTMLDivElement> | undefined;
        onCutCapture?: import("react").ClipboardEventHandler<HTMLDivElement> | undefined;
        onPaste?: import("react").ClipboardEventHandler<HTMLDivElement> | undefined;
        onPasteCapture?: import("react").ClipboardEventHandler<HTMLDivElement> | undefined;
        onCompositionEnd?: import("react").CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionEndCapture?: import("react").CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionStart?: import("react").CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionStartCapture?: import("react").CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionUpdate?: import("react").CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionUpdateCapture?: import("react").CompositionEventHandler<HTMLDivElement> | undefined;
        onFocus?: import("react").FocusEventHandler<HTMLDivElement> | undefined;
        onFocusCapture?: import("react").FocusEventHandler<HTMLDivElement> | undefined;
        onBlur?: import("react").FocusEventHandler<HTMLDivElement> | undefined;
        onBlurCapture?: import("react").FocusEventHandler<HTMLDivElement> | undefined;
        onChangeCapture?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onBeforeInput?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onBeforeInputCapture?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onInput?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onInputCapture?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onReset?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onResetCapture?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onSubmit?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onSubmitCapture?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onInvalid?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onInvalidCapture?: import("react").FormEventHandler<HTMLDivElement> | undefined;
        onLoad?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onLoadCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onError?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onErrorCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onKeyDown?: KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyDownCapture?: KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyPress?: KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyPressCapture?: KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyUp?: KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyUpCapture?: KeyboardEventHandler<HTMLDivElement> | undefined;
        onAbort?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onAbortCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onCanPlay?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onCanPlayCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onCanPlayThrough?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onCanPlayThroughCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onDurationChange?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onDurationChangeCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onEmptied?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onEmptiedCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onEncrypted?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onEncryptedCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onEnded?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onEndedCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onLoadedData?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onLoadedDataCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onLoadedMetadata?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onLoadedMetadataCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onLoadStart?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onLoadStartCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onPause?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onPauseCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onPlay?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onPlayCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onPlaying?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onPlayingCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onProgress?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onProgressCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onRateChange?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onRateChangeCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onResize?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onResizeCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onSeeked?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onSeekedCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onSeeking?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onSeekingCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onStalled?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onStalledCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onSuspend?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onSuspendCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onTimeUpdate?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onTimeUpdateCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onVolumeChange?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onVolumeChangeCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onWaiting?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onWaitingCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onAuxClick?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onAuxClickCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onClickCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onContextMenu?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onContextMenuCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onDoubleClick?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onDoubleClickCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onDrag?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragEnd?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragEndCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragEnter?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragEnterCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragExit?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragExitCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragLeave?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragLeaveCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragOver?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragOverCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragStart?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDragStartCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDrop?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onDropCapture?: import("react").DragEventHandler<HTMLDivElement> | undefined;
        onMouseDown?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseDownCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseEnter?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseLeave?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseMove?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseMoveCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseOut?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseOutCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseOver?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseOverCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseUp?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onMouseUpCapture?: import("react").MouseEventHandler<HTMLDivElement> | undefined;
        onSelectCapture?: import("react").ReactEventHandler<HTMLDivElement> | undefined;
        onTouchCancel?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
        onTouchCancelCapture?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
        onTouchEnd?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
        onTouchEndCapture?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
        onTouchMove?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
        onTouchMoveCapture?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
        onTouchStart?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
        onTouchStartCapture?: import("react").TouchEventHandler<HTMLDivElement> | undefined;
        onPointerDown?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerDownCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerMove?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerMoveCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerUp?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerUpCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerCancel?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerCancelCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerEnter?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerEnterCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerLeave?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerLeaveCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerOver?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerOverCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerOut?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onPointerOutCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onGotPointerCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onGotPointerCaptureCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onLostPointerCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onLostPointerCaptureCapture?: import("react").PointerEventHandler<HTMLDivElement> | undefined;
        onScroll?: import("react").UIEventHandler<HTMLDivElement> | undefined;
        onScrollCapture?: import("react").UIEventHandler<HTMLDivElement> | undefined;
        onWheel?: import("react").WheelEventHandler<HTMLDivElement> | undefined;
        onWheelCapture?: import("react").WheelEventHandler<HTMLDivElement> | undefined;
        onAnimationStart?: import("react").AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationStartCapture?: import("react").AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationEnd?: import("react").AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationEndCapture?: import("react").AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationIteration?: import("react").AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationIterationCapture?: import("react").AnimationEventHandler<HTMLDivElement> | undefined;
        onTransitionEnd?: import("react").TransitionEventHandler<HTMLDivElement> | undefined;
        onTransitionEndCapture?: import("react").TransitionEventHandler<HTMLDivElement> | undefined;
        defaultChecked?: boolean | undefined;
        defaultValue?: string | number | readonly string[] | undefined;
        suppressContentEditableWarning?: boolean | undefined;
        suppressHydrationWarning?: boolean | undefined;
        accessKey?: string | undefined;
        contentEditable?: (boolean | "true" | "false") | "inherit" | undefined;
        contextMenu?: string | undefined;
        dir?: string | undefined;
        draggable?: (boolean | "true" | "false") | undefined;
        hidden?: boolean | undefined;
        nonce?: string | undefined;
        placeholder?: string | undefined;
        spellCheck?: (boolean | "true" | "false") | undefined;
        translate?: "yes" | "no" | undefined;
        radioGroup?: string | undefined;
        about?: string | undefined;
        datatype?: string | undefined;
        inlist?: any;
        prefix?: string | undefined;
        property?: string | undefined;
        resource?: string | undefined;
        typeof?: string | undefined;
        vocab?: string | undefined;
        autoCapitalize?: string | undefined;
        autoCorrect?: string | undefined;
        autoSave?: string | undefined;
        itemProp?: string | undefined;
        itemScope?: boolean | undefined;
        itemType?: string | undefined;
        itemID?: string | undefined;
        itemRef?: string | undefined;
        results?: number | undefined;
        security?: string | undefined;
        unselectable?: "on" | "off" | undefined;
        inputMode?: "text" | "none" | "search" | "tel" | "url" | "email" | "numeric" | "decimal" | undefined;
        is?: string | undefined;
    };
};
