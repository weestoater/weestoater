import { ComponentType, HTMLAttributes, ReactNode, Ref, RefObject } from "react";
import { IndexedListItemProps, ListProps, ListSelectionVariant } from "../../list-deprecated";
import { GetFilterRegex } from "../filterHelpers";
import { WindowProps } from "../../window";
import { InputLegacyProps as InputProps } from "../../input-legacy";
export declare type BaseComboBoxProps<Item, Variant extends ListSelectionVariant = "default"> = Omit<HTMLAttributes<HTMLDivElement>, "children" | "onChange" | "onSelect" | "onFocus" | "onBlur" | "onClick"> & Pick<ListProps<Item, Variant>, "displayedItemCount" | "itemToString" | "listRef" | "onChange" | "onSelect" | "overscanCount" | "virtualized" | "width"> & {
    ListItem?: ComponentType<IndexedListItemProps<Item>>;
    ListProps?: Partial<ListProps<Item, Variant>>;
    WindowProps?: Partial<WindowProps>;
    allowFreeText?: boolean;
    disabled?: boolean;
    getFilterRegex?: GetFilterRegex;
    initialOpen?: boolean;
    inputRef?: Ref<HTMLInputElement>;
    inputValue?: string;
    listWidth?: number | string;
    rootWidth?: string | number;
    rootRef: RefObject<HTMLElement>;
    disabledPortal?: boolean;
    source: ReadonlyArray<Item>;
};
export interface DefaultComboBoxProps<Item> extends BaseComboBoxProps<Item>, Pick<InputProps, "onFocus" | "onBlur"> {
    InputProps?: InputProps;
    initialSelectedItem?: Item;
    selectedItem?: Item;
    multiSelect?: false;
    onInputFocus?: InputProps["onFocus"];
    onInputBlur?: InputProps["onBlur"];
    onInputChange?: InputProps["onChange"];
    onInputSelect?: InputProps["onSelect"];
    stringToItem?: (value?: string) => Item | null | undefined;
}
export declare const DefaultComboBox: <Item>(props: DefaultComboBoxProps<Item>) => ReactNode;
