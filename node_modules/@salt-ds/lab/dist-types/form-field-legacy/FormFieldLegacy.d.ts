import { Dispatch, ElementType, FocusEventHandler, HTMLAttributes, SetStateAction } from "react";
import { FormActivationIndicatorProps } from "./FormActivationIndicator";
import { FormHelperTextProps } from "./FormHelperText";
import { FormLabelProps } from "./FormLabel";
import { NecessityIndicatorOptions } from "./NecessityIndicator";
import { StatusIndicatorProps } from "./StatusIndicator";
export declare type FormFieldLabelPlacement = "top" | "left";
export declare type FormFieldHelperTextPlacement = "bottom" | "tooltip";
export declare type FormFieldValidationStatus = "error" | "warning";
export interface A11yValueProps extends Pick<NecessityIndicatorOptions, "required"> {
    /**
     * If `true`, the FormField will be disabled.
     */
    disabled?: boolean;
    /** id of the helper text node */
    helperTextId?: string;
    /** id of the label node */
    labelId?: string;
    /**
     * The FormField value is Readonly
     */
    readOnly?: boolean;
    /**
     * Whether the form field needs to render helper text
     */
    renderHelperText?: boolean;
}
export interface FormFieldLegacyProps extends HTMLAttributes<HTMLDivElement>, A11yValueProps {
    /**
     * The component used for activation indicator. Default to `FormActivationIndicator`.
     */
    ActivationIndicatorComponent?: ElementType<FormActivationIndicatorProps>;
    /**
     * Outer focus ring focus will not be applied. Defaults to false.
     */
    disableFocusRing?: boolean;
    /**
     * Whether the form field is occupying full width.
     */
    fullWidth?: boolean;
    /**
     * Whether to show the StatusIndicator component for validation states.
     */
    hasStatusIndicator?: boolean;
    /**
     * The helper text content
     */
    helperText?: string;
    /**
     * The component used for the helper text. Default to `FormHelperText`.
     */
    HelperTextComponent?: ElementType<FormHelperTextProps>;
    /**
     * Location the helperText, values: 'bottom' (default) or 'tooltip'.
     */
    helperTextPlacement?: FormFieldHelperTextPlacement;
    /**
     * Props to be applied to the `HelperTextComponent`.
     *
     * Generic on `FormHelperTextProps` is omitted.
     */
    HelperTextProps?: Partial<FormHelperTextProps>;
    /**
     * The label value for the FormField
     */
    label?: string;
    /**
     * The component used for the label. Default to `FormLabel`.
     */
    LabelComponent?: ElementType;
    /**
     * Location the label, values: 'top' (default) or 'left'
     */
    labelPlacement?: FormFieldLabelPlacement;
    /**
     * Props to be applied to the `LabelComponent`
     */
    LabelProps?: Partial<FormLabelProps>;
    /**
     * Override props to be used with the StatusIndicator component
     */
    StatusIndicatorProps?: Partial<StatusIndicatorProps>;
    /**
     * The state for the FormField: Must be one of: 'error'|'warning'|undefined
     */
    validationStatus?: FormFieldValidationStatus;
    /**
     * FormField variants; defaults to primary.
     *
     * **Deprecated:** The 'tertiary' variant has been deprecated
     */
    variant?: "primary" | "secondary" | "tertiary";
}
export interface useA11yValueValue {
    "aria-labelledby": A11yValueProps["labelId"];
    "aria-required": A11yValueProps["required"];
    "aria-describedby": A11yValueProps["helperTextId"] | undefined;
    disabled: A11yValueProps["disabled"];
    readOnly: A11yValueProps["readOnly"];
}
export declare const useFormFieldLegacy: ({ onBlur, onFocus, }: {
    onBlur?: FocusEventHandler<HTMLDivElement> | undefined;
    onFocus?: FocusEventHandler<HTMLDivElement> | undefined;
}) => [{
    focused: boolean;
}, {
    setFocused: Dispatch<SetStateAction<boolean>>;
}, {
    onBlur: FocusEventHandler<HTMLDivElement>;
    onFocus: FocusEventHandler<HTMLDivElement>;
}];
export declare const FormFieldLegacy: import("react").ForwardRefExoticComponent<FormFieldLegacyProps & import("react").RefAttributes<HTMLDivElement>>;
