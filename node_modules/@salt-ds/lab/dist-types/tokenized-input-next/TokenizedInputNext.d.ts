import { ButtonProps, NecessityType, ValidationStatus } from "@salt-ds/core";
import { ChangeEventHandler, FocusEventHandler, HTMLAttributes, KeyboardEventHandler, ReactEventHandler, Ref, SyntheticEvent, TextareaHTMLAttributes } from "react";
import { TokenizedInputNextState } from "./useTokenizedInputNext";
declare type ChangeHandler<Item> = (event: SyntheticEvent, selectedItems: Item[] | undefined) => void;
declare type ExpandButtonProps = Pick<ButtonProps, "role" | "aria-roledescription" | "aria-describedby"> & {
    "aria-label"?: string;
};
export interface TokenizedInputNextProps<Item> extends Partial<TokenizedInputNextState<Item>>, Omit<HTMLAttributes<HTMLDivElement>, "onFocus" | "onBlur" | "onChange" | "onKeyUp" | "onKeyDown"> {
    ExpandButtonProps?: ExpandButtonProps;
    disabled?: boolean;
    focused?: boolean;
    expandButtonRef?: Ref<HTMLButtonElement>;
    onBlur?: FocusEventHandler<HTMLTextAreaElement | HTMLButtonElement>;
    onKeyUp?: KeyboardEventHandler<HTMLTextAreaElement | HTMLButtonElement>;
    onKeyDown?: KeyboardEventHandler<HTMLTextAreaElement | HTMLButtonElement>;
    onRemoveItem?: (event: SyntheticEvent, index: number) => void;
    onInputBlur?: FocusEventHandler<HTMLTextAreaElement>;
    onInputFocus?: FocusEventHandler<HTMLTextAreaElement>;
    onInputChange?: ChangeEventHandler<HTMLTextAreaElement>;
    onClick?: ReactEventHandler;
    onClear?: ReactEventHandler;
    delimiters?: string[];
    disableAddOnBlur?: boolean;
    defaultSelected?: Item[];
    onChange?: ChangeHandler<Item>;
    onCollapse?: ReactEventHandler;
    onExpand?: ReactEventHandler;
    /**
     * Validation status.
     */
    validationStatus?: Omit<ValidationStatus, "info">;
    /**
     * If `true`, the component is read only.
     */
    readOnly?: boolean;
    /**
     * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#Attributes) applied to the `textarea` element.
     */
    textAreaProps?: TextareaHTMLAttributes<HTMLTextAreaElement>;
    /**
     * Optional ref for the textarea component
     */
    textAreaRef?: Ref<HTMLTextAreaElement>;
    necessity?: NecessityType;
    /**
     * Styling variant. Defaults to "primary".
     */
    variant?: "primary" | "secondary";
}
export declare const TokenizedInputNext: import("react").ForwardRefExoticComponent<TokenizedInputNextProps<unknown> & import("react").RefAttributes<HTMLDivElement>>;
export {};
