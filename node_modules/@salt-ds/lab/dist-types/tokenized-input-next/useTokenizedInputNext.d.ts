import { Ref, SyntheticEvent, MutableRefObject } from "react";
import { TokenizedInputNextProps } from "./TokenizedInputNext";
export interface TokenizedInputNextState<Item> {
    activeIndices: number[];
    expanded: boolean | undefined;
    highlightedIndex: number | undefined;
    selectedItems: Item[];
    value: string | undefined;
}
export interface TokenizedInputNextHelpers<Item> {
    setHighlightedIndex: (value?: number) => void;
    setValue: (value: string) => void;
    setSelectedItems: (selectedItems: Item[]) => void;
    updateExpanded: (event: SyntheticEvent, expanded: boolean) => void;
}
export interface TokenizedInputNextRefs {
    textAreaRef: Ref<HTMLTextAreaElement>;
    pillsRef: MutableRefObject<Record<number, number | undefined>>;
    clearButtonRef: (newNode: HTMLButtonElement) => void;
    expandButtonRef: Ref<HTMLButtonElement>;
    statusAdornmentRef: Ref<SVGSVGElement>;
    containerRef: Ref<HTMLDivElement>;
}
interface useTokenizedInputNextResult<Item> {
    /**
     * The tokenized input state
     */
    state: TokenizedInputNextState<Item>;
    /**
     * First hidden element when collapsed
     */
    firstHiddenIndex: number | null;
    /**
     * Utility functions for modifying tokenized input state
     */
    helpers: TokenizedInputNextHelpers<Item>;
    /**
     * Refs for tokenized input items.
     */
    refs: TokenizedInputNextRefs;
    /**
     * Properties applied to a basic tokenized input component
     */
    inputProps: Omit<TokenizedInputNextProps<Item>, "helpers" | "onChange">;
}
export declare function useTokenizedInputNext<Item>(props: TokenizedInputNextProps<Item>): useTokenizedInputNextResult<Item>;
export {};
