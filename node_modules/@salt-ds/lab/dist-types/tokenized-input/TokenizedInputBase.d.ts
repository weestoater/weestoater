import { ChangeEventHandler, FocusEventHandler, ForwardedRef, HTMLAttributes, KeyboardEventHandler, ReactElement, ReactEventHandler, Ref, SyntheticEvent } from "react";
import { ButtonProps } from "@salt-ds/core";
import { TokenizedInputHelpers, TokenizedInputState } from "./useTokenizedInput";
import { InputLegacyProps as InputProps } from "../input-legacy";
export declare type RemoveItemHandler = (itemIndex: number) => void;
export declare type ItemToString<Item> = (item: Item) => string;
export declare type ExpandButtonProps = Pick<ButtonProps, "role" | "aria-roledescription" | "aria-describedby"> & {
    accessibleText?: string;
};
export interface TokenizedInputBaseProps<Item> extends Partial<TokenizedInputState<Item>>, Omit<HTMLAttributes<HTMLDivElement>, "onFocus" | "onBlur" | "onChange" | "onKeyUp" | "onKeyDown"> {
    ExpandButtonProps?: ExpandButtonProps;
    InputProps?: Pick<InputProps, "aria-describedby" | "inputProps">;
    disabled?: boolean;
    expandButtonRef?: Ref<HTMLButtonElement>;
    helpers: TokenizedInputHelpers<Item>;
    inputRef?: Ref<HTMLInputElement>;
    itemToString?: ItemToString<Item>;
    onFocus?: FocusEventHandler<HTMLInputElement | HTMLButtonElement>;
    onBlur?: FocusEventHandler<HTMLInputElement | HTMLButtonElement>;
    onKeyUp?: KeyboardEventHandler<HTMLInputElement>;
    onKeyDown?: KeyboardEventHandler<HTMLInputElement | HTMLButtonElement>;
    onRemoveItem?: RemoveItemHandler;
    onInputBlur?: FocusEventHandler<HTMLInputElement>;
    onInputFocus?: FocusEventHandler<HTMLInputElement>;
    onInputChange?: ChangeEventHandler<HTMLInputElement>;
    onInputSelect?: ReactEventHandler<HTMLInputElement>;
    onClick?: (event: SyntheticEvent<HTMLElement>) => void;
    onClear?: ReactEventHandler;
}
export declare const TokenizedInputBase: <Item>(p: TokenizedInputBaseProps<Item> & {
    ref?: ForwardedRef<HTMLDivElement> | undefined;
}) => ReactElement<TokenizedInputBaseProps<Item>, string | import("react").JSXElementConstructor<any>>;
