import { Ref } from "react";
import { TokenizedInputProps } from "./TokenizedInput";
import { TokenizedInputBaseProps } from "./TokenizedInputBase";
export interface TokenizedInputState<Item> {
    activeIndices: Array<number>;
    expanded: boolean | undefined;
    focused: boolean;
    highlightedIndex: number | undefined;
    selectedItems: Array<Item>;
    value: string | undefined;
}
export interface TokenizedInputHelpers<Item> {
    cancelBlur: () => void;
    setFocused: (expanded: boolean) => void;
    setHighlightedIndex: (value?: number) => void;
    setValue: (value: string) => void;
    setSelectedItems: (selectedItems: Array<Item>) => void;
    updateExpanded: (expanded: boolean) => void;
}
declare type useTokenizedInputResult<Item> = {
    /**
     * Used to do auto focus. It should be set to the actual input node.
     */
    inputRef: Ref<HTMLInputElement>;
    /**
     * The tokenized input state
     */
    state: TokenizedInputState<Item>;
    /**
     * Utility functions for modifying tokenized input state
     */
    helpers: TokenizedInputHelpers<Item>;
    /**
     * Properties applied to a basic tokenized input component
     */
    inputProps: Omit<TokenizedInputBaseProps<Item>, "helpers">;
};
export declare function useTokenizedInput<Item>(props: TokenizedInputProps<Item>): useTokenizedInputResult<Item>;
export {};
