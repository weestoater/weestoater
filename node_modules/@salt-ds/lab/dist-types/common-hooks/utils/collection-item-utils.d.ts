import { ReactElement, ReactNode } from "react";
import { CollectionItem, CollectionOptions } from "../collectionTypes";
export declare const sourceItemHasProp: (item: unknown, propertyName: string) => boolean;
export declare const isHeader: (item: unknown) => boolean;
export declare const isGroupNode: (item: unknown) => boolean;
export declare const isDisabled: (item: unknown) => boolean;
export declare const isFocusable: (item: unknown) => boolean;
export declare const countChildItems: <Item>(item: CollectionItem<Item>, items: CollectionItem<Item>[], idx: number) => number;
export declare const getChildLabel: (element: ReactElement<{
    children?: ReactNode;
    label?: string;
    title?: string;
}>) => string | undefined;
export declare const childIsGroup: (child: ReactElement) => boolean;
export declare const getChildNodes: (element: ReactElement) => CollectionItem<ReactElement>[] | undefined;
declare type CollectionItemWithoutId<T> = Omit<CollectionItem<T>, "id">;
export declare const sourceItems: <T>(source?: readonly T[] | undefined, options?: CollectionOptions<T> | undefined) => CollectionItemWithoutId<T>[] | undefined;
export declare const childItems: (children: ReactNode) => CollectionItem<ReactElement>[] | undefined;
export declare const isParentPath: (parentPath: string, childPath: string) => boolean;
export declare function replaceCollectionItem<Item>(nodes: CollectionItem<Item>[], id: string, props: Partial<CollectionItem<Item>>): CollectionItem<Item>[];
export {};
