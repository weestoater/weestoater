import { SyntheticEvent } from "react";
import { CollectionItem } from "./collectionTypes";
export declare const SINGLE = "default";
export declare const MULTIPLE = "multiple";
export declare const EXTENDED = "extended";
export declare const DESELECTABLE = "deselectable";
export declare type SingleSelectionStrategy = "default" | "deselectable";
export declare type MultiSelectionStrategy = "multiple" | "extended" | "extended-multi-range";
export declare type SelectionStrategy = SingleSelectionStrategy | MultiSelectionStrategy;
export declare type selectedType<Item, Selection extends SelectionStrategy> = Selection extends MultiSelectionStrategy ? Item[] : Item | null;
export declare type SelectHandler<Item = string> = (event: SyntheticEvent, selectedItem: Item) => void;
export declare type SelectionChangeHandler<Item = string, Selection extends SelectionStrategy = "default"> = (event: SyntheticEvent, selected: Selection extends SingleSelectionStrategy ? Item | null : Item[]) => void;
export declare const hasSelection: <Item = unknown>(selected: Item | Item[] | null) => boolean;
export declare const getFirstSelectedItem: <Item = unknown>(selected: Item | Item[] | null) => Item | null;
export interface SelectionProps<Item, Selection extends SelectionStrategy = "default"> {
    defaultSelected?: Selection extends SingleSelectionStrategy ? Item | null : Item[];
    onSelect?: SelectHandler<Item>;
    onSelectionChange?: SelectionChangeHandler<Item, Selection>;
    selected?: Selection extends SingleSelectionStrategy ? Item | null : Item[];
    selectionStrategy?: Selection;
}
export interface ListHandlers {
    onClick?: (event: React.MouseEvent) => void;
    onKeyDown?: (event: React.KeyboardEvent) => void;
    onKeyboardNavigation?: (event: React.KeyboardEvent, currentIndex: number) => void;
    onMouseMove?: (event: React.MouseEvent) => void;
}
export interface SelectionHookProps<Item, Selection extends SelectionStrategy = "default"> extends SelectionProps<CollectionItem<Item>, Selection> {
    disableSelection?: boolean;
    highlightedIdx: number;
    indexPositions: CollectionItem<Item>[];
    label?: string;
    selectionKeys?: string[];
    tabToSelect?: boolean;
}
export interface SelectionHookResult<Item, Selection extends SelectionStrategy = "default"> {
    listHandlers: ListHandlers;
    selected: Selection extends SingleSelectionStrategy ? CollectionItem<Item> | null : CollectionItem<Item>[];
    setSelected: (selected: Selection extends SingleSelectionStrategy ? CollectionItem<Item> | null : CollectionItem<Item>[]) => void;
}
