import { ChangeEvent, ElementType, FocusEventHandler, HTMLAttributes, InputHTMLAttributes, KeyboardEventHandler, MouseEventHandler, ReactNode } from "react";
export interface InputLegacyProps extends Omit<HTMLAttributes<HTMLDivElement>, "onChange" | "defaultValue"> {
    /**
     * Determines the position of the text cursor on focus of the input.
     *
     * start = place cursor at the beginning<br>
     * end = place cursor at the end<br>
     * \# = index to place the cursor<br>
     */
    cursorPositionOnFocus?: "start" | "end" | number;
    /**
     * The value of the `input` element, required for an uncontrolled component.
     */
    defaultValue?: HTMLInputElement["defaultValue"];
    /**
     * If `true`, the component is disabled.
     */
    disabled?: HTMLInputElement["disabled"];
    /**
     * The marker to use in an empty read only Input.
     * Use `''` to disable this feature. Defaults to 'â€”'.
     */
    emptyReadOnlyMarker?: string;
    /**
     * Determines what gets highlighted on focus of the input.
     *
     * If `true` all text will be highlighted.
     * If an array text between those indices will be highlighted
     * e.g. [0,1] will highlight the first character.
     */
    highlightOnFocus?: boolean | number[];
    /**
     * The HTML element to render the Input, e.g. 'input', a custom React component.
     */
    inputComponent?: ElementType;
    /**
     * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
     */
    inputProps?: InputHTMLAttributes<HTMLInputElement>;
    onBlur?: FocusEventHandler<HTMLInputElement>;
    /**
     * Callback for change event.
     */
    onChange?: (event: ChangeEvent<HTMLInputElement>, value: string) => void;
    onFocus?: FocusEventHandler<HTMLInputElement>;
    onKeyDown?: KeyboardEventHandler<HTMLInputElement>;
    onKeyUp?: KeyboardEventHandler<HTMLInputElement>;
    onMouseUp?: MouseEventHandler<HTMLInputElement>;
    onMouseMove?: MouseEventHandler<HTMLInputElement>;
    onMouseDown?: MouseEventHandler<HTMLInputElement>;
    /**
     * If `true`, the component is read only.
     */
    readOnly?: boolean;
    /**
     *
     * Determines the alignment of the input text.
     */
    textAlign?: "left" | "right" | "center";
    type?: HTMLInputElement["type"];
    /**
     * The value of the `input` element, required for a controlled component.
     */
    value?: HTMLInputElement["value"];
    renderSuffix?: (state: {
        disabled?: boolean;
        error?: boolean;
        focused?: boolean;
        margin?: "dense" | "none" | "normal";
        required?: boolean;
        startAdornment?: ReactNode;
    }) => ReactNode;
    endAdornment?: ReactNode;
    startAdornment?: ReactNode;
}
export declare const InputLegacy: import("react").ForwardRefExoticComponent<InputLegacyProps & import("react").RefAttributes<HTMLInputElement>>;
