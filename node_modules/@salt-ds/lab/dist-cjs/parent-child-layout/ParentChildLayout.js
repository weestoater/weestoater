'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var core = require('@salt-ds/core');
var clsx = require('clsx');
var React = require('react');
var useIsViewportLargerThanBreakpoint = require('../utils/useIsViewportLargerThanBreakpoint.js');
var window = require('@salt-ds/window');
var styles = require('@salt-ds/styles');
var ParentChildLayout$1 = require('./ParentChildLayout.css.js');

const withBaseName = core.makePrefixer("saltParentChildLayout");
const ParentChildLayout = React.forwardRef(function ParentChildLayout2({
  collapseAtBreakpoint = "sm",
  collapsedViewElement = "parent",
  disableAnimations = false,
  parentPosition = "left",
  parent,
  child,
  gap = 0,
  className,
  onCollapseChange,
  ...rest
}, ref) {
  const targetWindow = window.useWindow();
  styles.useComponentCssInjection({
    testId: "salt-parent-child-layout",
    css: ParentChildLayout$1,
    window: targetWindow
  });
  const isCollapsed = useIsViewportLargerThanBreakpoint.useIsViewportLargerThanBreakpoint(collapseAtBreakpoint);
  const collapsedViewChildren = {
    parent: /* @__PURE__ */ jsxRuntime.jsx(core.FlexItem, {
      className: clsx.clsx(withBaseName("parent"), {
        ["saltFlexItem-stacked"]: isCollapsed
      }),
      children: parent
    }),
    child: /* @__PURE__ */ jsxRuntime.jsx(core.FlexItem, {
      className: clsx.clsx(withBaseName("child"), {
        ["saltFlexItem-stacked"]: isCollapsed
      }),
      children: child
    })
  };
  React.useEffect(() => {
    onCollapseChange == null ? void 0 : onCollapseChange(isCollapsed);
  }, [isCollapsed, onCollapseChange]);
  return /* @__PURE__ */ jsxRuntime.jsx(core.FlexLayout, {
    ref,
    className: clsx.clsx(
      withBaseName(),
      {
        [withBaseName(`no-animations`)]: disableAnimations,
        [withBaseName(`reversed`)]: parentPosition === "right"
      },
      className
    ),
    gap,
    ...rest,
    children: isCollapsed ? collapsedViewChildren[collapsedViewElement] : /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, {
      children: [
        /* @__PURE__ */ jsxRuntime.jsx(core.FlexItem, {
          grow: 0,
          children: parent
        }),
        /* @__PURE__ */ jsxRuntime.jsx(core.FlexItem, {
          grow: 2,
          children: child
        })
      ]
    })
  });
});

exports.ParentChildLayout = ParentChildLayout;
//# sourceMappingURL=ParentChildLayout.js.map
