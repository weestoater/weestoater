'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
var clsx = require('clsx');
var Overlay = require('../overlay/Overlay.js');
var OverlayTrigger = require('../overlay/OverlayTrigger.js');
var OverlayPanel = require('../overlay/OverlayPanel.js');
var core = require('@salt-ds/core');
var icons = require('@salt-ds/icons');
var colorUtils = require('./color-utils.js');
var ColorHelpers = require('./ColorHelpers.js');
var colorMap = require('./colorMap.js');
var DictTabs = require('./DictTabs.js');
var GetColorPalettes = require('./GetColorPalettes.js');
var createTabsMapping = require('./createTabsMapping.js');
var window = require('@salt-ds/window');
var styles = require('@salt-ds/styles');
var ColorChooser$1 = require('./ColorChooser.css.js');
var OverlayContext = require('../overlay/OverlayContext.js');

const withBaseName = core.makePrefixer("saltColorChooser");
function getActiveTab(hexValue, tabs, saltColorOverrides) {
  if (tabs.Swatches && tabs["Color Picker"]) {
    const hexNoAlpha = ColorHelpers.hexValueWithoutAlpha(hexValue);
    const colors = saltColorOverrides != null ? saltColorOverrides : colorMap.saltColorMap;
    if (hexNoAlpha && !Object.keys(colors).find(
      (key) => {
        var _a;
        return ((_a = ColorHelpers.convertColorMapValueToHex(colors[key])) == null ? void 0 : _a.toLowerCase()) === (hexNoAlpha == null ? void 0 : hexNoAlpha.toLowerCase());
      }
    )) {
      return 1;
    }
  }
  return 0;
}
const ColorChooser = ({
  onClear,
  onSelect,
  color,
  showSwatches = true,
  showColorPicker = true,
  defaultAlpha = 1,
  disableAlphaChooser = false,
  hideLabel = false,
  placeholder,
  buttonProps,
  saltColorOverrides,
  readOnly = false,
  displayHexOnly = false
}) => {
  var _a, _b, _c;
  const targetWindow = window.useWindow();
  styles.useComponentCssInjection({
    testId: "salt-color-chooser",
    css: ColorChooser$1,
    window: targetWindow
  });
  const [open, setOpen] = React.useState(false);
  const allColors = saltColorOverrides ? GetColorPalettes.getColorPalettes(saltColorOverrides) : GetColorPalettes.getColorPalettes();
  const displayColorName = displayHexOnly ? ColorHelpers.getHexValue(color == null ? void 0 : color.hex, disableAlphaChooser) : ColorHelpers.getColorNameByHexValue(
    color == null ? void 0 : color.hex,
    disableAlphaChooser,
    saltColorOverrides
  );
  const handleOpenChange = (open2) => setOpen(open2);
  const alphaForTabs = colorUtils.isTransparent(color == null ? void 0 : color.hex) ? defaultAlpha : (_b = (_a = color == null ? void 0 : color.rgba) == null ? void 0 : _a.a) != null ? _b : defaultAlpha;
  const tabsMapping = createTabsMapping.createTabsMapping({
    swatches: showSwatches,
    colorPicker: showColorPicker,
    disableAlphaChooser,
    allColors,
    color,
    alpha: alphaForTabs,
    handleColorChange: onSelect,
    displayColorName,
    placeholder,
    onDialogClosed: () => {
      setOpen(false);
    }
  });
  const [activeTab, setActiveTab] = React.useState(
    getActiveTab(color == null ? void 0 : color.hex, tabsMapping, saltColorOverrides)
  );
  const onDefaultSelected = () => {
    if (activeTab === 0 && showSwatches) {
      onClear();
      handleOpenChange(false);
    } else {
      onClear();
    }
  };
  const onTabClick = (index) => {
    setActiveTab(index);
  };
  const OverlayContent = () => {
    const { id } = OverlayContext.useOverlayContext();
    return /* @__PURE__ */ jsxRuntime.jsxs("div", {
      id: `${id}-content`,
      className: clsx.clsx(withBaseName("overlayContent")),
      "data-testid": "overlay-content",
      children: [
        /* @__PURE__ */ jsxRuntime.jsxs(core.Button, {
          "data-testid": "default-button",
          variant: "secondary",
          className: clsx.clsx(withBaseName("defaultButton")),
          onClick: onDefaultSelected,
          children: [
            /* @__PURE__ */ jsxRuntime.jsx(icons.RefreshIcon, {
              className: clsx.clsx(withBaseName("refreshIcon"))
            }),
            "Default"
          ]
        }),
        /* @__PURE__ */ jsxRuntime.jsx(DictTabs.DictTabs, {
          tabs: tabsMapping,
          hexValue: color == null ? void 0 : color.hex,
          onTabClick,
          activeTab
        })
      ]
    });
  };
  return /* @__PURE__ */ jsxRuntime.jsxs(Overlay.Overlay, {
    placement: "bottom",
    "data-testid": "color-chooser-overlay",
    children: [
      /* @__PURE__ */ jsxRuntime.jsx(OverlayTrigger.OverlayTrigger, {
        children: /* @__PURE__ */ jsxRuntime.jsxs(core.Button, {
          className: clsx.clsx(withBaseName("overlayButton"), {
            [withBaseName("overlayButtonHiddenLabel")]: hideLabel
          }),
          "data-testid": "color-chooser-overlay-button",
          disabled: readOnly,
          ...buttonProps,
          children: [
            color && /* @__PURE__ */ jsxRuntime.jsx("div", {
              className: clsx.clsx(withBaseName("overlayButtonSwatch"), {
                [withBaseName("overlayButtonSwatchWithBorder")]: color == null ? void 0 : color.hex.startsWith("#ffffff"),
                [withBaseName("overlayButtonSwatchTransparent")]: colorUtils.isTransparent(
                  color == null ? void 0 : color.hex
                )
              }),
              style: {
                backgroundColor: color == null ? void 0 : color.hex
              }
            }),
            !hideLabel && /* @__PURE__ */ jsxRuntime.jsx("div", {
              className: withBaseName("overlayButtonText"),
              children: (_c = displayColorName != null ? displayColorName : placeholder) != null ? _c : "No color selected"
            })
          ]
        })
      }),
      /* @__PURE__ */ jsxRuntime.jsx(OverlayPanel.OverlayPanel, {
        children: /* @__PURE__ */ jsxRuntime.jsx(OverlayContent, {})
      })
    ]
  });
};

exports.ColorChooser = ColorChooser;
//# sourceMappingURL=ColorChooser.js.map
