'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var colorMap = require('./colorMap.js');
var Color = require('./Color.js');
var colorUtils = require('./color-utils.js');

function getColorNameByHexValue(hexValue, disableAlpha = false, saltColorOverrides, disableFallBackToHex = false) {
  const hexNoAlpha = hexValueWithoutAlpha(hexValue);
  const saltColors = saltColorOverrides != null ? saltColorOverrides : colorMap.saltColorMap;
  if (colorUtils.isTransparent(hexValue))
    return "Transparent";
  let colorName = Object.keys(saltColors).find((key) => {
    if (saltColors[key]) {
      const rgbVals = saltColors[key].startsWith("rgba") ? saltColors[key].substring(5, saltColors[key].length - 1) : saltColors[key].substring(4, saltColors[key].length - 1);
      const [r, g, b] = [...rgbVals.replace(" ", "").split(",")];
      return Color.Color.makeColorFromRGB(Number(r), Number(g), Number(b)).hex === (hexNoAlpha == null ? void 0 : hexNoAlpha.toLowerCase());
    }
    return 0;
  });
  if (colorName) {
    colorName = colorName.slice(4);
    return colorName.charAt(0).toUpperCase() + colorName.slice(1).toLowerCase();
  }
  if (hexValue === "WHITE" || hexValue === "BLACK") {
    return hexValue.charAt(0) + hexValue.slice(1).toLowerCase();
  }
  return disableFallBackToHex ? void 0 : getHexValue(hexValue, disableAlpha);
}
function hexValueWithoutAlpha(hexValue) {
  if (hexValue === void 0)
    return void 0;
  return isValidHex(hexValue) ? hexValue.substring(0, 7).toUpperCase() : void 0;
}
function getHexValue(hexValue, disableAlpha) {
  if (hexValue === void 0)
    return void 0;
  return disableAlpha ? hexValueWithoutAlpha(hexValue) : hexValue;
}
const isValidHex = (hex) => {
  return hex ? /^#[0-9a-fA-F]{8}$/.test(hex) || /#[0-9a-fA-F]{6}$/.test(hex) : false;
};
const convertColorMapValueToHex = (color) => {
  if (!color.startsWith("rgb"))
    return color;
  const rgbVals = color.startsWith("rgba") ? color.substring(5, color.length - 1) : color.substring(4, color.length - 1);
  const [r, g, b, a] = [...rgbVals.replace(" ", "").split(",")];
  return Color.Color.makeColorFromRGB(
    Number(r),
    Number(g),
    Number(b),
    a ? Number(a) : 1
  ).hex;
};

exports.convertColorMapValueToHex = convertColorMapValueToHex;
exports.getColorNameByHexValue = getColorNameByHexValue;
exports.getHexValue = getHexValue;
exports.hexValueWithoutAlpha = hexValueWithoutAlpha;
exports.isValidHex = isValidHex;
//# sourceMappingURL=ColorHelpers.js.map
