'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var clsx = require('clsx');
var core = require('@salt-ds/core');
var AlphaInputField = require('./AlphaInputField.js');
var SwatchesPicker = require('./SwatchesPicker.js');
var window = require('@salt-ds/window');
var styles = require('@salt-ds/styles');
var Swatches$1 = require('./Swatches.css.js');

const withBaseName = core.makePrefixer("saltColorChooserSwatches");
const Swatches = ({
  allColors,
  color,
  alpha,
  handleColorChange,
  displayColorName,
  placeholder,
  onDialogClosed
}) => {
  const targetWindow = window.useWindow();
  styles.useComponentCssInjection({
    testId: "salt-swatches",
    css: Swatches$1,
    window: targetWindow
  });
  return /* @__PURE__ */ jsxRuntime.jsxs("div", {
    "data-testid": "swatches",
    className: clsx.clsx(withBaseName("pickerDiv")),
    children: [
      /* @__PURE__ */ jsxRuntime.jsx(SwatchesPicker.SwatchesPicker, {
        allColors,
        color,
        onChange: handleColorChange,
        alpha,
        onDialogClosed
      }),
      /* @__PURE__ */ jsxRuntime.jsxs("div", {
        className: clsx.clsx(withBaseName("textDiv")),
        children: [
          /* @__PURE__ */ jsxRuntime.jsxs("div", {
            children: [
              /* @__PURE__ */ jsxRuntime.jsx("span", {
                className: clsx.clsx(withBaseName("colorTextDiv")),
                children: "Color:"
              }),
              /* @__PURE__ */ jsxRuntime.jsx("span", {
                className: clsx.clsx(withBaseName("colorNameTextDiv")),
                children: displayColorName != null ? displayColorName : placeholder
              })
            ]
          }),
          /* @__PURE__ */ jsxRuntime.jsxs("div", {
            children: [
              /* @__PURE__ */ jsxRuntime.jsx("span", {
                className: clsx.clsx(withBaseName("alphaTextDiv")),
                children: "Opacity:"
              }),
              /* @__PURE__ */ jsxRuntime.jsx(AlphaInputField.AlphaInput, {
                alphaValue: (color == null ? void 0 : color.rgba.a) === 0 ? 0 : alpha,
                showAsOpacity: true,
                onSubmit: (alpha2, e) => {
                  const newColor = color == null ? void 0 : color.setAlpha(alpha2);
                  handleColorChange(newColor, false, e);
                }
              })
            ]
          })
        ]
      })
    ]
  });
};

exports.Swatches = Swatches;
//# sourceMappingURL=Swatches.js.map
