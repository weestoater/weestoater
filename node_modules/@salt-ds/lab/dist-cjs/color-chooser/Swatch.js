'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var clsx = require('clsx');
var core = require('@salt-ds/core');
var styles = require('@salt-ds/styles');
var window = require('@salt-ds/window');
var Color = require('./Color.js');
var colorUtils = require('./color-utils.js');
var Swatch$1 = require('./Swatch.css.js');

const withBaseName = core.makePrefixer("saltColorChooserSwatch");
const Swatch = ({
  color,
  onClick,
  active,
  alpha,
  onDialogClosed,
  transparent = false
}) => {
  const targetWindow = window.useWindow();
  styles.useComponentCssInjection({
    testId: "salt-swatch",
    css: Swatch$1,
    window: targetWindow
  });
  const handleClick = () => {
    const newColor = Color.Color.makeColorFromHex(color);
    colorUtils.isTransparent(color) ? newColor == null ? void 0 : newColor.setAlpha(0) : newColor == null ? void 0 : newColor.setAlpha(alpha);
    onClick(newColor, true);
    onDialogClosed();
  };
  const handleKeyDown = (e) => {
    var _a;
    const newColor = (_a = Color.Color.makeColorFromHex(color)) == null ? void 0 : _a.setAlpha(alpha);
    e.key === "ENTER" && onClick(newColor, true);
    onDialogClosed();
  };
  const isBlackOrgray = (color2) => {
    return color2.toLowerCase() === "black" || color2.toUpperCase().startsWith("#2F3136") || color2.toUpperCase().startsWith("#2A2C2F") || color2.toUpperCase().startsWith("#242526") || color2.toUpperCase().startsWith("#161616");
  };
  const isWhite = (color2) => color2 === "white";
  const getBackgroundColor = () => {
    const backgroundColor = Color.Color.makeColorFromHex(color);
    return backgroundColor == null ? void 0 : backgroundColor.setAlpha(alpha).hex;
  };
  return /* @__PURE__ */ jsxRuntime.jsx("div", {
    "data-testid": `swatch-${color}`,
    style: {
      background: getBackgroundColor()
    },
    className: clsx.clsx({
      [withBaseName("active")]: active,
      [withBaseName("transparent")]: transparent,
      [withBaseName("graySwatch")]: isBlackOrgray(color),
      [withBaseName("whiteSwatch")]: isWhite(color),
      [withBaseName("swatch")]: !isWhite(color) && !isBlackOrgray(color)
    }),
    onClick: handleClick,
    tabIndex: 0,
    onKeyDown: handleKeyDown
  });
};

exports.Swatch = Swatch;
//# sourceMappingURL=Swatch.js.map
