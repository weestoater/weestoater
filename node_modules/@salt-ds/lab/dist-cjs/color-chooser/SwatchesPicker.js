'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var Swatch$1 = require('./Swatch.js');
var ColorHelpers = require('./ColorHelpers.js');
var colorUtils = require('./color-utils.js');
var window = require('@salt-ds/window');
var styles = require('@salt-ds/styles');
var Swatch = require('./Swatch.css.js');

const SwatchesGroup = ({
  swatchGroup,
  onClick,
  onDialogClosed,
  selectedColor,
  alpha
}) => {
  var _a;
  const targetWindow = window.useWindow();
  styles.useComponentCssInjection({
    testId: "salt-swatches",
    css: Swatch,
    window: targetWindow
  });
  const isBlackOrWhite = (color) => {
    return (selectedColor ? selectedColor.startsWith("#000000") : false) && color.toLowerCase() === "black" || (selectedColor ? selectedColor.toLowerCase().startsWith("#ffffff") : false) && color.toLowerCase() === "white";
  };
  const isActive = (color) => {
    return color.toLowerCase() === (selectedColor == null ? void 0 : selectedColor.substring(0, 7).toString().toLowerCase()) || isBlackOrWhite(color);
  };
  return /* @__PURE__ */ jsxRuntime.jsx("div", {
    style: { display: "flex", flexDirection: "column" },
    children: (_a = swatchGroup == null ? void 0 : swatchGroup.map((color) => {
      return ColorHelpers.convertColorMapValueToHex(color);
    })) == null ? void 0 : _a.map((color) => /* @__PURE__ */ jsxRuntime.jsx(Swatch$1.Swatch, {
      active: isActive(color),
      color,
      onClick,
      onDialogClosed,
      alpha,
      transparent: colorUtils.isTransparent(color)
    }, color.toString()))
  });
};
const SwatchesPicker = ({
  allColors,
  color,
  alpha = 1,
  onChange,
  onDialogClosed
}) => {
  return /* @__PURE__ */ jsxRuntime.jsx("div", {
    "data-testid": "swatches-picker",
    style: { display: "flex", flexDirection: "row" },
    children: allColors == null ? void 0 : allColors.map((swatchGroup) => /* @__PURE__ */ jsxRuntime.jsx(SwatchesGroup, {
      swatchGroup,
      selectedColor: color == null ? void 0 : color.hex,
      onClick: onChange,
      onDialogClosed,
      alpha
    }, swatchGroup.toString()))
  });
};

exports.SwatchesPicker = SwatchesPicker;
//# sourceMappingURL=SwatchesPicker.js.map
