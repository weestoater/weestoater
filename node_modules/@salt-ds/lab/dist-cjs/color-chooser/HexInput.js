'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var clsx = require('clsx');
var React = require('react');
var core = require('@salt-ds/core');
var ColorHelpers = require('./ColorHelpers.js');
var InputLegacy = require('../input-legacy/InputLegacy.js');
require('../input-legacy/StaticInputAdornment.js');
var window = require('@salt-ds/window');
var styles = require('@salt-ds/styles');
var HexInput$1 = require('./HexInput.css.js');

const withBaseName = core.makePrefixer("saltColorChooserHexInput");
const HexInput = ({
  hexValue,
  disableAlphaChooser,
  onSubmit
}) => {
  var _a;
  const targetWindow = window.useWindow();
  styles.useComponentCssInjection({
    testId: "salt-hex-input",
    css: HexInput$1,
    window: targetWindow
  });
  const [hexInputValue, setHexInputValue] = React.useState(
    hexValue
  );
  React.useEffect(() => {
    setHexInputValue(hexValue);
  }, [hexValue]);
  const handleHexInputChange = (event, value) => {
    if (disableAlphaChooser && value.length < 7) {
      setHexInputValue("#" + value);
    }
    if (!disableAlphaChooser) {
      setHexInputValue("#" + value);
    }
  };
  const handleKeyDownHex = (e) => {
    if (e.key === "Enter") {
      ColorHelpers.isValidHex(hexInputValue) && onSubmit(hexInputValue);
    }
  };
  const handleOnBlurHex = (e) => {
    ColorHelpers.isValidHex(hexInputValue) && onSubmit(hexInputValue, e);
  };
  return /* @__PURE__ */ jsxRuntime.jsxs("div", {
    className: clsx.clsx(withBaseName()),
    children: [
      /* @__PURE__ */ jsxRuntime.jsx("span", {
        className: clsx.clsx(withBaseName("hashSign")),
        children: "#"
      }),
      /* @__PURE__ */ jsxRuntime.jsx(InputLegacy.InputLegacy, {
        "data-testid": "hex-input",
        className: clsx.clsx(withBaseName("input")),
        value: (_a = hexInputValue == null ? void 0 : hexInputValue.toString().replace("#", "").toUpperCase()) != null ? _a : "",
        onChange: handleHexInputChange,
        onKeyDown: handleKeyDownHex,
        onBlur: handleOnBlurHex
      })
    ]
  });
};

exports.HexInput = HexInput;
//# sourceMappingURL=HexInput.js.map
