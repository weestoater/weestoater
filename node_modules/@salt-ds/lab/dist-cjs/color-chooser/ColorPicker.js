'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var reactColor = require('react-color');
var clsx = require('clsx');
var core = require('@salt-ds/core');
var Color = require('./Color.js');
var ColorHelpers = require('./ColorHelpers.js');
var HexInput = require('./HexInput.js');
var RGBAInput = require('./RGBAInput.js');
var window = require('@salt-ds/window');
var styles = require('@salt-ds/styles');
var ColorPicker$1 = require('./ColorPicker.css.js');

const withBaseName = core.makePrefixer("saltColorChooserPicker");
const ColorPicker = ({
  alpha = 1,
  disableAlphaChooser,
  color,
  onChange,
  onDialogClosed
}) => {
  var _a;
  const targetWindow = window.useWindow();
  styles.useComponentCssInjection({
    testId: "salt-color-picker",
    css: ColorPicker$1,
    window: targetWindow
  });
  const rgbaValue = (_a = color == null ? void 0 : color.rgba) != null ? _a : Color.Color.makeColorFromRGB(0, 0, 0, alpha).rgba;
  const rgbaText = disableAlphaChooser ? "RGB" : "RGBA";
  const onSubmitHex = (hexValue, e) => {
    const newColor = Color.Color.makeColorFromHex(hexValue);
    onChange(newColor, false, e);
  };
  const onSubmitRgb = (rgba, e) => {
    const newColor = Color.Color.makeColorFromRGB(rgba.r, rgba.g, rgba.b, rgba.a);
    onChange(newColor, false, e);
  };
  const onSubmitAlpha = (alpha2, e) => {
    const newColor = Color.Color.makeColorFromRGB(
      rgbaValue.r,
      rgbaValue.g,
      rgbaValue.b,
      Math.max(0, Math.min(alpha2, 1))
    );
    onChange(newColor, false, e);
  };
  const onSketchPickerChange = (colorResult, e) => {
    var _a2;
    const newColor = Color.Color.makeColorFromRGB(
      colorResult.rgb.r,
      colorResult.rgb.g,
      colorResult.rgb.b,
      (_a2 = colorResult.rgb.a) != null ? _a2 : alpha
    );
    onChange(newColor, false, e);
  };
  const onApply = () => {
    onChange(color, true);
    onDialogClosed();
  };
  return /* @__PURE__ */ jsxRuntime.jsxs("div", {
    "data-testid": "color-picker",
    className: clsx.clsx(withBaseName()),
    children: [
      /* @__PURE__ */ jsxRuntime.jsx(reactColor.SketchPicker, {
        className: clsx.clsx(withBaseName("swatchPickerStyles"), {
          [withBaseName("rootDisabledAlpha")]: disableAlphaChooser,
          [withBaseName("root")]: !disableAlphaChooser
        }),
        color: rgbaValue,
        onChange: onSketchPickerChange,
        presetColors: [],
        disableAlpha: disableAlphaChooser
      }),
      /* @__PURE__ */ jsxRuntime.jsxs("div", {
        className: clsx.clsx(withBaseName("inputContainer")),
        children: [
          /* @__PURE__ */ jsxRuntime.jsxs("div", {
            className: clsx.clsx(withBaseName("inputDivs")),
            children: [
              /* @__PURE__ */ jsxRuntime.jsx("span", {
                className: clsx.clsx(withBaseName("textDivOverrides")),
                children: "HEX"
              }),
              /* @__PURE__ */ jsxRuntime.jsx(HexInput.HexInput, {
                hexValue: disableAlphaChooser ? ColorHelpers.hexValueWithoutAlpha(color == null ? void 0 : color.hex) : color == null ? void 0 : color.hex,
                disableAlphaChooser,
                onSubmit: onSubmitHex
              }),
              /* @__PURE__ */ jsxRuntime.jsx(RGBAInput.RGBAInput, {
                disableAlphaChooser,
                rgbaText,
                rgbaValue,
                onSubmitAlpha,
                onSubmitRgb
              })
            ]
          }),
          /* @__PURE__ */ jsxRuntime.jsx("div", {
            className: clsx.clsx(withBaseName("applyButtonDiv")),
            children: /* @__PURE__ */ jsxRuntime.jsx(core.Button, {
              "data-testid": "apply-button",
              variant: "cta",
              onClick: onApply,
              children: "Apply"
            })
          })
        ]
      })
    ]
  });
};

exports.ColorPicker = ColorPicker;
//# sourceMappingURL=ColorPicker.js.map
