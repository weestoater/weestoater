'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
require('@salt-ds/core');
require('react/jsx-runtime');
var useResizeObserver = require('../responsive/useResizeObserver.js');

const useListHeight = ({
  borderless,
  displayedItemCount,
  getItemHeight,
  height,
  itemCount,
  itemGapSize,
  itemHeight: itemHeightProp,
  rowHeightRef
}) => {
  const [measuredItemHeight, setMeasuredItemHeight] = React.useState(36);
  const preferredHeight = React.useMemo(() => {
    let result = borderless ? 0 : 2;
    const itemHeight = itemHeightProp != null ? itemHeightProp : measuredItemHeight;
    const preferredItemCount = Math.min(displayedItemCount, itemCount) || displayedItemCount;
    if (typeof getItemHeight === "function") {
      result += Array(preferredItemCount).fill(0).reduce(
        (total, _, index) => total + getItemHeight(index) + itemGapSize,
        0
      ) - itemGapSize;
    } else {
      result += preferredItemCount * Number(itemHeight) + (preferredItemCount - 1) * itemGapSize;
    }
    return isNaN(result) ? void 0 : result;
  }, [
    borderless,
    displayedItemCount,
    getItemHeight,
    itemCount,
    itemGapSize,
    itemHeightProp,
    measuredItemHeight
  ]);
  const handleRowHeight = React.useCallback(({ height: height2 }) => {
    setMeasuredItemHeight(height2);
  }, []);
  useResizeObserver.useResizeObserver(rowHeightRef, useResizeObserver.HeightOnly, handleRowHeight, true);
  return {
    preferredHeight
  };
};

exports.useListHeight = useListHeight;
//# sourceMappingURL=useListHeight.js.map
