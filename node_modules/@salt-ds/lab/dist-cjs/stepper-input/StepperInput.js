'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var clsx = require('clsx');
var React = require('react');
var core = require('@salt-ds/core');
var styles = require('@salt-ds/styles');
var window = require('@salt-ds/window');
var icons = require('@salt-ds/icons');
var InputLegacy = require('../input-legacy/InputLegacy.js');
require('../input-legacy/StaticInputAdornment.js');
var useActivationIndicatorPosition = require('./internal/useActivationIndicatorPosition.js');
var useStepperInput = require('./useStepperInput.js');
var StepperInput$1 = require('./StepperInput.css.js');

const withBaseName = core.makePrefixer("saltStepperInput");
const StepperInput = React.forwardRef(
  function StepperInput2(props, ref) {
    const {
      ButtonProps: ButtonPropsProp,
      InputProps: InputPropsProp,
      textAlign = "left",
      className,
      showRefreshButton = false
    } = props;
    const targetWindow = window.useWindow();
    styles.useComponentCssInjection({
      testId: "salt-stepper-input",
      css: StepperInput$1,
      window: targetWindow
    });
    const adornmentRef = React.useRef(null);
    const inputRef = React.useRef(null);
    const {
      decrementButtonDown,
      getButtonIcon,
      getButtonProps,
      getInputProps,
      incrementButtonDown,
      isAtMax,
      isAtMin,
      refreshCurrentValue,
      stepperDirection,
      valuesHaveDiverged
    } = useStepperInput.useStepperInput(props, inputRef);
    useActivationIndicatorPosition.useActivationIndicatorPosition(
      adornmentRef,
      valuesHaveDiverged() || showRefreshButton
    );
    const endAdornment = /* @__PURE__ */ jsxRuntime.jsxs("div", {
      className: withBaseName("adornmentContainer"),
      ref: adornmentRef,
      children: [
        /* @__PURE__ */ jsxRuntime.jsx(core.Button, {
          "aria-label": "Refresh default value",
          className: clsx.clsx(withBaseName("secondaryButton"), {
            [withBaseName("hideSecondaryButton")]: !(showRefreshButton || valuesHaveDiverged())
          }),
          onClick: refreshCurrentValue,
          variant: "secondary",
          children: /* @__PURE__ */ jsxRuntime.jsx(icons.RefreshIcon, {
            "aria-label": "refresh"
          })
        }),
        /* @__PURE__ */ jsxRuntime.jsxs("div", {
          className: withBaseName("buttonContainer"),
          children: [
            /* @__PURE__ */ jsxRuntime.jsx(core.Button, {
              className: clsx.clsx(
                withBaseName("stepperButton"),
                withBaseName("increment"),
                {
                  active: incrementButtonDown
                }
              ),
              disabled: isAtMax(),
              ...getButtonProps(stepperDirection.INCREMENT, ButtonPropsProp),
              children: /* @__PURE__ */ jsxRuntime.jsx(icons.TriangleUpIcon, {
                className: withBaseName("stepperButtonIcon"),
                "aria-label": getButtonIcon(stepperDirection.INCREMENT)
              })
            }),
            /* @__PURE__ */ jsxRuntime.jsx(core.Button, {
              className: clsx.clsx(
                withBaseName("stepperButton"),
                withBaseName("decrement"),
                {
                  active: decrementButtonDown
                }
              ),
              disabled: isAtMin(),
              ...getButtonProps(stepperDirection.DECREMENT, ButtonPropsProp),
              children: /* @__PURE__ */ jsxRuntime.jsx(icons.TriangleDownIcon, {
                className: withBaseName("stepperButtonIcon"),
                "aria-label": getButtonIcon(stepperDirection.DECREMENT)
              })
            })
          ]
        })
      ]
    });
    return /* @__PURE__ */ jsxRuntime.jsx("div", {
      className: clsx.clsx(withBaseName(), className),
      onBlur: props.onBlur,
      onFocus: props.onFocus,
      ref,
      children: /* @__PURE__ */ jsxRuntime.jsx(InputLegacy.InputLegacy, {
        className: withBaseName("input"),
        endAdornment,
        highlightOnFocus: true,
        ref: inputRef,
        textAlign,
        ...getInputProps(InputPropsProp)
      })
    });
  }
);

exports.StepperInput = StepperInput;
//# sourceMappingURL=StepperInput.js.map
