'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var core = require('@salt-ds/core');

const useDynamicAriaLabel = (appendLabel, hasLiveValue, inputRef, value, valuesHaveDiverged) => {
  const [hasAnnounced, setHasAnnounced] = React.useState(false);
  const { announce } = core.useAriaAnnouncer();
  React.useEffect(() => {
    var _a;
    function applyAriaMessage(ariaLabel) {
      var _a2, _b, _c, _d;
      if (!ariaLabel.includes(appendLabel)) {
        (_a2 = inputRef.current) == null ? void 0 : _a2.setAttribute(
          "aria-label",
          `${ariaLabel}${appendLabel}`
        );
      }
      const currentId = ((_b = inputRef.current) == null ? void 0 : _b.getAttribute("id")) || "";
      const labelledBy = ((_c = inputRef.current) == null ? void 0 : _c.getAttribute("aria-labelledby")) || "";
      if (!labelledBy.includes(currentId)) {
        (_d = inputRef.current) == null ? void 0 : _d.setAttribute(
          "aria-labelledby",
          `${labelledBy} ${currentId}`
        );
      }
    }
    function removeAriaMessage(ariaLabel) {
      var _a2, _b, _c, _d, _e;
      const replacementAria = ariaLabel == null ? void 0 : ariaLabel.replace(appendLabel, "");
      if (replacementAria !== void 0) {
        (_a2 = inputRef.current) == null ? void 0 : _a2.setAttribute("aria-label", replacementAria);
      }
      const replacementLabelledBy = (_d = (_b = inputRef.current) == null ? void 0 : _b.getAttribute("aria-labelledby")) == null ? void 0 : _d.replace(` ${(_c = inputRef.current) == null ? void 0 : _c.getAttribute("id")}`, "");
      if (replacementLabelledBy !== void 0) {
        (_e = inputRef.current) == null ? void 0 : _e.setAttribute(
          "aria-labelledby",
          replacementLabelledBy
        );
      }
    }
    if (hasLiveValue) {
      const ariaLabel = ((_a = inputRef.current) == null ? void 0 : _a.getAttribute("aria-label")) || "";
      if (valuesHaveDiverged()) {
        applyAriaMessage(ariaLabel);
      } else {
        removeAriaMessage(ariaLabel);
      }
    }
  }, [appendLabel, inputRef, hasLiveValue, valuesHaveDiverged, value]);
  React.useEffect(() => {
    var _a;
    if (hasLiveValue && valuesHaveDiverged()) {
      if (inputRef.current !== document.activeElement && !hasAnnounced) {
        announce("");
        announce(`${(_a = inputRef.current) == null ? void 0 : _a.getAttribute("aria-label")}`);
        setHasAnnounced(true);
      }
    }
  }, [
    announce,
    appendLabel,
    hasAnnounced,
    inputRef,
    hasLiveValue,
    setHasAnnounced,
    valuesHaveDiverged,
    value
  ]);
  return { setHasAnnounced };
};

exports.useDynamicAriaLabel = useDynamicAriaLabel;
//# sourceMappingURL=useDynamicAriaLabel.js.map
