{"version":3,"file":"useDynamicAriaLabel.js","sources":["../src/stepper-input/internal/useDynamicAriaLabel.ts"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { useAriaAnnouncer } from \"@salt-ds/core\";\n\n// Dynamically append a string to aria-label if the component\n// is controlled and the display value can be refreshed\nexport const useDynamicAriaLabel = (\n  appendLabel: string,\n  hasLiveValue: boolean,\n  inputRef: React.MutableRefObject<HTMLInputElement | null>,\n  value: number | string | undefined,\n  valuesHaveDiverged: () => boolean\n) => {\n  const [hasAnnounced, setHasAnnounced] = useState(false);\n  const { announce } = useAriaAnnouncer();\n\n  useEffect(() => {\n    function applyAriaMessage(ariaLabel: string) {\n      // Don't append the message again if it's already part of the string\n      if (!ariaLabel.includes(appendLabel)) {\n        inputRef.current?.setAttribute(\n          \"aria-label\",\n          `${ariaLabel}${appendLabel}`\n        );\n      }\n\n      const currentId = inputRef.current?.getAttribute(\"id\") || \"\";\n      const labelledBy =\n        inputRef.current?.getAttribute(\"aria-labelledby\") || \"\";\n\n      if (!labelledBy.includes(currentId)) {\n        inputRef.current?.setAttribute(\n          \"aria-labelledby\",\n          `${labelledBy} ${currentId}`\n        );\n      }\n    }\n\n    function removeAriaMessage(ariaLabel: string) {\n      const replacementAria = ariaLabel?.replace(appendLabel, \"\");\n      if (replacementAria !== undefined) {\n        inputRef.current?.setAttribute(\"aria-label\", replacementAria);\n      }\n\n      const replacementLabelledBy = inputRef.current\n        ?.getAttribute(\"aria-labelledby\")\n        ?.replace(` ${inputRef.current?.getAttribute(\"id\")}`, \"\");\n\n      if (replacementLabelledBy !== undefined) {\n        inputRef.current?.setAttribute(\n          \"aria-labelledby\",\n          replacementLabelledBy\n        );\n      }\n    }\n\n    if (hasLiveValue) {\n      const ariaLabel = inputRef.current?.getAttribute(\"aria-label\") || \"\";\n      if (valuesHaveDiverged()) {\n        applyAriaMessage(ariaLabel);\n      } else {\n        removeAriaMessage(ariaLabel);\n      }\n    }\n  }, [appendLabel, inputRef, hasLiveValue, valuesHaveDiverged, value]);\n\n  useEffect(() => {\n    if (hasLiveValue && valuesHaveDiverged()) {\n      // Screen readers will automatically announce updates when the dynamic `aria-label`\n      // changes and the component has focus. When the component *does not* have\n      // focus we should announce only once for the first value update\n      if (inputRef.current !== document.activeElement && !hasAnnounced) {\n        // Empty announcement required until a fix is in place for announcer\n        announce(\"\");\n        announce(`${inputRef.current?.getAttribute(\"aria-label\")}`);\n\n        // We only want to announce on the first value change, but this flag\n        // is reset when the input receives focus\n        setHasAnnounced(true);\n      }\n    }\n  }, [\n    announce,\n    appendLabel,\n    hasAnnounced,\n    inputRef,\n    hasLiveValue,\n    setHasAnnounced,\n    valuesHaveDiverged,\n    value,\n  ]);\n\n  return { setHasAnnounced };\n};\n"],"names":["useState","useAriaAnnouncer","useEffect","_a"],"mappings":"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"}