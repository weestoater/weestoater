'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
var OverlayContext = require('./OverlayContext.js');
var core = require('@salt-ds/core');
var react = require('@floating-ui/react');

const Overlay = React.forwardRef(
  function Overlay2(props, ref) {
    const {
      children,
      open,
      onOpenChange,
      placement: placementProp = "top",
      id: idProp,
      onClose,
      ...rest
    } = props;
    const id = core.useId(idProp);
    const arrowRef = React.useRef(null);
    const [openState, setOpenState] = core.useControlled({
      controlled: open,
      default: false,
      name: "Overlay",
      state: "open"
    });
    const {
      x,
      y,
      strategy,
      context,
      elements,
      floating,
      reference,
      placement
    } = core.useFloatingUI({
      open: openState,
      onOpenChange: setOpenState,
      placement: placementProp,
      middleware: [
        react.offset(11),
        react.flip(),
        react.shift({ limiter: react.limitShift() }),
        react.arrow({ element: arrowRef })
      ]
    });
    const { getReferenceProps, getFloatingProps } = react.useInteractions([
      react.useRole(context, { role: "dialog" }),
      react.useClick(context),
      react.useDismiss(context)
    ]);
    const floatingStyles = React.useMemo(() => {
      var _a, _b;
      return {
        top: y != null ? y : 0,
        left: x != null ? x : 0,
        position: strategy,
        width: (_a = elements.floating) == null ? void 0 : _a.offsetWidth,
        height: (_b = elements.floating) == null ? void 0 : _b.offsetHeight
      };
    }, [elements.floating, strategy, x, y]);
    const setOpen = (event, newOpen) => {
      setOpenState(newOpen);
      onOpenChange == null ? void 0 : onOpenChange(event, newOpen);
    };
    const arrowProps = {
      ref: arrowRef,
      context
    };
    const handleCloseButton = (event) => {
      setOpen(event, false);
      onClose == null ? void 0 : onClose(event);
    };
    return /* @__PURE__ */ jsxRuntime.jsx(OverlayContext.OverlayContext.Provider, {
      value: {
        id: id != null ? id : "",
        openState,
        setOpen,
        floatingStyles,
        placement,
        context,
        arrowProps,
        floating,
        reference,
        handleCloseButton,
        getFloatingProps,
        getReferenceProps
      },
      children: /* @__PURE__ */ jsxRuntime.jsx("div", {
        ref,
        ...rest,
        children
      })
    });
  }
);

exports.Overlay = Overlay;
//# sourceMappingURL=Overlay.js.map
