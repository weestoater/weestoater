'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
var core = require('@salt-ds/core');
var clsx = require('clsx');
var OverlayContext = require('./OverlayContext.js');
var OverlayPanelBase = require('./OverlayPanelBase.js');

const withBaseName = core.makePrefixer("saltOverlayPanel");
const OverlayPanel = React.forwardRef(
  function OverlayPanel2(props, ref) {
    const { className, ["aria-labelledby"]: ariaLabelledby, ...rest } = props;
    const { Component: FloatingComponent } = core.useFloatingComponent();
    const {
      id,
      openState,
      floatingStyles,
      placement,
      context,
      getFloatingProps,
      floating
    } = OverlayContext.useOverlayContext();
    const handleRef = core.useForkRef(floating, ref);
    const { top, left, width, height, position } = floatingStyles;
    const getOverlayProps = () => {
      return getFloatingProps({
        "data-placement": placement,
        ref: floating,
        id: `${id}-panel`
      });
    };
    return /* @__PURE__ */ jsxRuntime.jsx(FloatingComponent, {
      open: openState,
      className: clsx.clsx(withBaseName(), className),
      "aria-modal": "true",
      ...getOverlayProps(),
      ref: handleRef,
      width,
      height,
      top,
      left,
      position,
      focusManagerProps: {
        context
      },
      "aria-labelledby": ariaLabelledby,
      children: /* @__PURE__ */ jsxRuntime.jsx(OverlayPanelBase.OverlayPanelBase, {
        ...rest
      })
    });
  }
);

exports.OverlayPanel = OverlayPanel;
//# sourceMappingURL=OverlayPanel.js.map
