'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
var core = require('@salt-ds/core');
var clsx = require('clsx');
var useAutoSizer = require('../common-hooks/useAutoSizer.js');
var calcPreferredHeight = require('../common-hooks/calcPreferredHeight.js');
require('../common-hooks/collectionProvider.js');
require('../common-hooks/keyUtils.js');
var listDomUtils = require('../common-hooks/list-dom-utils.js');
var useCollectionItems = require('../common-hooks/useCollectionItems.js');
var useSelection = require('../common-hooks/useSelection.js');
require('../responsive/useResizeObserver.js');
var isSelected = require('../common-hooks/utils/isSelected.js');
var useTree = require('./useTree.js');
var TreeNode = require('./TreeNode.js');
var window = require('@salt-ds/window');
var styles = require('@salt-ds/styles');
var Tree$1 = require('./Tree.css.js');

const withBaseName = core.makePrefixer("saltTree");
const Tree = React.forwardRef(function Tree2({
  className,
  defaultSelected,
  disabled,
  groupSelection = useSelection.GROUP_SELECTION_NONE,
  height,
  id: idProp,
  onHighlight,
  onToggle,
  onSelect,
  onSelectionChange,
  revealSelected,
  selected: selectedProp,
  selectionStrategy,
  source,
  style: styleProp,
  width,
  ...htmlAttributes
}, forwardedRef) {
  const targetWindow = window.useWindow();
  styles.useComponentCssInjection({
    testId: "salt-tree",
    css: Tree$1,
    window: targetWindow
  });
  const id = core.useIdMemo(idProp);
  const rootRef = React.useRef(null);
  const contentRef = React.useRef(null);
  const collectionHook = useCollectionItems.useCollectionItems({
    id,
    source,
    options: {
      noChildrenLabel: "No children available",
      revealSelected: revealSelected ? Boolean(selectedProp) || Boolean(defaultSelected) || false : void 0
    }
  });
  const preferredHeight = height != null ? height : calcPreferredHeight.calcPreferredHeight({
    displayedItemCount: 10,
    itemCount: collectionHook.data.length,
    itemHeight: 36
  });
  const autoSize = useAutoSizer.useAutoSizer({
    containerRef: rootRef,
    responsive: width === void 0 || height === void 0,
    height: preferredHeight,
    width
  });
  const handleSelect = React.useCallback(
    (evt, selectedItem) => {
      if (onSelect) {
        if (React.isValidElement(selectedItem.value)) {
          onSelect(evt, selectedItem.label);
        } else if (selectedItem.value !== null) {
          onSelect(evt, selectedItem.value);
        }
      }
    },
    [onSelect]
  );
  const handleSelectionChange = React.useCallback(
    (evt, selected2) => {
      if (onSelectionChange) {
        onSelectionChange(
          evt,
          Array.isArray(selected2) ? selected2.map((s) => s.value) : selected2 && selected2.value
        );
      }
    },
    [onSelectionChange]
  );
  const {
    focusVisible,
    highlightedIdx,
    highlightItemAtIndex,
    listHandlers,
    listProps,
    listItemHandlers,
    selected
  } = useTree.useTree({
    collectionHook,
    containerRef: rootRef,
    contentRef,
    defaultSelected: collectionHook.itemToCollectionItem(defaultSelected),
    disabled,
    groupSelection,
    onHighlight,
    onSelect: handleSelect,
    onSelectionChange: handleSelectionChange,
    onToggle,
    selected: collectionHook.itemToCollectionItem(selectedProp),
    selectionStrategy
  });
  const defaultItemHandlers = {
    onMouseEnter: (evt) => {
      const idx = listDomUtils.closestListItemIndex(evt.target);
      highlightItemAtIndex(idx);
    }
  };
  const propsCommonToAllListItems = {
    ...defaultItemHandlers,
    ...listItemHandlers,
    isLeaf: true,
    role: "treeitem"
  };
  const allowGroupSelect = false;
  function addLeafNode(list, item, idx) {
    const itemProps = {
      "aria-disabled": disabled || item.disabled,
      "aria-level": item.level,
      "data-idx": idx.value,
      description: item.description,
      id: item.id,
      key: item.id,
      highlighted: idx.value === highlightedIdx || void 0,
      selected: isSelected.isSelected(selected, item),
      className: clsx.clsx({
        focusVisible: focusVisible === idx.value
      })
    };
    list.push(
      /* @__PURE__ */ jsxRuntime.jsx(TreeNode.TreeNode, {
        ...propsCommonToAllListItems,
        ...itemProps,
        label: item.label
      })
    );
    idx.value += 1;
  }
  function addGroupNode(list, items, idx, id2, title) {
    const { value: i } = idx;
    const item = items[i];
    idx.value += 1;
    list.push(
      /* @__PURE__ */ React.createElement(TreeNode.TreeNode, {
        ...defaultItemHandlers,
        ...listItemHandlers,
        "aria-disabled": disabled || item.disabled,
        "aria-expanded": item.expanded,
        "aria-level": item.level,
        className: clsx.clsx({
          focusVisible: focusVisible === i,
          [withBaseName("toggle")]: !allowGroupSelect
        }),
        "data-idx": i,
        "data-selectable": true,
        description: item.description,
        highlighted: i === highlightedIdx,
        id: id2,
        key: `header-${i}`,
        label: title,
        selected: isSelected.isSelected(selected, item)
      }, item.expanded ? /* @__PURE__ */ jsxRuntime.jsx("ul", {
        className: withBaseName("child-nodes"),
        role: "group",
        children: renderItems(items, idx, item.level + 1)
      }) : null)
    );
  }
  const renderItems = (items, idx = { value: 0 }, level = 1) => {
    const listItems = [];
    while (idx.value < items.length) {
      const item = items[idx.value];
      if (item.level < level) {
        break;
      }
      if (item.childNodes) {
        addGroupNode(listItems, items, idx, item.id, item.label);
      } else {
        addLeafNode(listItems, item, idx);
      }
    }
    return listItems;
  };
  const renderContent = () => {
    if (collectionHook.data.length) {
      return renderItems(collectionHook.data);
    }
  };
  return /* @__PURE__ */ jsxRuntime.jsx("div", {
    ...htmlAttributes,
    ...listHandlers,
    ...listProps,
    className: clsx.clsx(withBaseName(), className),
    id: `Tree-${id}`,
    ref: core.useForkRef(rootRef, forwardedRef),
    style: { ...styleProp, ...autoSize },
    tabIndex: 0,
    children: /* @__PURE__ */ jsxRuntime.jsx("ul", {
      className: withBaseName("scrollingContentContainer"),
      ref: contentRef,
      role: "tree",
      children: renderContent()
    })
  });
});

exports.Tree = Tree;
//# sourceMappingURL=Tree.js.map
