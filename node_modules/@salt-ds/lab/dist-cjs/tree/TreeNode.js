'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var clsx = require('clsx');
var icons = require('@salt-ds/icons');
var core = require('@salt-ds/core');
var window = require('@salt-ds/window');
var styles = require('@salt-ds/styles');
var TreeNode$1 = require('./TreeNode.css.js');

const withBaseName = core.makePrefixer("saltTreeNode");
const TreeNode = ({
  "aria-level": ariaLevel,
  children,
  className: classNameProp,
  description,
  highlighted,
  idx,
  isLeaf = false,
  label,
  onMouseEnter,
  selected,
  ...props
}) => {
  const targetWindow = window.useWindow();
  styles.useComponentCssInjection({
    testId: "salt-tree-node",
    css: TreeNode$1,
    window: targetWindow
  });
  const className = clsx.clsx(withBaseName(), classNameProp, {
    [withBaseName("highlighted")]: highlighted
  });
  return /* @__PURE__ */ jsxRuntime.jsxs("li", {
    ...props,
    className,
    role: "presentation",
    children: [
      /* @__PURE__ */ jsxRuntime.jsxs("div", {
        "aria-level": ariaLevel,
        "aria-selected": selected || void 0,
        className: withBaseName("item"),
        onMouseEnter,
        role: "treeitem",
        children: [
          isLeaf === false ? /* @__PURE__ */ jsxRuntime.jsx("span", {
            className: withBaseName("toggle"),
            "data-toggle": true,
            children: /* @__PURE__ */ jsxRuntime.jsx(icons.TriangleRightIcon, {})
          }) : null,
          /* @__PURE__ */ jsxRuntime.jsx("div", {
            className: withBaseName("label"),
            children: label
          }),
          description !== void 0 ? /* @__PURE__ */ jsxRuntime.jsx("div", {
            className: withBaseName("description"),
            children: description
          }) : null
        ]
      }),
      children
    ]
  });
};

exports.TreeNode = TreeNode;
//# sourceMappingURL=TreeNode.js.map
