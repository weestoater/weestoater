'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var core = require('@salt-ds/core');
var React = require('react');
var styles = require('@salt-ds/styles');
var window = require('@salt-ds/window');
var TabNext$1 = require('./TabNext.css.js');
var clsx = require('clsx');
var reactOverflow = require('@fluentui/react-overflow');
var TabNextContext = require('./TabNextContext.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var clsx__default = /*#__PURE__*/_interopDefaultLegacy(clsx);

const withBaseName = core.makePrefixer("saltTabNext");
const TabNext = React.forwardRef(function Tab(props, ref) {
  const {
    children,
    className,
    disabled: disabledProp,
    onClick,
    onFocus,
    value,
    ...rest
  } = props;
  const targetWindow = window.useWindow();
  styles.useComponentCssInjection({
    testId: "salt-tab-next",
    css: TabNext$1,
    window: targetWindow
  });
  const {
    activeColor,
    isActive,
    activate,
    isFocusable,
    setFocusable,
    disabled: tabstripDisabled,
    unregisterTab,
    registerTab,
    variant
  } = TabNextContext.useTabs();
  const active = isActive(value);
  const focusable = isFocusable(value);
  const disabled = tabstripDisabled || disabledProp;
  const handleClick = (event) => {
    activate(event);
    onClick == null ? void 0 : onClick(event);
  };
  const handleFocus = (event) => {
    setFocusable(value);
    onFocus == null ? void 0 : onFocus(event);
  };
  React.useEffect(() => {
    registerTab({ value, label: children });
    return () => unregisterTab(value);
  }, [children, registerTab, unregisterTab, value]);
  return /* @__PURE__ */ jsxRuntime.jsx(reactOverflow.OverflowItem, {
    id: value,
    priority: active ? 2 : 1,
    children: /* @__PURE__ */ jsxRuntime.jsx("div", {
      className: withBaseName("wrapper"),
      children: /* @__PURE__ */ jsxRuntime.jsx("button", {
        className: clsx__default["default"](
          withBaseName(),
          withBaseName(variant),
          withBaseName(activeColor),
          className
        ),
        "data-value": value,
        "aria-selected": active,
        disabled,
        value,
        ref,
        role: "tab",
        onClick: handleClick,
        onFocus: handleFocus,
        tabIndex: focusable && !disabled ? 0 : -1,
        ...rest,
        children
      })
    })
  });
});

exports.TabNext = TabNext;
//# sourceMappingURL=TabNext.js.map
