'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
var core = require('@salt-ds/core');
var icons = require('@salt-ds/icons');
var reactOverflow = require('@fluentui/react-overflow');
require('../dropdown/DropdownBase.js');
require('../dropdown/DropdownButton.js');
var Dropdown = require('../dropdown/Dropdown.js');
require('../responsive/useResizeObserver.js');
require('../form-field-context-legacy/FormFieldLegacyContext.js');

const OverflowMenu = React.forwardRef(
  function OverflowMenu2(props, forwardedRef) {
    const { tabs, ...rest } = props;
    const { ref, overflowCount, isOverflowing } = reactOverflow.useOverflowMenu();
    const handleRef = core.useForkRef(ref, forwardedRef);
    const itemVisibility = reactOverflow.useOverflowContext(
      (context) => context.itemVisibility
    );
    const tabList = tabs.filter(({ value }) => !itemVisibility[value]);
    if (!isOverflowing)
      return null;
    return /* @__PURE__ */ jsxRuntime.jsx(Dropdown.Dropdown, {
      "aria-label": `${overflowCount} more tabs`,
      triggerComponent: /* @__PURE__ */ jsxRuntime.jsx(core.Button, {
        "aria-label": "More tabs",
        variant: "secondary",
        role: "combobox",
        children: /* @__PURE__ */ jsxRuntime.jsx(icons.OverflowMenuIcon, {
          "aria-hidden": true,
          style: { margin: 0 }
        })
      }),
      width: "auto",
      ref: handleRef,
      source: tabList,
      selected: null,
      ...rest
    });
  }
);

exports.OverflowMenu = OverflowMenu;
//# sourceMappingURL=OverflowMenu.js.map
