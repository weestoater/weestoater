'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var core = require('@salt-ds/core');
var React = require('react');
var DropdownBase = require('../dropdown/DropdownBase.js');
require('../dropdown/DropdownButton.js');
require('../dropdown/Dropdown.js');
require('../responsive/useResizeObserver.js');
require('../form-field-context-legacy/FormFieldLegacyContext.js');
require('../list/Highlighter.js');
require('../list/ListItem.js');
var List = require('../list/List.js');
var collectionProvider = require('../common-hooks/collectionProvider.js');
require('../common-hooks/keyUtils.js');
var useCollectionItems = require('../common-hooks/useCollectionItems.js');
require('../list/VirtualizedList.js');
var InputLegacy = require('../input-legacy/InputLegacy.js');
require('../input-legacy/StaticInputAdornment.js');
var useCombobox = require('./useCombobox.js');

const ComboBox = React.forwardRef(function Combobox({
  InputProps: InputProps2,
  ListProps: ListProps2,
  ListItem,
  "aria-label": ariaLabel,
  allowFreeText,
  children,
  defaultIsOpen,
  defaultValue,
  disabled,
  onBlur,
  onFocus,
  onChange,
  onSelect,
  getFilterRegex,
  id: idProp,
  isOpen: isOpenProp,
  itemToString,
  onOpenChange: onOpenChangeProp,
  onSelectionChange,
  selectionStrategy,
  source,
  stringToItem,
  value: valueProp,
  width = 180,
  ...props
}, forwardedRef) {
  const id = core.useIdMemo(idProp);
  const collectionHook = useCollectionItems.useCollectionItems({
    id,
    source,
    children,
    options: {
      filterPattern: valueProp != null ? valueProp : defaultValue,
      getFilterRegex,
      itemToString
    }
  });
  const {
    focusVisible,
    highlightedIndex,
    inputProps,
    isOpen,
    listHandlers,
    listControlProps: controlProps,
    onOpenChange,
    selected
  } = useCombobox.useCombobox({
    InputProps: InputProps2,
    allowFreeText,
    ariaLabel,
    collectionHook,
    defaultIsOpen,
    defaultValue,
    disabled,
    onBlur,
    onFocus,
    onChange,
    onSelect,
    id,
    isOpen: isOpenProp,
    itemToString,
    label: "ComboBox",
    onOpenChange: onOpenChangeProp,
    onSelectionChange,
    selectionStrategy,
    stringToItem,
    value: valueProp
  });
  const collectionItemsToItem = React.useCallback(
    (sel) => {
      if (Array.isArray(sel)) {
        return sel.map((i) => i.value);
      } else if (sel) {
        return sel.value;
      } else {
        return sel;
      }
    },
    []
  );
  return /* @__PURE__ */ jsxRuntime.jsx(collectionProvider.CollectionProvider, {
    collectionHook,
    children: /* @__PURE__ */ jsxRuntime.jsxs(DropdownBase.DropdownBase, {
      ...props,
      fullWidth: true,
      id,
      isOpen,
      onOpenChange,
      openOnFocus: true,
      ref: forwardedRef,
      width,
      children: [
        /* @__PURE__ */ jsxRuntime.jsx(InputLegacy.InputLegacy, {
          ...inputProps,
          disabled,
          ...controlProps
        }),
        /* @__PURE__ */ jsxRuntime.jsx(List.List, {
          ...ListProps2,
          ListItem,
          focusVisible,
          highlightedIndex,
          itemTextHighlightPattern: inputProps.value || void 0,
          id: `${id}-list`,
          listHandlers,
          onSelectionChange,
          selected: collectionItemsToItem(selected),
          selectionStrategy
        })
      ]
    })
  });
});

exports.ComboBox = ComboBox;
//# sourceMappingURL=ComboBox.js.map
