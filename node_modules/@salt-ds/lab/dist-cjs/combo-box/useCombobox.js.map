{"version":3,"file":"useCombobox.js","sources":["../src/combo-box/useCombobox.ts"],"sourcesContent":["import { useControlled } from \"@salt-ds/core\";\nimport {\n  ChangeEvent,\n  FocusEvent,\n  KeyboardEvent,\n  MouseEvent,\n  SyntheticEvent,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\";\nimport { ListHookProps, ListHookResult, useList } from \"../list\";\nimport { DropdownHookResult, DropdownHookProps } from \"../dropdown\";\nimport {\n  CollectionItem,\n  itemToString as defaultItemToString,\n  SelectionChangeHandler,\n  SelectionStrategy,\n  SingleSelectionStrategy,\n} from \"../common-hooks\";\nimport { InputLegacyProps as InputProps } from \"../input-legacy\";\n\nconst NULL_REF = { current: null };\nconst EnterOnly = [\"Enter\"];\n\nexport interface ComboboxHookProps<Item, Strategy extends SelectionStrategy>\n  extends Partial<Omit<DropdownHookProps, \"id\" | \"onKeyDown\">>,\n    Pick<InputProps, \"onBlur\" | \"onChange\" | \"onFocus\" | \"onSelect\">,\n    Omit<\n      ListHookProps<Item, Strategy>,\n      \"containerRef\" | \"defaultSelected\" | \"selected\" | \"onSelect\"\n    > {\n  InputProps?: InputProps;\n  allowFreeText?: boolean;\n  ariaLabel?: string;\n  defaultValue?: string;\n  id: string;\n  itemToString?: (item: Item) => string;\n  stringToItem?: (value?: string) => Item | null | undefined;\n  value?: string;\n}\n\nexport interface ComboboxHookResult<Item, Selection extends SelectionStrategy>\n  extends Pick<\n      ListHookResult<Item, Selection>,\n      | \"focusVisible\"\n      | \"highlightedIndex\"\n      | \"listControlProps\"\n      | \"listHandlers\"\n      | \"selected\"\n    >,\n    Partial<DropdownHookResult> {\n  inputProps: InputProps;\n  onOpenChange: (isOpen: boolean) => void;\n}\n\nexport const useCombobox = <\n  Item,\n  Selection extends SelectionStrategy = \"default\"\n>({\n  allowFreeText,\n  ariaLabel,\n  collectionHook,\n  defaultIsOpen,\n  defaultValue,\n  disabled,\n  onBlur,\n  onFocus,\n  onChange,\n  onSelect,\n  id,\n  isOpen: isOpenProp,\n  itemToString = defaultItemToString as (item: Item) => string,\n  onOpenChange,\n  onSelectionChange,\n  selectionStrategy,\n  stringToItem,\n  value: valueProp,\n  InputProps: inputProps = {\n    onBlur,\n    onFocus,\n    onChange,\n    onSelect,\n  },\n}: ComboboxHookProps<Item, Selection>): ComboboxHookResult<Item, Selection> => {\n  type selectedCollectionType = Selection extends SingleSelectionStrategy\n    ? CollectionItem<Item> | null\n    : CollectionItem<Item>[];\n  const isMultiSelect =\n    selectionStrategy === \"multiple\" || selectionStrategy === \"extended\";\n\n  const selectedValue = collectionHook.stringToCollectionItem<Selection>(\n    valueProp ?? defaultValue ?? null\n  );\n\n  const {\n    data: indexPositions,\n    itemToCollectionItem,\n    setFilterPattern,\n    stringToCollectionItem,\n  } = collectionHook;\n  const setHighlightedIndexRef = useRef<null | ((i: number) => void)>(null);\n  const setSelectedRef = useRef<\n    null | ListHookResult<Item, Selection>[\"setSelected\"]\n  >(null);\n  // Input select events are used to identify user navigation within the input text.\n  // The initial select event fired on focus is an exception that we ignore.\n  const ignoreSelectOnFocus = useRef(true);\n  const selectedRef = useRef<selectedCollectionType>(selectedValue);\n\n  const [isOpen, setIsOpen] = useControlled<boolean>({\n    controlled: isOpenProp,\n    default: defaultIsOpen ?? false,\n    name: \"useDropdownList\",\n  });\n\n  const [value, setValue] = useControlled({\n    controlled: valueProp,\n    default: defaultValue ?? \"\",\n    name: \"ComboBox\",\n    state: \"value\",\n  });\n\n  const collectionItemsToItem = useCallback(\n    (\n      sel: CollectionItem<Item> | null | CollectionItem<Item>[]\n    ): Selection extends SingleSelectionStrategy ? Item | null : Item[] => {\n      type returnType = Selection extends SingleSelectionStrategy\n        ? Item | null\n        : Item[];\n      if (Array.isArray(sel)) {\n        return sel.map((i) => i.value) as returnType;\n      } else if (sel) {\n        return sel.value as returnType;\n      } else {\n        return sel as returnType;\n      }\n    },\n    []\n  );\n\n  const [disableAriaActiveDescendant, setDisableAriaActiveDescendant] =\n    useState(true);\n  const [quickSelection, setQuickSelection] = useState(false);\n\n  const highlightSelectedItem = useCallback(\n    (selected: selectedCollectionType = selectedRef.current) => {\n      if (Array.isArray(selected)) {\n        console.log(\"TODO multi selection\");\n      } else if (selected == null) {\n        setHighlightedIndexRef.current?.(-1);\n      } else {\n        const indexOfSelectedItem = indexPositions.indexOf(selected);\n        setHighlightedIndexRef.current?.(indexOfSelectedItem);\n      }\n    },\n    [indexPositions]\n  );\n\n  const setTextValue = useCallback(\n    (value: string) => {\n      setValue(value);\n      setFilterPattern(value === \"\" ? undefined : value);\n    },\n    [setFilterPattern, setValue]\n  );\n\n  const reconcileInput = useCallback(\n    (selected: selectedCollectionType = selectedRef.current) => {\n      let value = \"\";\n      if (Array.isArray(selected)) {\n        console.log(\"TODO multi selection\");\n      } else if (selected != null && selected.value !== null) {\n        value = itemToString(selected.value);\n      }\n      setTextValue(value);\n      if (value === \"\") {\n        setHighlightedIndexRef.current?.(-1);\n      } else {\n        highlightSelectedItem(selected);\n      }\n    },\n    [highlightSelectedItem, itemToString, setTextValue]\n  );\n\n  const applySelection = useCallback(\n    (evt: any, selected: selectedCollectionType) => {\n      if (!isMultiSelect) {\n        setIsOpen(false);\n      }\n      selectedRef.current = selected;\n      reconcileInput(selected);\n      onSelectionChange?.(evt, collectionItemsToItem(selected ?? null));\n    },\n    [\n      collectionItemsToItem,\n      isMultiSelect,\n      onSelectionChange,\n      reconcileInput,\n      setIsOpen,\n    ]\n  );\n\n  const handleSelectionChange = useCallback<\n    SelectionChangeHandler<Item, Selection>\n  >(\n    (evt, selected) => {\n      if (!isMultiSelect) {\n        const selectedCollectionItem = itemToCollectionItem<\n          Selection,\n          typeof selected\n        >(selected);\n        applySelection(evt, selectedCollectionItem);\n      }\n    },\n    [applySelection, isMultiSelect, itemToCollectionItem]\n  );\n\n  const handleFirstItemSelection = useCallback(\n    (evt: KeyboardEvent | ChangeEvent) => {\n      if (\n        !allowFreeText &&\n        (evt as KeyboardEvent).key === \"Enter\" &&\n        quickSelection\n      ) {\n        const [firstItem] = indexPositions;\n        applySelection(evt, firstItem as selectedCollectionType);\n      }\n    },\n    [allowFreeText, applySelection, indexPositions, quickSelection]\n  );\n\n  const {\n    onKeyDown: inputOnKeyDown,\n    onFocus: inputOnFocus,\n    onChange: inputOnChange,\n    onBlur: inputOnBlur,\n    onSelect: inputOnSelect,\n  } = inputProps;\n\n  const handleInputKeyDown = useCallback(\n    (evt: KeyboardEvent) => {\n      if (\"Escape\" === evt.key) {\n        if (allowFreeText) {\n          setTextValue(\"\");\n        } else {\n          reconcileInput();\n        }\n      } else if (\"Tab\" === evt.key) {\n        if (!allowFreeText) {\n          reconcileInput();\n        }\n      }\n\n      handleFirstItemSelection(evt);\n\n      inputOnKeyDown?.(evt as KeyboardEvent<HTMLInputElement>);\n    },\n    [\n      allowFreeText,\n      handleFirstItemSelection,\n      inputOnKeyDown,\n      reconcileInput,\n      setTextValue,\n    ]\n  );\n\n  const handleKeyboardNavigation = useCallback(() => {\n    setDisableAriaActiveDescendant(false);\n  }, []);\n\n  const {\n    focusVisible,\n    setHighlightedIndex,\n    highlightedIndex,\n    listControlProps,\n    listHandlers: listHookListHandlers,\n    selected,\n    setSelected,\n  } = useList<Item, Selection>({\n    collectionHook,\n    defaultHighlightedIndex: -1,\n    disableAriaActiveDescendant,\n    disableHighlightOnFocus: true,\n    disableTypeToSelect: true,\n    onKeyboardNavigation: handleKeyboardNavigation,\n    onKeyDown: handleInputKeyDown,\n    onSelectionChange: handleSelectionChange,\n    containerRef: NULL_REF,\n    // we are controlling selection from a ref value - is this right ?\n    selected: selectedRef.current,\n    selectionKeys: EnterOnly,\n    selectionStrategy,\n    tabToSelect: !isMultiSelect,\n  });\n\n  setHighlightedIndexRef.current = setHighlightedIndex;\n  setSelectedRef.current = setSelected;\n  // selectedRef.current = selected;\n\n  const handleOpenChange = useCallback(\n    (open: boolean) => {\n      setIsOpen(open);\n      if (!open) {\n        setQuickSelection(false);\n      }\n      onOpenChange?.(open);\n    },\n    [onOpenChange, setIsOpen]\n  );\n\n  const { onClick: listHandlersOnClick } = listHookListHandlers;\n  const handleListClick = useCallback(\n    (evt: MouseEvent) => {\n      //TODO use ref\n      document.getElementById(`${id}-input`)?.focus();\n      // const inputEl = inputRef.current;\n      console.log(\"handle list click\");\n      listHandlersOnClick?.(evt);\n      // if (inputEl != null) {\n      //   inputEl.focus();\n      // }\n\n      // if (restListProps.onClick) {\n      //   restListProps.onClick(event as MouseEvent<HTMLDivElement>);\n      // }\n\n      // notifyPopper(event);\n    },\n    [id, listHandlersOnClick]\n  );\n\n  const handleInputChange = useCallback(\n    (evt: ChangeEvent<HTMLInputElement>) => {\n      const newValue = evt.target.value;\n      setValue(newValue);\n\n      if (newValue?.trim().length) {\n        setFilterPattern(newValue);\n      } else {\n        setFilterPattern(undefined);\n        if (selectedRef.current !== null) {\n          onSelectionChange?.(\n            evt,\n            null as Selection extends SingleSelectionStrategy\n              ? Item | null\n              : Item[]\n          );\n        }\n        selectedRef.current = null as selectedCollectionType;\n      }\n\n      setIsOpen(true);\n\n      setQuickSelection(newValue.length > 0 && !allowFreeText);\n\n      inputOnChange?.(evt, newValue);\n    },\n    [allowFreeText, inputOnChange, setFilterPattern, setIsOpen, setValue]\n  );\n\n  const { onFocus: listOnFocus } = listControlProps;\n  const handleInputFocus = useCallback(\n    (evt: FocusEvent<HTMLInputElement>) => {\n      setDisableAriaActiveDescendant(false);\n      listOnFocus?.(evt);\n      inputOnFocus?.(evt);\n    },\n    [inputOnFocus, listOnFocus]\n  );\n\n  const listFocused = useCallback(\n    (evt: FocusEvent) => {\n      const element = evt.relatedTarget as HTMLElement;\n      return element?.id === `${id}-list`;\n      return true;\n    },\n    [id]\n  );\n\n  // When focus leaves a free text combo, check to see if the entered text is\n  // a valid selection, if so fire a change event\n  const selectInputValue = useCallback(\n    (evt: ChangeEvent) => {\n      const text = value.trim();\n      if (text) {\n        const selectedCollectionItem = stringToCollectionItem<\"default\">(\n          text\n        ) as selectedCollectionType;\n        if (selectedCollectionItem) {\n          if (Array.isArray(selectedCollectionItem)) {\n            // TODO multi select\n          } else if (selectedCollectionItem !== selected) {\n            setSelectedRef.current?.(selectedCollectionItem);\n            onSelectionChange?.(\n              evt,\n              selectedCollectionItem.value as Selection extends SingleSelectionStrategy\n                ? Item | null\n                : Item[]\n            );\n          }\n        } else if (stringToItem) {\n          const item = stringToItem(text);\n          if (item) {\n            console.log(\"we have a new item\");\n          }\n        }\n        // Hoiw do we check if string is Item\n      }\n    },\n    [onSelectionChange, selected, stringToItem, stringToCollectionItem, value]\n  );\n\n  const { onBlur: listOnBlur } = listControlProps;\n  const handleInputBlur = useCallback(\n    (evt: FocusEvent<HTMLInputElement>) => {\n      if (listFocused(evt)) {\n        // nothing doing\n      } else {\n        listOnBlur?.(evt);\n        inputOnBlur?.(evt);\n        if (allowFreeText) {\n          selectInputValue(evt as ChangeEvent);\n        } else {\n          reconcileInput();\n        }\n        setDisableAriaActiveDescendant(true);\n        ignoreSelectOnFocus.current = true;\n      }\n    },\n    [\n      allowFreeText,\n      listFocused,\n      inputOnBlur,\n      listOnBlur,\n      reconcileInput,\n      selectInputValue,\n    ]\n  );\n\n  const handleInputSelect = useCallback(\n    (event: SyntheticEvent<HTMLDivElement>) => {\n      if (ignoreSelectOnFocus.current) {\n        ignoreSelectOnFocus.current = false;\n      } else {\n        setDisableAriaActiveDescendant(true);\n      }\n      inputOnSelect?.(event);\n    },\n    [inputOnSelect]\n  );\n\n  // If we have selected item(s) and we filter down the list by typing,\n  // the position of selected items within the list may be changing.\n  // Relocate highlighted index to the selection whenever this happens,\n  // so if we resume keyboard navigation, navigation begins from the selected\n  // item.\n  useEffect(() => {\n    highlightSelectedItem();\n    // TODO may need to scrollIntoView\n    if (indexPositions.length === 0) {\n      setIsOpen(false);\n    }\n  }, [highlightSelectedItem, indexPositions.length, setIsOpen]);\n\n  // const activeDescendant: string | undefined = selectionChanged\n  //   ? \"\"\n  //   : undefined;\n\n  const mergedInputProps = {\n    ...inputProps.inputProps,\n    // \"aria-owns\": listId,\n    \"aria-label\": ariaLabel,\n  };\n\n  return {\n    focusVisible,\n    highlightedIndex,\n    isOpen,\n    onOpenChange: handleOpenChange,\n    inputProps: {\n      ...inputProps,\n      // \"aria-activedescendant\": activeDescendant,\n      id: `${id}-input`,\n      inputProps: mergedInputProps,\n      onChange: handleInputChange,\n      onSelect: handleInputSelect,\n      role: \"combobox\",\n      value,\n    },\n    // listControlProps,\n    listControlProps: {\n      ...listControlProps,\n      onBlur: handleInputBlur,\n      onFocus: handleInputFocus,\n    },\n    listHandlers: {\n      ...listHookListHandlers,\n      onClick: handleListClick,\n    },\n    selected,\n  };\n};\n"],"names":["itemToString","defaultItemToString","useRef","useControlled","useCallback","useState","selected","_a","value","useList","useEffect"],"mappings":"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"}