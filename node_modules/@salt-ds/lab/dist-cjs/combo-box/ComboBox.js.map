{"version":3,"file":"ComboBox.js","sources":["../src/combo-box/ComboBox.tsx"],"sourcesContent":["import { useIdMemo as useId } from \"@salt-ds/core\";\nimport { ForwardedRef, forwardRef, ReactElement, useCallback } from \"react\";\n\nimport { DropdownBase, DropdownBaseProps } from \"../dropdown\";\nimport { List, ListProps } from \"../list\";\nimport {\n  InputLegacy as Input,\n  InputLegacyProps as InputProps,\n} from \"../input-legacy\";\n\nimport {\n  CollectionItem,\n  CollectionProvider,\n  SelectionProps,\n  SelectionStrategy,\n  SingleSelectionStrategy,\n  useCollectionItems,\n} from \"../common-hooks\";\nimport { useCombobox } from \"./useCombobox\";\n\nexport interface ComboBoxProps<\n  Item = string,\n  Selection extends SelectionStrategy = \"default\"\n> extends Omit<\n      DropdownBaseProps,\n      \"triggerComponent\" | \"onBlur\" | \"onChange\" | \"onFocus\"\n    >,\n    Pick<InputProps, \"onBlur\" | \"onChange\" | \"onFocus\" | \"onSelect\">,\n    Pick<\n      ListProps<Item, Selection>,\n      \"ListItem\" | \"itemToString\" | \"source\" | \"width\"\n    >,\n    Pick<\n      SelectionProps<Item, Selection>,\n      \"onSelectionChange\" | \"selectionStrategy\"\n    > {\n  InputProps?: InputProps;\n  ListProps?: Omit<\n    ListProps<Item, Selection>,\n    \"ListItem\" | \"itemToString\" | \"source\"\n  >;\n  allowFreeText?: boolean;\n  defaultValue?: string;\n  getFilterRegex?: (inputValue: string) => RegExp;\n  stringToItem?: (value?: string) => Item | null | undefined;\n  value?: string;\n}\n\nexport const ComboBox = forwardRef(function Combobox<\n  Item = string,\n  Selection extends SelectionStrategy = \"default\"\n>(\n  {\n    InputProps,\n    ListProps,\n    ListItem,\n    \"aria-label\": ariaLabel,\n    allowFreeText,\n    children,\n    defaultIsOpen,\n    defaultValue,\n    disabled,\n    onBlur,\n    onFocus,\n    onChange,\n    onSelect,\n    getFilterRegex,\n    id: idProp,\n    isOpen: isOpenProp,\n    itemToString,\n    onOpenChange: onOpenChangeProp,\n    onSelectionChange,\n    selectionStrategy,\n    source,\n    stringToItem,\n    value: valueProp,\n    width = 180,\n    ...props\n  }: ComboBoxProps<Item, Selection>,\n  forwardedRef: ForwardedRef<HTMLDivElement>\n) {\n  const id = useId(idProp);\n\n  const collectionHook = useCollectionItems<Item>({\n    id,\n    source,\n    children,\n    options: {\n      filterPattern: valueProp ?? defaultValue,\n      getFilterRegex,\n      itemToString,\n    },\n  });\n\n  const {\n    focusVisible,\n    highlightedIndex,\n    inputProps,\n    isOpen,\n    listHandlers,\n    listControlProps: controlProps,\n    onOpenChange,\n    selected,\n  } = useCombobox<Item, Selection>({\n    InputProps,\n    allowFreeText,\n    ariaLabel,\n    collectionHook,\n    defaultIsOpen,\n    defaultValue,\n    disabled,\n    onBlur,\n    onFocus,\n    onChange,\n    onSelect,\n    id,\n    isOpen: isOpenProp,\n    itemToString,\n    label: \"ComboBox\",\n    onOpenChange: onOpenChangeProp,\n    onSelectionChange,\n    selectionStrategy,\n    stringToItem,\n    value: valueProp,\n  });\n\n  const collectionItemsToItem = useCallback(\n    (\n      sel?: CollectionItem<Item> | null | CollectionItem<Item>[]\n    ):\n      | undefined\n      | (Selection extends SingleSelectionStrategy ? Item | null : Item[]) => {\n      type returnType = Selection extends SingleSelectionStrategy\n        ? Item | null\n        : Item[];\n      if (Array.isArray(sel)) {\n        return sel.map((i) => i.value) as returnType;\n      } else if (sel) {\n        return sel.value as returnType;\n      } else {\n        return sel as returnType;\n      }\n    },\n    []\n  );\n\n  return (\n    <CollectionProvider<Item> collectionHook={collectionHook}>\n      <DropdownBase\n        {...props}\n        fullWidth\n        id={id}\n        isOpen={isOpen}\n        onOpenChange={onOpenChange}\n        openOnFocus\n        ref={forwardedRef}\n        width={width}\n      >\n        <Input\n          {...inputProps}\n          disabled={disabled}\n          // ref={useForkRef(setInputRef, setHookInputRef)}\n          {...controlProps}\n        />\n\n        <List<Item, Selection>\n          {...ListProps}\n          ListItem={ListItem}\n          focusVisible={focusVisible}\n          highlightedIndex={highlightedIndex}\n          itemTextHighlightPattern={inputProps.value || undefined}\n          id={`${id}-list`}\n          listHandlers={listHandlers}\n          onSelectionChange={onSelectionChange}\n          selected={collectionItemsToItem(selected)}\n          selectionStrategy={selectionStrategy}\n        />\n      </DropdownBase>\n    </CollectionProvider>\n  );\n}) as <Item, Selection extends SelectionStrategy = \"default\">(\n  props: ComboBoxProps<Item, Selection> & {\n    ref?: ForwardedRef<HTMLDivElement>;\n  }\n) => ReactElement<ComboBoxProps<Item, Selection>>;\n"],"names":["forwardRef","InputProps","ListProps","useId","useCollectionItems","useCombobox","useCallback","jsx","CollectionProvider","jsxs","DropdownBase","Input","List"],"mappings":"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"}