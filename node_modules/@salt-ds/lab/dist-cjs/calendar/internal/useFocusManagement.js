'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var CalendarContext = require('./CalendarContext.js');
var date = require('@internationalized/date');
var utils = require('./utils.js');

function useFocusManagement({ date: date$1 }) {
  const {
    helpers: { setFocusedDate }
  } = CalendarContext.useCalendarContext();
  const handleClick = (event) => {
    setFocusedDate(event, date$1);
  };
  const handleKeyDown = (event) => {
    let newDate = date$1;
    switch (event.key) {
      case "ArrowUp":
        newDate = date$1.subtract({ weeks: 1 });
        break;
      case "ArrowDown":
        newDate = date$1.add({ weeks: 1 });
        break;
      case "ArrowLeft":
        newDate = date$1.subtract({ days: 1 });
        break;
      case "ArrowRight":
        newDate = date$1.add({ days: 1 });
        break;
      case "Home":
        newDate = date.startOfWeek(date$1, utils.getCurrentLocale());
        break;
      case "End":
        newDate = date.endOfWeek(date$1, utils.getCurrentLocale());
        break;
      case "PageUp":
        if (event.shiftKey) {
          newDate = date$1.subtract({ years: 1 });
        } else {
          newDate = date$1.subtract({ months: 1 });
        }
        break;
      case "PageDown":
        if (event.shiftKey) {
          newDate = date$1.add({ years: 1 });
        } else {
          newDate = date$1.add({ months: 1 });
        }
        break;
    }
    setFocusedDate(event, newDate);
  };
  const handleFocus = (event) => {
    setFocusedDate(event, date$1);
  };
  return {
    handleClick,
    handleKeyDown,
    handleFocus
  };
}

exports.useFocusManagement = useFocusManagement;
//# sourceMappingURL=useFocusManagement.js.map
