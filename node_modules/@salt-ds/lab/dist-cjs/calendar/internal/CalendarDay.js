'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var core = require('@salt-ds/core');
var clsx = require('clsx');
var React = require('react');
var useCalendarDay = require('../useCalendarDay.js');
var CalendarDay$1 = require('./CalendarDay.css.js');
var utils = require('./utils.js');
var window = require('@salt-ds/window');
var styles = require('@salt-ds/styles');

const withBaseName = core.makePrefixer("saltCalendarDay");
const CalendarDay = React.forwardRef(
  function CalendarDay2(props, ref) {
    const { className, day, renderDayContents, month, TooltipProps: TooltipProps2, ...rest } = props;
    const targetWindow = window.useWindow();
    styles.useComponentCssInjection({
      testId: "salt-calendar-day",
      css: CalendarDay$1,
      window: targetWindow
    });
    const dayRef = React.useRef(null);
    const buttonRef = core.useForkRef(ref, dayRef);
    const { status, dayProps, unselectableReason, highlightedReason } = useCalendarDay.useCalendarDay(
      {
        date: day,
        month
      },
      dayRef
    );
    const { outOfRange, today, unselectable, highlighted, hidden, disabled } = status;
    return /* @__PURE__ */ jsxRuntime.jsx(core.Tooltip, {
      hideIcon: true,
      status: unselectableReason ? "error" : "info",
      content: unselectableReason || highlightedReason || "Date is out of range",
      disabled: !unselectableReason && !highlightedReason,
      placement: "top",
      enterDelay: 0,
      leaveDelay: 0,
      ...TooltipProps2,
      children: /* @__PURE__ */ jsxRuntime.jsx("button", {
        "aria-label": utils.formatDate(day),
        disabled,
        ...dayProps,
        ref: buttonRef,
        ...rest,
        className: clsx.clsx(
          withBaseName(),
          {
            [withBaseName("hidden")]: hidden,
            [withBaseName("outOfRange")]: outOfRange,
            [withBaseName("disabled")]: disabled,
            [withBaseName("unselectable")]: !!unselectable,
            [withBaseName("highlighted")]: !!highlighted
          },
          dayProps.className,
          className
        ),
        children: /* @__PURE__ */ jsxRuntime.jsx("span", {
          className: clsx.clsx(withBaseName("content"), {
            [withBaseName("today")]: today
          }),
          children: renderDayContents ? renderDayContents(day, status) : utils.formatDate(day, { day: "numeric" })
        })
      })
    });
  }
);

exports.CalendarDay = CalendarDay;
//# sourceMappingURL=CalendarDay.js.map
