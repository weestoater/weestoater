'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var core = require('@salt-ds/core');
var React = require('react');
var clsx = require('clsx');
var useList = require('./useList.js');
var window = require('@salt-ds/window');
var styles = require('@salt-ds/styles');
var ListNext$1 = require('./ListNext.css.js');
var ListNextContext = require('./ListNextContext.js');

const withBaseName = core.makePrefixer("saltListNext");
const ListNext = React.forwardRef(
  function ListNext2({
    children,
    className,
    disabled,
    disableFocus,
    id,
    onSelect,
    onFocus,
    onBlur,
    onKeyDown,
    onMouseOver,
    highlightedItem,
    selected,
    defaultSelected,
    onChange,
    ...rest
  }, ref) {
    const targetWindow = window.useWindow();
    styles.useComponentCssInjection({
      testId: "salt-list-next",
      css: ListNext$1,
      window: targetWindow
    });
    const listId = core.useId(id);
    const listRef = React.useRef(null);
    const handleRef = core.useForkRef(listRef, ref);
    const {
      focusHandler,
      keyDownHandler,
      blurHandler,
      mouseOverHandler,
      activeDescendant,
      contextValue,
      focusVisibleRef
    } = useList.useList({
      disabled,
      highlightedItem,
      selected,
      defaultSelected,
      onChange,
      onSelect,
      id: listId,
      ref: listRef
    });
    const setListRef = core.useForkRef(focusVisibleRef, handleRef);
    const handleFocus = (event) => {
      focusHandler(event);
      onFocus == null ? void 0 : onFocus(event);
    };
    const handleKeyDown = (event) => {
      if (disableFocus) {
        event.preventDefault();
        return;
      }
      keyDownHandler(event);
      onKeyDown == null ? void 0 : onKeyDown(event);
    };
    const handleBlur = (event) => {
      blurHandler();
      onBlur == null ? void 0 : onBlur(event);
    };
    const handleMouseOver = (event) => {
      mouseOverHandler();
      onMouseOver == null ? void 0 : onMouseOver(event);
    };
    return /* @__PURE__ */ jsxRuntime.jsx(ListNextContext.ListNextContext.Provider, {
      value: contextValue,
      children: /* @__PURE__ */ jsxRuntime.jsx("ul", {
        ref: setListRef,
        id: listId,
        className: clsx.clsx(withBaseName(), className),
        role: "listbox",
        tabIndex: disabled || disableFocus ? -1 : 0,
        "aria-activedescendant": disabled ? void 0 : activeDescendant,
        "aria-disabled": disabled,
        onFocus: handleFocus,
        onKeyDown: handleKeyDown,
        onBlur: handleBlur,
        onMouseOver: handleMouseOver,
        ...rest,
        children
      })
    });
  }
);

exports.ListNext = ListNext;
//# sourceMappingURL=ListNext.js.map
