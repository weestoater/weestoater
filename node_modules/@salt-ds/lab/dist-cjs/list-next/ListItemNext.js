'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
var clsx = require('clsx');
var core = require('@salt-ds/core');
var window = require('@salt-ds/window');
var styles = require('@salt-ds/styles');
var ListItemNext$1 = require('./ListItemNext.css.js');
var ListNextContext = require('./ListNextContext.js');

const withBaseName = core.makePrefixer("saltListItemNext");
const ListItemNext = React.forwardRef(
  function ListItemNext2({
    children,
    className,
    disabled: disabledProp,
    id: idProp,
    value,
    onClick,
    ...props
  }, ref) {
    const targetWindow = window.useWindow();
    styles.useComponentCssInjection({
      testId: "salt-list-item-next",
      css: ListItemNext$1,
      window: targetWindow
    });
    const id = core.useIdMemo(idProp);
    const listContext = ListNextContext.useListItem();
    if (!listContext)
      return null;
    const {
      id: contextId,
      disabled: contextDisabled,
      select,
      isSelected,
      isFocused,
      highlight,
      isHighlighted
    } = listContext;
    const itemId = `${contextId || "listNext"}--${id}`;
    const disabled = disabledProp || contextDisabled;
    const selected = isSelected(value);
    const focused = isFocused(value);
    const highlighted = isHighlighted(value);
    const handleClick = (event) => {
      if (!disabled) {
        select(event);
        onClick == null ? void 0 : onClick(event);
      }
    };
    const handleMouseMove = (event) => {
      if (!highlighted) {
        highlight(event);
      }
    };
    return /* @__PURE__ */ jsxRuntime.jsx("li", {
      ref,
      className: clsx.clsx(
        withBaseName(),
        {
          [withBaseName("disabled")]: disabled,
          [withBaseName("highlighted")]: highlighted,
          [withBaseName("focused")]: focused
        },
        className
      ),
      role: "option",
      "aria-disabled": disabled || void 0,
      "aria-selected": selected || void 0,
      id: itemId,
      "data-value": value,
      onClick: handleClick,
      onMouseMove: handleMouseMove,
      ...props,
      children
    });
  }
);

exports.ListItemNext = ListItemNext;
//# sourceMappingURL=ListItemNext.js.map
