'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var core = require('@salt-ds/core');
var icons = require('@salt-ds/icons');
var clsx = require('clsx');
var React = require('react');
var ToolbarField = require('../toolbar-field/ToolbarField.js');
var OverflowSeparator = require('./OverflowSeparator.js');
require('../../common-hooks/collectionProvider.js');
require('../../common-hooks/keyUtils.js');
var useCollectionItems = require('../../common-hooks/useCollectionItems.js');
var useKeyboardNavigationPanel = require('../../common-hooks/useKeyboardNavigationPanel.js');
require('../../responsive/useResizeObserver.js');
var DropdownBase = require('../../dropdown/DropdownBase.js');
require('../../dropdown/DropdownButton.js');
require('../../dropdown/Dropdown.js');
require('../../form-field-context-legacy/FormFieldLegacyContext.js');
var OverflowPanel$1 = require('./OverflowPanel.css.js');
var window = require('@salt-ds/window');
var styles = require('@salt-ds/styles');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

const withBaseName = core.makePrefixer("saltOverflowPanel");
const OverflowPanel = React.forwardRef(function DropdownPanel({
  children,
  className,
  defaultIsOpen,
  isOpen: isOpenProp,
  onOpenChange,
  triggerButtonIcon,
  triggerButtonLabel,
  ...props
}, forwardedRef) {
  const targetWindow = window.useWindow();
  styles.useComponentCssInjection({
    testId: "salt-overflow-panel",
    css: OverflowPanel$1,
    window: targetWindow
  });
  const id = core.useIdMemo();
  const collectionHook = useCollectionItems.useCollectionItems({
    id,
    children
  });
  const triggerRef = React.useRef(null);
  const [isOpen, setIsOpen] = core.useControlled({
    controlled: isOpenProp,
    default: defaultIsOpen || false,
    name: "DropdownPanel"
  });
  const { highlightedIndex: highlightedIdx, ...keyboardHook } = useKeyboardNavigationPanel.useKeyboardNavigationPanel({
    cycleFocus: true,
    defaultHighlightedIndex: 0,
    focusOnHighlight: true,
    indexPositions: collectionHook.data
  });
  const focusTrigger = React.useCallback(() => {
    if (triggerRef.current) {
      triggerRef.current.focus();
    }
  }, []);
  const setPanelRef = React.useCallback((el) => el == null ? void 0 : el.focus(), []);
  const handleItemClick = (evt) => {
    setIsOpen(false);
    focusTrigger();
  };
  const handleOpenChange = (open) => {
    setIsOpen(open);
    onOpenChange == null ? void 0 : onOpenChange(open);
  };
  const getTriggerButtonIcon = () => (triggerButtonIcon != null ? triggerButtonIcon : triggerButtonLabel === void 0) ? /* @__PURE__ */ jsxRuntime.jsx(icons.OverflowMenuIcon, {}) : void 0;
  return /* @__PURE__ */ jsxRuntime.jsxs(DropdownBase.DropdownBase, {
    ...props,
    className: clsx.clsx(withBaseName(), className),
    isOpen,
    onOpenChange: handleOpenChange,
    placement: "bottom-end",
    ref: forwardedRef,
    children: [
      /* @__PURE__ */ jsxRuntime.jsxs(core.Button, {
        variant: "secondary",
        ref: triggerRef,
        children: [
          getTriggerButtonIcon(),
          triggerButtonLabel
        ]
      }),
      /* @__PURE__ */ jsxRuntime.jsx("div", {
        className: withBaseName("content"),
        ref: setPanelRef,
        tabIndex: -1,
        ...keyboardHook.listProps,
        children: collectionHook.data.map((item) => {
          const { type } = item.value;
          if (type === OverflowSeparator.OverflowSeparator) {
            return item.value;
          } else {
            const formFieldProps = {
              id: item.id,
              inOverflowPanel: true,
              key: item.id,
              onClick: handleItemClick
            };
            if (type === ToolbarField.ToolbarField) {
              return React__default["default"].cloneElement(
                item.value,
                formFieldProps
              );
            } else {
              return /* @__PURE__ */ jsxRuntime.jsx(ToolbarField.ToolbarField, {
                ...formFieldProps,
                children: item.value
              });
            }
          }
        })
      })
    ]
  });
});

exports.OverflowPanel = OverflowPanel;
//# sourceMappingURL=OverflowPanel.js.map
