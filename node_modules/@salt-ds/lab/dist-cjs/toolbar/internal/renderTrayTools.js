'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var utils = require('../../responsive/utils.js');
var ToolbarField = require('../toolbar-field/ToolbarField.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

const renderTrayTools = (collectionHook, overflowedItems, orientation, collapsed) => {
  if (collapsed) {
    return [];
  }
  let index = -1;
  const items = collectionHook.data.filter((item) => !item.isOverflowIndicator);
  return items.map((item) => {
    var _a;
    index += 1;
    const props = item.element.props;
    const overflowed = overflowedItems.findIndex((i) => i.index === index) === -1 ? void 0 : true;
    const toolbarItemProps = {
      "data-index": index,
      "data-priority": (_a = props["data-priority"]) != null ? _a : 2,
      "data-overflowed": overflowed,
      id: item.id,
      orientation
    };
    if (item.element.type === ToolbarField.ToolbarField) {
      return React__default["default"].cloneElement(item.element, {
        key: index,
        ...toolbarItemProps
      });
    } else {
      if (Object.keys(props).some(utils.isResponsiveAttribute)) {
        const [toolbarProps, restProps] = utils.liftResponsivePropsToFormField(props);
        return /* @__PURE__ */ React.createElement(ToolbarField.ToolbarField, {
          ...toolbarProps,
          ...toolbarItemProps,
          "data-index": index,
          "data-priority": 2,
          key: index,
          "data-orientation": orientation
        }, React__default["default"].cloneElement(item.element, { ...restProps }));
      } else {
        return /* @__PURE__ */ React.createElement(ToolbarField.ToolbarField, {
          ...toolbarItemProps,
          "data-index": index,
          "data-overflowed": overflowed,
          "data-priority": 2,
          key: index,
          "data-orientation": orientation
        }, React__default["default"].cloneElement(item.element, {
          id: `tooltray-control-${item.id}`
        }));
      }
    }
  });
};

exports.renderTrayTools = renderTrayTools;
//# sourceMappingURL=renderTrayTools.js.map
