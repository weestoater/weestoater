'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var clsx = require('clsx');
var React = require('react');
var ToolbarButton = require('../ToolbarButton.js');

const NullActivationIndicator = () => null;
const primaryControls = ["Dropdown", "Input"];
const getChildElementName = (element) => {
  if (React.isValidElement(element)) {
    const { type } = element;
    if (typeof type === "string") {
      return type;
    } else if (typeof type.name === "string") {
      return type.name;
    } else if ("displayName" in type) {
      return type.displayName;
    } else {
      return "";
    }
  } else {
    throw Error(
      "useToolbarField, child of ToolbarField is not valid ReactElememnt"
    );
  }
};
const isToolbarButton = (element) => React.isValidElement(element) && element.type === ToolbarButton.ToolbarButton;
const getToolbarFormFieldProps = (child, isOverflowPanel = false) => {
  let activationIndicator = NullActivationIndicator;
  let variant = "tertiary";
  const element = child;
  if (React.isValidElement(element)) {
    const name = getChildElementName(element);
    if (primaryControls.includes(name)) {
      activationIndicator = void 0;
      variant = "primary";
    }
  }
  return {
    ActivationIndicatorComponent: activationIndicator,
    className: clsx.clsx({
      "saltFormFieldLegacy-toolbarButton": isOverflowPanel && isToolbarButton(element),
      [`saltFormFieldLegacy-${variant}`]: variant
    }),
    fullWidth: false
  };
};
const InteractiveComponents = ["Input", "Dropdown"];
const useToolbarField = (props) => {
  const {
    ActivationIndicatorComponent: ActivationIndicatorComponentProp,
    className: classNameProp,
    inOverflowPanel,
    labelPlacement: labelPlacementProp,
    onClick,
    ...rest
  } = props;
  const childElementName = getChildElementName(props.children);
  const { className, ActivationIndicatorComponent, ...calculatedProps } = getToolbarFormFieldProps(props.children, inOverflowPanel);
  const labelPlacement = labelPlacementProp != null ? labelPlacementProp : inOverflowPanel ? "top" : "left";
  const handleClick = React.useCallback(
    (e) => {
      if (onClick && !InteractiveComponents.includes(childElementName)) {
        onClick(e);
      }
    },
    [childElementName, onClick]
  );
  return {
    ActivationIndicatorComponent: ActivationIndicatorComponentProp != null ? ActivationIndicatorComponentProp : ActivationIndicatorComponent,
    className: clsx.clsx("saltToolbarField", classNameProp, className),
    labelPlacement,
    onClick: handleClick,
    ...rest,
    ...calculatedProps
  };
};

exports.getToolbarFormFieldProps = getToolbarFormFieldProps;
exports.useToolbarField = useToolbarField;
//# sourceMappingURL=useToolbarField.js.map
