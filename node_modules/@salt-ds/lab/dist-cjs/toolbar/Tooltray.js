'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var core = require('@salt-ds/core');
var clsx = require('clsx');
var React = require('react');
var OverflowPanel = require('./overflow-panel/OverflowPanel.js');
var useOverflowCollectionItems = require('../responsive/useOverflowCollectionItems.js');
var useOverflowLayout = require('../responsive/useOverflowLayout.js');
var renderTrayTools = require('./internal/renderTrayTools.js');
var window = require('@salt-ds/window');
var styles = require('@salt-ds/styles');
var Tooltray$1 = require('./Tooltray.css.js');

const Tooltray = (props) => {
  const {
    "aria-label": ariaLabel,
    alignEnd,
    alignStart,
    children,
    className: classNameProp,
    collapse: collapseProp,
    collapsed: collapsedProp,
    "data-collapsible": collapse = collapseProp,
    "data-collapsed": collapsed = collapsedProp,
    id: idProp,
    isInsidePanel = false,
    overflowButtonIcon,
    overflowButtonLabel,
    orientation = "horizontal",
    ...rest
  } = props;
  const targetWindow = window.useWindow();
  styles.useComponentCssInjection({
    testId: "salt-tooltray",
    css: Tooltray$1,
    window: targetWindow
  });
  const tooltrayId = core.useIdMemo(idProp);
  const className = clsx.clsx(
    "saltTooltray",
    classNameProp,
    `saltTooltray-${orientation}`,
    { "saltTooltray-tooltrayOverflowed": isInsidePanel }
  );
  const collectionHook = useOverflowCollectionItems.useOverflowCollectionItems({
    children,
    id: tooltrayId,
    label: "Tooltray",
    orientation
  });
  const [innerContainerRef] = useOverflowLayout.useOverflowLayout({
    collectionHook,
    id: tooltrayId,
    orientation,
    label: "Tooltray"
  });
  const overflowedItems = collapsed ? collectionHook.data.filter((item) => !item.isOverflowIndicator) : collectionHook.data.filter((item) => item.overflowed);
  const overflowMenuItems = overflowedItems.map(
    (i) => React.cloneElement(collectionHook.data[i.index].element, {
      "data-is-inside-panel": true,
      key: i.index
    })
  ).reverse();
  const overflowIndicator = collectionHook.data.find(
    (i) => i.isOverflowIndicator
  );
  const tooltrayProps = {
    className,
    "data-collapsed": collapsed,
    "data-collapsible": collapse
  };
  return /* @__PURE__ */ jsxRuntime.jsx("div", {
    ...rest,
    ...tooltrayProps,
    id: tooltrayId,
    children: /* @__PURE__ */ jsxRuntime.jsxs("div", {
      className: clsx.clsx("Responsive-inner"),
      ref: innerContainerRef,
      children: [
        renderTrayTools.renderTrayTools(
          collectionHook,
          overflowedItems,
          orientation,
          collapsed
        ),
        overflowIndicator || collapsed ? /* @__PURE__ */ jsxRuntime.jsx(OverflowPanel.OverflowPanel, {
          className: clsx.clsx("saltToolbarField"),
          "data-index": collectionHook.data.length,
          "data-overflow-indicator": true,
          "data-priority": 1,
          id: overflowIndicator == null ? void 0 : overflowIndicator.id,
          triggerButtonIcon: overflowButtonIcon,
          triggerButtonLabel: overflowButtonLabel,
          children: overflowMenuItems
        }) : null
      ]
    })
  });
};

exports.Tooltray = Tooltray;
//# sourceMappingURL=Tooltray.js.map
