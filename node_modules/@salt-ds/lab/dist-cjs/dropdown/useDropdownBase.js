'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var core = require('@salt-ds/core');
var React = require('react');
var useClickAway = require('./useClickAway.js');
require('react/jsx-runtime');
var useResizeObserver = require('../responsive/useResizeObserver.js');
require('../form-field-context-legacy/FormFieldLegacyContext.js');
var useFormFieldLegacyProps = require('../form-field-context-legacy/useFormFieldLegacyProps.js');

const NO_OBSERVER = [];
const useDropdownBase = ({
  ariaLabelledBy: ariaLabelledByProp,
  defaultIsOpen,
  disabled,
  fullWidth: fullWidthProp,
  id,
  isOpen: isOpenProp,
  onOpenChange,
  onKeyDown: onKeyDownProp,
  openOnFocus,
  popupComponent: { props: componentProps },
  popupWidth: popupWidthProp,
  rootRef,
  width
}) => {
  var _a;
  const justFocused = React.useRef(null);
  const popperRef = React.useRef(null);
  const popperCallbackRef = React.useCallback((element) => {
    popperRef.current = element;
  }, []);
  const [isOpen, setIsOpen] = core.useControlled({
    controlled: isOpenProp,
    default: Boolean(defaultIsOpen),
    name: "useDropdown",
    state: "isOpen"
  });
  const {
    inFormField,
    setFocused: setFormFieldFocused,
    a11yProps: { "aria-labelledby": ariaLabelledBy, ...restA11yProps } = {}
  } = useFormFieldLegacyProps.useFormFieldLegacyProps();
  const [popup, setPopup] = React.useState({
    width: (_a = popupWidthProp != null ? popupWidthProp : width) != null ? _a : 0
  });
  const showDropdown = React.useCallback(() => {
    setIsOpen(true);
    onOpenChange == null ? void 0 : onOpenChange(true);
  }, [onOpenChange, setIsOpen]);
  const hideDropdown = React.useCallback(() => {
    setIsOpen(false);
    onOpenChange == null ? void 0 : onOpenChange(false);
  }, [onOpenChange, setIsOpen]);
  useClickAway.useClickAway({
    popperRef,
    rootRef,
    isOpen,
    onClose: hideDropdown
  });
  const handleTriggerFocus = React.useCallback(() => {
    if (!disabled) {
      setFormFieldFocused == null ? void 0 : setFormFieldFocused(true);
      if (openOnFocus) {
        setIsOpen(true);
        onOpenChange == null ? void 0 : onOpenChange(true);
        justFocused.current = window.setTimeout(() => {
          justFocused.current = null;
        }, 1e3);
      }
    }
  }, [disabled, onOpenChange, openOnFocus, setFormFieldFocused, setIsOpen]);
  const handleTriggerBlur = React.useCallback(() => {
    setFormFieldFocused == null ? void 0 : setFormFieldFocused(false);
  }, [setFormFieldFocused]);
  const handleTriggerToggle = React.useCallback(
    (e) => {
      if (["Enter", " "].indexOf(
        e.key
      ) === -1) {
        const newIsOpen = !isOpen;
        setIsOpen(newIsOpen);
        onOpenChange == null ? void 0 : onOpenChange(newIsOpen);
      }
    },
    [isOpen, setIsOpen, onOpenChange]
  );
  const handleKeydown = React.useCallback(
    (evt) => {
      if ((evt.key === "Tab" || evt.key === "Escape") && isOpen) {
        hideDropdown();
      } else if ((evt.key === "Enter" || evt.key === "ArrowDown" || evt.key === " ") && !isOpen) {
        evt.preventDefault();
        showDropdown();
      } else {
        onKeyDownProp == null ? void 0 : onKeyDownProp(evt);
      }
    },
    [hideDropdown, isOpen, onKeyDownProp, showDropdown]
  );
  const fullWidth = fullWidthProp != null ? fullWidthProp : inFormField;
  const measurements2 = fullWidth ? useResizeObserver.WidthOnly : NO_OBSERVER;
  useResizeObserver.useResizeObserver(rootRef, measurements2, setPopup, fullWidth);
  const componentId = `${id}-dropdown`;
  const getAriaLabelledBy = (labelledBy, labelledByProp) => {
    if (labelledBy === void 0 && labelledByProp === void 0) {
      return void 0;
    } else {
      return [labelledBy, labelledByProp].filter((x) => !!x).join(" ");
    }
  };
  const triggerProps = {
    ...restA11yProps,
    "aria-expanded": isOpen,
    "aria-labelledby": getAriaLabelledBy(ariaLabelledBy, ariaLabelledByProp),
    "aria-owns": isOpen ? componentId : void 0,
    id: `${id}-control`,
    onClick: disabled || openOnFocus ? void 0 : handleTriggerToggle,
    onFocus: handleTriggerFocus,
    onBlur: handleTriggerBlur,
    role: "listbox",
    onKeyDown: disabled ? void 0 : handleKeydown,
    style: { width: fullWidth ? void 0 : width }
  };
  const dropdownComponentProps = {
    "aria-labelledby": ariaLabelledBy,
    id: componentId,
    width: popup.width
  };
  return {
    componentProps: dropdownComponentProps,
    popperRef: popperCallbackRef,
    isOpen,
    label: "Dropdown Button",
    triggerProps
  };
};

exports.useDropdownBase = useDropdownBase;
//# sourceMappingURL=useDropdownBase.js.map
