'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var core = require('@salt-ds/core');
var React = require('react');
var collectionProvider = require('../common-hooks/collectionProvider.js');
var itemToString = require('../common-hooks/itemToString.js');
require('../common-hooks/keyUtils.js');
var useCollectionItems = require('../common-hooks/useCollectionItems.js');
require('../responsive/useResizeObserver.js');
var forwardCallbackProps = require('../utils/forwardCallbackProps.js');
var List = require('../list/List.js');
var DropdownBase = require('./DropdownBase.js');
var DropdownButton = require('./DropdownButton.js');
var useDropdown = require('./useDropdown.js');

const Dropdown = React.forwardRef(function Dropdown2({
  "aria-label": ariaLabel,
  children,
  defaultIsOpen,
  defaultSelected,
  id: idProp,
  isOpen: isOpenProp,
  itemToString: itemToString$1 = itemToString.itemToString,
  onOpenChange,
  onSelectionChange,
  onSelect,
  selected: selectedProp,
  selectionStrategy,
  source,
  triggerComponent,
  ListItem,
  ListProps: ListProps2,
  width = 180,
  ...props
}, forwardedRef) {
  const id = core.useIdMemo(idProp);
  const rootRef = React.useRef(null);
  const forkedRef = core.useForkRef(rootRef, forwardedRef);
  const collectionHook = useCollectionItems.useCollectionItems({
    id,
    source,
    children,
    options: {
      itemToString: itemToString$1
    }
  });
  const {
    highlightedIndex,
    triggerLabel,
    listHandlers,
    listControlProps,
    selected,
    ...dropdownListHook
  } = useDropdown.useDropdown({
    collectionHook,
    defaultHighlightedIndex: ListProps2 == null ? void 0 : ListProps2.defaultHighlightedIndex,
    defaultIsOpen,
    defaultSelected: collectionHook.itemToCollectionItem(defaultSelected),
    highlightedIndex: ListProps2 == null ? void 0 : ListProps2.highlightedIndex,
    isOpen: isOpenProp,
    itemToString: itemToString$1,
    label: "Dropdown",
    onHighlight: ListProps2 == null ? void 0 : ListProps2.onHighlight,
    onOpenChange,
    onSelectionChange,
    onSelect,
    selected: collectionHook.itemToCollectionItem(selectedProp),
    selectionStrategy
  });
  const collectionItemsToItem = React.useCallback(
    (itemOrItems) => {
      if (Array.isArray(itemOrItems)) {
        return itemOrItems.map((i) => i.value);
      } else if (itemOrItems) {
        return itemOrItems.value;
      }
    },
    []
  );
  const getTriggerComponent = () => {
    const ariaProps = {
      "aria-activedescendant": dropdownListHook.isOpen ? listControlProps == null ? void 0 : listControlProps["aria-activedescendant"] : void 0,
      "aria-label": ariaLabel
    };
    if (triggerComponent) {
      const ownProps = triggerComponent.props;
      return React.cloneElement(
        triggerComponent,
        forwardCallbackProps.forwardCallbackProps(ownProps, {
          ...dropdownListHook.isOpen ? listControlProps : {},
          ...ariaProps
        })
      );
    } else {
      return /* @__PURE__ */ jsxRuntime.jsx(DropdownButton.DropdownButton, {
        label: triggerLabel,
        ...dropdownListHook.isOpen ? listControlProps : {},
        ...ariaProps
      });
    }
  };
  return /* @__PURE__ */ jsxRuntime.jsx(collectionProvider.CollectionProvider, {
    collectionHook,
    children: /* @__PURE__ */ jsxRuntime.jsxs(DropdownBase.DropdownBase, {
      ...props,
      id,
      isOpen: dropdownListHook.isOpen,
      onOpenChange: dropdownListHook.onOpenChange,
      ref: forkedRef,
      width,
      children: [
        getTriggerComponent(),
        /* @__PURE__ */ jsxRuntime.jsx(List.List, {
          ListItem,
          itemToString: itemToString$1,
          ...ListProps2,
          highlightedIndex,
          listHandlers,
          onSelectionChange,
          onSelect,
          selected: collectionItemsToItem(selected),
          selectionStrategy,
          "data-testid": "dropdown-list"
        })
      ]
    })
  });
});

exports.Dropdown = Dropdown;
//# sourceMappingURL=Dropdown.js.map
