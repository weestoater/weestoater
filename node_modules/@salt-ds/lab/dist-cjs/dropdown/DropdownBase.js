'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var react = require('@floating-ui/react');
var core = require('@salt-ds/core');
var clsx = require('clsx');
var React = require('react');
var forwardCallbackProps = require('../utils/forwardCallbackProps.js');
var useDropdownBase = require('./useDropdownBase.js');
var Portal = require('../portal/Portal.js');
var WindowContext = require('../window/WindowContext.js');
require('../window/ElectronWindow.js');
var styles = require('@salt-ds/styles');
var window = require('@salt-ds/window');
var Dropdown = require('./Dropdown.css.js');

const withBaseName = core.makePrefixer("saltDropdown");
const DropdownBase = React.forwardRef(
  function Dropdown$1({
    "aria-labelledby": ariaLabelledByProp,
    children,
    className: classNameProp,
    container,
    defaultIsOpen,
    disabled,
    disablePortal,
    fullWidth,
    id: idProp,
    isOpen: isOpenProp,
    onKeyDown,
    onOpenChange,
    openOnFocus,
    placement = "bottom-start",
    popupWidth,
    width,
    ...htmlAttributes
  }, forwardedRef) {
    const targetWindow = window.useWindow();
    styles.useComponentCssInjection({
      testId: "salt-dropdown",
      css: Dropdown,
      window: targetWindow
    });
    const rootRef = React.useRef(null);
    const className = clsx.clsx(withBaseName(), classNameProp, {
      [withBaseName("fullWidth")]: fullWidth,
      [withBaseName("disabled")]: disabled
    });
    const [trigger, popupComponent] = React.Children.toArray(
      children
    );
    const id = core.useIdMemo(idProp);
    const Window = WindowContext.useWindow();
    const { componentProps, popperRef, isOpen, triggerProps } = useDropdownBase.useDropdownBase(
      {
        ariaLabelledBy: ariaLabelledByProp,
        defaultIsOpen,
        disabled,
        fullWidth,
        id,
        isOpen: isOpenProp,
        onOpenChange,
        onKeyDown,
        openOnFocus,
        popupComponent,
        popupWidth,
        rootRef,
        width
      }
    );
    const [maxPopupHeight, setMaxPopupHeight] = React.useState(
      void 0
    );
    const middleware = WindowContext.isDesktop ? [] : [
      react.flip({
        fallbackPlacements: ["bottom-start", "top-start"]
      }),
      react.shift({ limiter: react.limitShift() }),
      react.size({
        apply({ availableHeight }) {
          setMaxPopupHeight(availableHeight);
        }
      })
    ];
    const { reference, floating, x, y, strategy } = core.useFloatingUI({
      placement,
      middleware
    });
    const handlePopperListAdapterRef = core.useForkRef(
      reference,
      forwardedRef
    );
    const handleRootRef = core.useForkRef(rootRef, handlePopperListAdapterRef);
    const handleFloatingRef = core.useForkRef(floating, popperRef);
    const getTriggerComponent = () => {
      const {
        id: defaultId,
        role: defaultRole,
        ...restTriggerProps
      } = triggerProps;
      const {
        id: id2 = defaultId,
        role = defaultRole,
        ...ownProps
      } = trigger.props;
      return React.cloneElement(
        trigger,
        forwardCallbackProps.forwardCallbackProps(ownProps, {
          ...restTriggerProps,
          id: id2,
          role
        })
      );
    };
    const getPopupComponent = () => {
      const { id: defaultId, width: width2, ...restComponentProps } = componentProps;
      const {
        className: className2,
        id: id2 = defaultId,
        width: ownWidth,
        ...ownProps
      } = popupComponent.props;
      return React.cloneElement(popupComponent, {
        ...ownProps,
        ...restComponentProps,
        className: clsx.clsx(className2, withBaseName("popup-component")),
        id: id2,
        width: ownWidth != null ? ownWidth : width2
      });
    };
    return /* @__PURE__ */ jsxRuntime.jsxs("div", {
      ...htmlAttributes,
      className,
      "data-testid": "dropdown",
      id: idProp,
      ref: handleRootRef,
      children: [
        getTriggerComponent(),
        isOpen && /* @__PURE__ */ jsxRuntime.jsx(Portal.Portal, {
          disablePortal,
          container,
          children: /* @__PURE__ */ jsxRuntime.jsx(Window, {
            className: clsx.clsx(withBaseName("popup"), classNameProp),
            id: `${id}-popup`,
            style: {
              top: y != null ? y : 0,
              left: x != null ? x : 0,
              position: strategy,
              maxHeight: maxPopupHeight
            },
            ref: handleFloatingRef,
            children: getPopupComponent()
          })
        })
      ]
    });
  }
);

exports.DropdownBase = DropdownBase;
//# sourceMappingURL=DropdownBase.js.map
