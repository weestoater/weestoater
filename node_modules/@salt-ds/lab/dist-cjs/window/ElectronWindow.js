'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var core = require('@salt-ds/core');
var React = require('react');
var ReactDOM = require('react-dom');
var WindowContext = require('./WindowContext.js');
var desktopUtils = require('./desktop-utils.js');
var window$1 = require('@salt-ds/window');
var styles = require('@salt-ds/styles');
var ElectronWindow$1 = require('./ElectronWindow.css.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var ReactDOM__default = /*#__PURE__*/_interopDefaultLegacy(ReactDOM);

const Window = React.forwardRef(function ElectronWindow2({ className, children, id = "dialog", open = true, style = {}, ...rest }, forwardedRef) {
  const { top, left, position, ...styleRest } = style;
  const targetWindow = window$1.useWindow();
  styles.useComponentCssInjection({
    testId: "salt-electron-window",
    css: ElectronWindow$1,
    window: targetWindow
  });
  const [mountNode, setMountNode] = React.useState(null);
  const [windowRef, setWindowRef] = React.useState(null);
  const windowRoot = React.useRef(null);
  const forkedRef = core.useForkRef(forwardedRef, windowRoot);
  if (!mountNode) {
    const win = window.open("", id);
    win.document.write(
      `<html lang="en"><head><title>${id}</title><base href="${location.origin}"><style>body {margin: 0;}</style></head><body></body></html>`
    );
    document.head.querySelectorAll("style").forEach((htmlElement) => {
      win.document.head.appendChild(htmlElement.cloneNode(true));
    });
    const bodyElement = win.document.body;
    setMountNode(bodyElement);
    setWindowRef(win);
  }
  const parentWindow = desktopUtils.useWindowParentContext();
  const closeWindow = React.useCallback(() => {
    const { ipcRenderer } = global;
    if (ipcRenderer) {
      ipcRenderer.send("window-close", { id });
    }
  }, [id]);
  React.useEffect(() => {
    setTimeout(() => {
      if (windowRoot.current) {
        const { scrollHeight: height, scrollWidth: width } = windowRoot.current;
        const { ipcRenderer } = global;
        if (ipcRenderer) {
          ipcRenderer.send("window-size", {
            id,
            height: Math.ceil(height + 1),
            width: Math.ceil(width + 1)
          });
        }
      }
    }, 80);
  });
  React.useEffect(() => {
    const { ipcRenderer } = global;
    if (ipcRenderer) {
      setTimeout(() => {
        ipcRenderer.send("window-ready", { id });
      }, 100);
    }
    return () => {
      closeWindow();
    };
  }, [closeWindow, windowRef, id]);
  core.useIsomorphicLayoutEffect(() => {
    setTimeout(() => {
      const { ipcRenderer } = global;
      if (ipcRenderer) {
        ipcRenderer.send("window-position", {
          id,
          parentWindowID: parentWindow.id,
          left: style.left,
          top: style.top
        });
      }
    }, 90);
  }, [style]);
  return mountNode ? ReactDOM__default["default"].createPortal(
    /* @__PURE__ */ jsxRuntime.jsx(core.SaltProvider, {
      children: /* @__PURE__ */ jsxRuntime.jsx(desktopUtils.WindowParentContext.Provider, {
        value: {
          top: style.top + parentWindow.top,
          left: style.left + parentWindow.left,
          id
        },
        children: /* @__PURE__ */ jsxRuntime.jsx("div", {
          className: "saltWindow",
          ref: forkedRef,
          children: /* @__PURE__ */ jsxRuntime.jsx("div", {
            className,
            style: { ...styleRest },
            ...rest,
            children
          })
        })
      })
    }),
    mountNode
  ) : null;
});
const ElectronWindow = WindowContext.isDesktop ? Window : WindowContext.Window;

exports.ElectronWindow = ElectronWindow;
//# sourceMappingURL=ElectronWindow.js.map
