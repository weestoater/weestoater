'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var core = require('@salt-ds/core');
var React = require('react');

function getSelectionRange(input, { highlightOnFocus, cursorPositionOnFocus }) {
  if (highlightOnFocus === true) {
    return [0, input.value.length];
  }
  if (Array.isArray(highlightOnFocus) && highlightOnFocus.length > 1) {
    return [highlightOnFocus[0], highlightOnFocus[1]];
  }
  if (cursorPositionOnFocus === "start") {
    return [0, 0];
  }
  if (cursorPositionOnFocus === "end") {
    return [input.value.length, input.value.length];
  }
  if (cursorPositionOnFocus != null && !isNaN(cursorPositionOnFocus)) {
    return [cursorPositionOnFocus, cursorPositionOnFocus];
  }
  return [null, null];
}
function isSafari() {
  return navigator.userAgent.toLowerCase().includes("safari") && !navigator.userAgent.toLowerCase().includes("chrome");
}
function isFirefox() {
  return navigator.userAgent.toLowerCase().includes("firefox");
}
function useCursorOnFocus(inputRef, { cursorPositionOnFocus, highlightOnFocus }) {
  const wasClick = React.useRef(false);
  const timeoutRef = React.useRef(-1);
  const originalCursorPosition = React.useRef(-1);
  const selectionInProgress = React.useRef(false);
  const mouseMovement = React.useRef(0);
  const selection = React.useRef([null, null]);
  const wasWindowFocus = React.useRef(false);
  const handleMouseDown = () => {
    wasClick.current = true;
  };
  const handleMouseMove = (event) => {
    var _a;
    if (selectionInProgress.current) {
      mouseMovement.current += Math.abs(event.movementX) + Math.abs(event.movementY);
      if (mouseMovement.current < 3) {
        event.preventDefault();
        return;
      }
      if (typeof originalCursorPosition.current == "number") {
        (_a = inputRef.current) == null ? void 0 : _a.setSelectionRange(
          originalCursorPosition.current,
          originalCursorPosition.current
        );
      }
      selectionInProgress.current = false;
    }
  };
  const handleMouseUp = () => {
    const isValidBrowser = isFirefox() || isSafari();
    if (selectionInProgress.current && mouseMovement.current < 3 && isValidBrowser && Array.isArray(selection.current)) {
      const [start, end] = selection.current;
      setTimeout(() => {
        var _a, _b, _c;
        if ((((_a = inputRef.current) == null ? void 0 : _a.selectionStart) !== start || ((_b = inputRef.current) == null ? void 0 : _b.selectionEnd) !== end) && typeof start === "number" && typeof end === "number") {
          (_c = inputRef.current) == null ? void 0 : _c.setSelectionRange(start, end);
        }
      }, 0);
    }
    wasClick.current = false;
    selectionInProgress.current = false;
    mouseMovement.current = 0;
  };
  React.useEffect(() => {
    if (cursorPositionOnFocus != null || highlightOnFocus != null) {
      const handleFocusBehaviour = () => {
        var _a;
        if (!inputRef.current) {
          return;
        }
        const [start, end] = getSelectionRange(inputRef.current, {
          highlightOnFocus,
          cursorPositionOnFocus
        });
        if (start !== null && end !== null) {
          window.clearTimeout(timeoutRef.current);
          const needsTimeout = isSafari() || wasClick.current;
          if (wasClick.current) {
            selectionInProgress.current = true;
            mouseMovement.current = 0;
          }
          selection.current = [start, end];
          if (needsTimeout) {
            timeoutRef.current = window.setTimeout(() => {
              var _a2, _b;
              if (wasClick.current) {
                originalCursorPosition.current = (_a2 = inputRef.current) == null ? void 0 : _a2.selectionStart;
              }
              (_b = inputRef.current) == null ? void 0 : _b.setSelectionRange(start, end);
            }, 0);
          } else {
            (_a = inputRef.current) == null ? void 0 : _a.setSelectionRange(start, end);
          }
        }
      };
      const handleFocusIn = () => {
        if (wasWindowFocus.current) {
          wasWindowFocus.current = false;
          return;
        }
        if (cursorPositionOnFocus != null || highlightOnFocus != null) {
          handleFocusBehaviour();
        }
      };
      const handleWindowFocus = () => {
        const doc2 = core.ownerDocument(inputRef.current);
        if (doc2.visibilityState === "visible" && doc2.activeElement === inputRef.current) {
          wasClick.current = false;
          selectionInProgress.current = false;
          mouseMovement.current = 0;
          wasWindowFocus.current = true;
        }
      };
      const eventName = isSafari() || isFirefox() ? "focusIn" : "focus";
      const input = inputRef.current;
      const doc = core.ownerDocument(inputRef.current);
      input == null ? void 0 : input.addEventListener(eventName, handleFocusIn);
      doc.addEventListener("visibilitychange", handleWindowFocus);
      return () => {
        input == null ? void 0 : input.removeEventListener(eventName, handleFocusIn);
        doc == null ? void 0 : doc.removeEventListener("visibilitychange", handleWindowFocus);
      };
    }
    return void 0;
  }, [cursorPositionOnFocus, highlightOnFocus, inputRef]);
  return { handleMouseDown, handleMouseMove, handleMouseUp };
}

exports.useCursorOnFocus = useCursorOnFocus;
//# sourceMappingURL=useCursorOnFocus.js.map
