'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var core = require('@salt-ds/core');
var React = require('react');
var icons = require('@salt-ds/icons');
var DeckLayout = require('../deck-layout/DeckLayout.js');
var clsx = require('clsx');
var useSlideSelection = require('../utils/useSlideSelection.js');
var window = require('@salt-ds/window');
var styles = require('@salt-ds/styles');
var Carousel$1 = require('./Carousel.css.js');

const withBaseName = core.makePrefixer("saltCarousel");
const Carousel = React.forwardRef(
  function Carousel2({
    initialIndex,
    animation = "slide",
    carouselDescription,
    children,
    className,
    compact,
    id: idProp,
    ...rest
  }, ref) {
    const targetWindow = window.useWindow();
    styles.useComponentCssInjection({
      testId: "salt-carousel",
      css: Carousel$1,
      window: targetWindow
    });
    const id = core.useId(idProp);
    const slidesCount = React.Children.count(children);
    const [_, selectedSlide, handleSlideSelection] = useSlideSelection.useSlideSelection(initialIndex);
    const moveSlide = (direction) => {
      const moveLeft = selectedSlide === 0 ? slidesCount - 1 : selectedSlide - 1;
      const moveRight = selectedSlide === slidesCount - 1 ? 0 : selectedSlide + 1;
      const newSelection = direction === "left" ? moveLeft : moveRight;
      const newTransition = direction === "left" ? "decrease" : "increase";
      handleSlideSelection(newSelection, newTransition);
    };
    const handleRadioChange = ({
      target: { value }
    }) => {
      handleSlideSelection(Number(value));
    };
    React.useEffect(() => {
      if (process.env.NODE_ENV !== "production") {
        if (slidesCount < 1) {
          console.warn(
            "Carousel component requires more than one children to render. At least two elements should be provided."
          );
        }
      }
    }, [slidesCount]);
    return /* @__PURE__ */ jsxRuntime.jsxs(core.GridLayout, {
      "aria-label": carouselDescription,
      "aria-roledescription": "carousel",
      id,
      role: "region",
      ref,
      gap: 0,
      columns: 3,
      className: clsx.clsx(
        withBaseName(),
        compact && withBaseName("compact"),
        className
      ),
      ...rest,
      children: [
        /* @__PURE__ */ jsxRuntime.jsx(core.Button, {
          variant: "secondary",
          className: withBaseName("prev-button"),
          onClick: () => moveSlide("left"),
          children: /* @__PURE__ */ jsxRuntime.jsx(icons.ChevronLeftIcon, {
            size: 2
          })
        }),
        /* @__PURE__ */ jsxRuntime.jsx(DeckLayout.DeckLayout, {
          activeIndex: selectedSlide,
          animation,
          className: withBaseName("slider"),
          children
        }),
        /* @__PURE__ */ jsxRuntime.jsx(core.Button, {
          variant: "secondary",
          className: withBaseName("next-button"),
          onClick: () => moveSlide("right"),
          children: /* @__PURE__ */ jsxRuntime.jsx(icons.ChevronRightIcon, {
            size: 2
          })
        }),
        /* @__PURE__ */ jsxRuntime.jsx("div", {
          className: withBaseName("dots"),
          children: /* @__PURE__ */ jsxRuntime.jsx(core.RadioButtonGroup, {
            "aria-label": "Carousel buttons",
            onChange: handleRadioChange,
            value: `${selectedSlide}`,
            direction: "horizontal",
            children: Array.from({ length: slidesCount }, (_2, index) => ({
              value: `${index}`
            })).map((radio) => /* @__PURE__ */ jsxRuntime.jsx(core.RadioButton, {
              ...radio
            }))
          })
        })
      ]
    });
  }
);

exports.Carousel = Carousel;
//# sourceMappingURL=Carousel.js.map
