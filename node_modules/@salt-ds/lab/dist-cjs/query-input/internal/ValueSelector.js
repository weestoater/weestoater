'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var core = require('@salt-ds/core');
var React = require('react');
var CategoryList = require('./CategoryList.js');
var SearchList = require('./SearchList.js');
var ValueList = require('./ValueList.js');
var Portal = require('../../portal/Portal.js');
var WindowContext = require('../../window/WindowContext.js');
require('../../window/ElectronWindow.js');

const withBaseName = core.makePrefixer("saltQueryInputValueSelector");
function ValueSelector(props) {
  const {
    isOpen,
    inputValue,
    anchorElement,
    popperRef,
    categories,
    selectedCategory,
    onSelectedCategoryChange,
    width,
    selectedItems,
    onValueToggle,
    highlightedIndex,
    visibleCategories,
    highlightedCategoryIndex,
    highlightedValueIndex,
    onSearchListChange,
    setHighlightedValueIndex,
    setHighlightedCategoryIndex,
    setHighlightedIndex
  } = props;
  const selectedCategoryValues = React.useMemo(() => {
    if (!selectedCategory) {
      return [];
    }
    return selectedItems.filter((item) => item.category === selectedCategory.name).map(({ value }) => value);
  }, [selectedCategory, selectedItems]);
  const onBackToCategories = () => {
    onSelectedCategoryChange(null);
  };
  const renderContent = () => {
    if (inputValue) {
      return /* @__PURE__ */ jsxRuntime.jsx(SearchList.SearchList, {
        inputValue,
        selectedItems,
        onChange: onSearchListChange,
        rootWidth: width,
        highlightedIndex,
        visibleCategories,
        setHighlightedIndex
      });
    }
    if (!selectedCategory) {
      return /* @__PURE__ */ jsxRuntime.jsx(CategoryList.CategoryList, {
        categories,
        rootWidth: width,
        onCategorySelect: onSelectedCategoryChange,
        highlightedCategoryIndex,
        setHighlightedCategoryIndex
      });
    }
    return /* @__PURE__ */ jsxRuntime.jsx(ValueList.ValueList, {
      category: selectedCategory,
      rootWidth: width,
      onBack: onBackToCategories,
      selectedValues: selectedCategoryValues,
      onValueToggle,
      highlightedValueIndex,
      setHighlightedValueIndex
    });
  };
  const Window = WindowContext.useWindow();
  const { reference, floating, x, y, strategy } = core.useFloatingUI({
    placement: "bottom"
  });
  const handleRef = core.useForkRef(floating, popperRef);
  core.useIsomorphicLayoutEffect(() => {
    if (anchorElement) {
      reference(anchorElement);
    }
  }, [reference, anchorElement]);
  if (!isOpen) {
    return null;
  }
  return /* @__PURE__ */ jsxRuntime.jsx(Portal.Portal, {
    children: /* @__PURE__ */ jsxRuntime.jsx(Window, {
      style: {
        top: y != null ? y : 0,
        left: x != null ? x : 0,
        position: strategy
      },
      ref: handleRef,
      children: /* @__PURE__ */ jsxRuntime.jsx("div", {
        className: withBaseName("content"),
        children: renderContent()
      })
    })
  });
}

exports.ValueSelector = ValueSelector;
//# sourceMappingURL=ValueSelector.js.map
