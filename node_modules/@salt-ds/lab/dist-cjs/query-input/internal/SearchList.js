'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
var core = require('@salt-ds/core');
require('../../list/Highlighter.js');
var ListItem = require('../../list/ListItem.js');
var List = require('../../list/List.js');
var ListItemGroup = require('../../list/ListItemGroup.js');
require('../../common-hooks/collectionProvider.js');
require('../../common-hooks/keyUtils.js');
require('../../responsive/useResizeObserver.js');
require('../../list/VirtualizedList.js');
var window = require('@salt-ds/window');
var styles = require('@salt-ds/styles');
var QueryInput = require('../QueryInput.css.js');

const withBaseName = core.makePrefixer("saltQueryInputSearchList");
function itemToString(item) {
  return [item.category, item.value].join(": ");
}
function SearchList(props) {
  const {
    inputValue,
    selectedItems,
    onChange: onChangeProp,
    rootWidth,
    highlightedIndex,
    setHighlightedIndex,
    visibleCategories
  } = props;
  const targetWindow = window.useWindow();
  styles.useComponentCssInjection({
    testId: "salt-query-input",
    css: QueryInput,
    window: targetWindow
  });
  const onChange = React.useCallback(
    (event, items) => {
      onChangeProp(items || []);
    },
    [onChangeProp]
  );
  return /* @__PURE__ */ jsxRuntime.jsxs(List.List, {
    checkable: false,
    "data-testid": "search-list",
    highlightedIndex,
    itemTextHighlightPattern: inputValue,
    itemToString,
    onHighlight: setHighlightedIndex,
    onSelectionChange: onChange,
    selectionStrategy: "multiple",
    selected: selectedItems,
    width: rootWidth,
    children: [
      visibleCategories.map((inputCategory) => {
        return /* @__PURE__ */ jsxRuntime.jsx(ListItemGroup.ListItemGroup, {
          label: inputCategory.name,
          children: inputCategory.values.map((label) => /* @__PURE__ */ jsxRuntime.jsx(ListItem.ListItem, {
            label
          }, label))
        }, inputCategory.name);
      }),
      /* @__PURE__ */ jsxRuntime.jsx(ListItem.ListItem, {
        className: withBaseName("addKeyword"),
        children: `Add keyword: "${inputValue}"`
      })
    ]
  });
}

exports.SearchList = SearchList;
//# sourceMappingURL=SearchList.js.map
