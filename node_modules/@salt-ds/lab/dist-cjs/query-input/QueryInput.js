'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var core = require('@salt-ds/core');
var clsx = require('clsx');
var React = require('react');
require('./internal/CategoryList.js');
require('./internal/CategoryListContext.js');
require('./internal/CategoryListItem.js');
var QueryInputBody = require('./internal/QueryInputBody.js');
require('./internal/SearchList.js');
require('./internal/ValueList.js');
var ValueSelector = require('./internal/ValueSelector.js');
var useQueryInput = require('./useQueryInput.js');
var window = require('@salt-ds/window');
var styles = require('@salt-ds/styles');
var QueryInput$1 = require('./QueryInput.css.js');

const withBaseName = core.makePrefixer("saltQueryInput");
const QueryInput = React.forwardRef(
  function QueryInput2(props, externalRef) {
    const {
      disabled,
      categories,
      selectedItems,
      onChange,
      defaultSelectedItems,
      showCategory,
      autoClose,
      displayedItemCount,
      booleanOperator,
      onBooleanOperatorChange,
      defaultBooleanOperator,
      className,
      ...restProps
    } = props;
    const targetWindow = window.useWindow();
    styles.useComponentCssInjection({
      testId: "salt-query-input",
      css: QueryInput$1,
      window: targetWindow
    });
    const {
      queryInputProps,
      queryInputBodyRef,
      queryInputBodyProps,
      valueSelectorProps
    } = useQueryInput.useQueryInput(props, externalRef);
    return /* @__PURE__ */ jsxRuntime.jsxs("div", {
      className: clsx.clsx(withBaseName(), className),
      onBlur: queryInputProps.onBlur,
      onFocus: queryInputProps.onFocus,
      "data-testid": "query-input",
      ...restProps,
      children: [
        /* @__PURE__ */ jsxRuntime.jsx(QueryInputBody.QueryInputBody, {
          ref: queryInputBodyRef,
          ...queryInputBodyProps,
          showCategory
        }),
        /* @__PURE__ */ jsxRuntime.jsx(ValueSelector.ValueSelector, {
          ...valueSelectorProps
        })
      ]
    });
  }
);

exports.QueryInput = QueryInput;
//# sourceMappingURL=QueryInput.js.map
