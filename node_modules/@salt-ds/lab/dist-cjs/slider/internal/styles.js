'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var utils = require('./utils.js');

function widthToPercentage(w, range) {
  return `${Math.round(1e3 * w / range) * 0.1}%`;
}
function createGridTemplateColumns(min, max, values) {
  const range = max - min;
  const colWidths = [];
  let prev = min;
  for (let v of values) {
    colWidths.push(v - prev);
    prev = v;
  }
  colWidths.push(max - prev);
  let auto = false;
  const colTemplates = colWidths.map((w) => {
    if (w === 0) {
      return "0";
    }
    if (!auto) {
      auto = true;
      return "auto";
    }
    return widthToPercentage(w, range);
  });
  return colTemplates.join(" ");
}
function createTrackStyle(min, max, value) {
  const values = Array.isArray(value) ? value : [value];
  return {
    gridTemplateColumns: createGridTemplateColumns(min, max, values)
  };
}
function createHandleStyles(count) {
  return [...Array(count).keys()].map((i) => ({
    gridColumnStart: `${i + 2}`
  }));
}
function createSliderRailMarksStyle(min, max, marks) {
  return {
    gridTemplateColumns: createGridTemplateColumns(
      min,
      max,
      marks.map((mark) => utils.isLabeledMark(mark) ? mark.value : mark)
    )
  };
}
function createSliderMarkLabelsStyle(min, max, marks) {
  const range = max - min;
  const colWidths = [];
  let prev = min;
  for (let m of marks) {
    const w = utils.isLabeledMark(m) ? m.value : m;
    colWidths.push(w - prev);
    colWidths.push(0);
    prev = w;
  }
  colWidths.push(max - prev);
  let auto = false;
  const colTemplates = colWidths.map((w) => {
    if (w === 0) {
      return "0";
    }
    if (!auto) {
      auto = true;
      return "auto";
    }
    return widthToPercentage(w, range);
  });
  return {
    gridTemplateColumns: colTemplates.join(" ")
  };
}
function createSliderMarkLabelStyles(marks) {
  const styles = [];
  marks.forEach((mark, i) => {
    styles.push({
      gridColumnStart: 2 * i + 2
    });
  });
  if (marks.length > 0) {
    styles[0].justifySelf = "left";
  }
  if (marks.length > 1) {
    styles[marks.length - 1].justifySelf = "right";
  }
  return styles;
}

exports.createHandleStyles = createHandleStyles;
exports.createSliderMarkLabelStyles = createSliderMarkLabelStyles;
exports.createSliderMarkLabelsStyle = createSliderMarkLabelsStyle;
exports.createSliderRailMarksStyle = createSliderRailMarksStyle;
exports.createTrackStyle = createTrackStyle;
//# sourceMappingURL=styles.js.map
