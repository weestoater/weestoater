{"version":3,"file":"styles.js","sources":["../src/slider/internal/styles.ts"],"sourcesContent":["import { CSSProperties } from \"react\";\nimport { SliderValue } from \"../types\";\nimport { SliderMark } from \"./SliderRailMarks\";\nimport { isLabeledMark } from \"./utils\";\n\nfunction widthToPercentage(w: number, range: number) {\n  return `${Math.round((1000 * w) / range) * 0.1}%`;\n}\n\nfunction createGridTemplateColumns(\n  min: number,\n  max: number,\n  values: number[]\n): string {\n  const range = max - min;\n  const colWidths: number[] = [];\n  let prev = min;\n  for (let v of values) {\n    colWidths.push(v - prev);\n    prev = v;\n  }\n  colWidths.push(max - prev);\n  let auto = false;\n  const colTemplates = colWidths.map((w) => {\n    if (w === 0) {\n      return \"0\";\n    }\n    if (!auto) {\n      auto = true;\n      return \"auto\";\n    }\n    return widthToPercentage(w, range);\n  });\n  return colTemplates.join(\" \");\n}\n\nexport function createTrackStyle(\n  min: number,\n  max: number,\n  value: SliderValue\n): CSSProperties {\n  const values = Array.isArray(value) ? value : [value];\n  return {\n    gridTemplateColumns: createGridTemplateColumns(min, max, values),\n  };\n}\n\nexport function createHandleStyles(count: number) {\n  return [...Array(count).keys()].map((i) => ({\n    gridColumnStart: `${i + 2}`,\n  }));\n}\n\nexport function createSliderRailMarksStyle(\n  min: number,\n  max: number,\n  marks: SliderMark[]\n): CSSProperties {\n  return {\n    gridTemplateColumns: createGridTemplateColumns(\n      min,\n      max,\n      marks.map((mark) => (isLabeledMark(mark) ? mark.value : mark))\n    ),\n  };\n}\n\nexport function createSliderMarkLabelsStyle(\n  min: number,\n  max: number,\n  marks: SliderMark[]\n): CSSProperties {\n  const range = max - min;\n  const colWidths: number[] = [];\n  let prev = min;\n  for (let m of marks) {\n    const w = isLabeledMark(m) ? m.value : m;\n    colWidths.push(w - prev);\n    colWidths.push(0);\n    prev = w;\n  }\n  colWidths.push(max - prev);\n  let auto = false;\n  const colTemplates = colWidths.map((w) => {\n    if (w === 0) {\n      return \"0\";\n    }\n    if (!auto) {\n      auto = true;\n      return \"auto\";\n    }\n    return widthToPercentage(w, range);\n  });\n\n  return {\n    gridTemplateColumns: colTemplates.join(\" \"),\n  };\n}\n\nexport function createSliderMarkLabelStyles(\n  marks: SliderMark[]\n): CSSProperties[] {\n  const styles: CSSProperties[] = [];\n  marks.forEach((mark, i) => {\n    styles.push({\n      gridColumnStart: 2 * i + 2,\n    });\n  });\n  if (marks.length > 0) {\n    styles[0].justifySelf = \"left\";\n  }\n  if (marks.length > 1) {\n    styles[marks.length - 1].justifySelf = \"right\";\n  }\n  return styles;\n}\n"],"names":["isLabeledMark"],"mappings":"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"}