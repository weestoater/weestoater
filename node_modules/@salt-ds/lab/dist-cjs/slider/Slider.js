'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var core = require('@salt-ds/core');
var clsx = require('clsx');
var React = require('react');
var SliderHandle = require('./internal/SliderHandle.js');
var SliderMarkLabels = require('./internal/SliderMarkLabels.js');
var SliderRail = require('./internal/SliderRail.js');
var SliderRailMarks = require('./internal/SliderRailMarks.js');
var SliderSelection = require('./internal/SliderSelection.js');
var styles$1 = require('./internal/styles.js');
var useSliderKeyDown = require('./internal/useSliderKeyDown.js');
var useSliderMouseDown = require('./internal/useSliderMouseDown.js');
var utils = require('./internal/utils.js');
var window = require('@salt-ds/window');
var styles = require('@salt-ds/styles');
var Slider$1 = require('./Slider.css.js');

const withBaseName = core.makePrefixer("saltSlider");
const defaultMin = 0;
const defaultMax = 100;
const defaultStep = 1;
const Slider = React.forwardRef(function Slider2({
  min = defaultMin,
  max = defaultMax,
  step = defaultStep,
  pageStep = step,
  value: valueProp,
  defaultValue = defaultMin,
  onChange,
  label,
  className,
  pushable,
  pushDistance = 0,
  disabled,
  marks,
  hideMarks,
  hideMarkLabels,
  ...restProps
}, ref) {
  const targetWindow = window.useWindow();
  styles.useComponentCssInjection({
    testId: "salt-slider",
    css: Slider$1,
    window: targetWindow
  });
  const trackRef = React.useRef(null);
  const [value, setValue] = core.useControlled({
    controlled: valueProp,
    default: defaultValue,
    name: "Slider",
    state: "Value"
  });
  const updateValueItem = utils.useValueUpdater(pushable, pushDistance, min, max);
  const trackStyle = React.useMemo(
    () => styles$1.createTrackStyle(min, max, value),
    [min, max, value]
  );
  const valueLength = Array.isArray(value) ? value.length : 1;
  const handleStyles = React.useMemo(
    () => styles$1.createHandleStyles(valueLength),
    [valueLength]
  );
  const onMouseDown = useSliderMouseDown.useSliderMouseDown(
    trackRef,
    value,
    min,
    max,
    step,
    updateValueItem,
    setValue,
    onChange
  );
  const onKeyDown = useSliderKeyDown.useSliderKeyDown(
    value,
    min,
    max,
    pageStep,
    step,
    updateValueItem,
    setValue,
    onChange
  );
  return /* @__PURE__ */ jsxRuntime.jsxs("div", {
    className: clsx.clsx(
      withBaseName(),
      {
        [withBaseName("disabled")]: disabled
      },
      className
    ),
    ref,
    onKeyDown: disabled ? void 0 : onKeyDown,
    "aria-label": `${label} slider from ${min} to ${max}`,
    role: "group",
    children: [
      label !== void 0 ? /* @__PURE__ */ jsxRuntime.jsx("div", {
        className: withBaseName("label"),
        children: label
      }) : null,
      /* @__PURE__ */ jsxRuntime.jsx("div", {
        className: withBaseName("clickable"),
        onMouseDown: disabled ? void 0 : onMouseDown,
        children: /* @__PURE__ */ jsxRuntime.jsxs("div", {
          className: withBaseName("track"),
          style: trackStyle,
          ref: trackRef,
          children: [
            /* @__PURE__ */ jsxRuntime.jsx(SliderRail.SliderRail, {}),
            marks && !hideMarks ? /* @__PURE__ */ jsxRuntime.jsx(SliderRailMarks.SliderRailMarks, {
              min,
              max,
              marks
            }) : null,
            marks && !hideMarkLabels ? /* @__PURE__ */ jsxRuntime.jsx(SliderMarkLabels.SliderMarkLabels, {
              min,
              max,
              marks
            }) : null,
            /* @__PURE__ */ jsxRuntime.jsx(SliderSelection.SliderSelection, {
              valueLength
            }),
            (Array.isArray(value) ? value : [value]).map((v, i) => /* @__PURE__ */ jsxRuntime.jsx(SliderHandle.SliderHandle, {
              min,
              max,
              value: v,
              index: i,
              disabled: !!disabled,
              valueLength,
              style: handleStyles[i]
            }, i))
          ]
        })
      })
    ]
  });
});

exports.Slider = Slider;
//# sourceMappingURL=Slider.js.map
