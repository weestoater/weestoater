'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var core = require('@salt-ds/core');
var clsx = require('clsx');
var React = require('react');
var StatusIndicator = require('./internal/StatusIndicator.js');
var window = require('@salt-ds/window');
var styles = require('@salt-ds/styles');
var ContentStatus$1 = require('./ContentStatus.css.js');

const withBaseName = core.makePrefixer("saltContentStatus");
const ContentStatus = React.forwardRef(
  function ContentStatus2({
    CircularProgressProps,
    SpinnerProps,
    actionLabel,
    buttonRef,
    className,
    children,
    disableAnnouncer,
    message,
    onActionClick,
    status = "info",
    title,
    value,
    ...rest
  }, ref) {
    const targetWindow = window.useWindow();
    styles.useComponentCssInjection({
      testId: "salt-content-status",
      css: ContentStatus$1,
      window: targetWindow
    });
    const id = core.useId();
    const hasDefaultActionContent = actionLabel && onActionClick;
    const hasActions = children || hasDefaultActionContent;
    const hasContent = title || message || hasActions;
    const { announce } = core.useAriaAnnouncer();
    React.useEffect(() => {
      if (disableAnnouncer)
        return;
      const toBeAnnounced = [];
      if (title) {
        toBeAnnounced.push(title);
      }
      if (message) {
        toBeAnnounced.push(message);
      }
      if (status !== "loading") {
        toBeAnnounced.push(status);
      }
      if (toBeAnnounced.length > 0) {
        announce(toBeAnnounced.join(" "));
      }
    }, [announce, disableAnnouncer, message, status, title]);
    return /* @__PURE__ */ jsxRuntime.jsxs("div", {
      className: clsx.clsx(withBaseName(), className),
      ref,
      ...rest,
      children: [
        /* @__PURE__ */ jsxRuntime.jsx(StatusIndicator.StatusIndicator, {
          CircularProgressProps,
          SpinnerProps,
          disableAnnouncer,
          id,
          message,
          status,
          title,
          value,
          ...rest
        }),
        hasContent && /* @__PURE__ */ jsxRuntime.jsxs("div", {
          "aria-labelledby": id,
          className: clsx.clsx(withBaseName("content")),
          id,
          role: "region",
          children: [
            title && /* @__PURE__ */ jsxRuntime.jsx(core.Text, {
              className: clsx.clsx(withBaseName("title")),
              children: title
            }),
            message && /* @__PURE__ */ jsxRuntime.jsx(core.Text, {
              className: clsx.clsx(withBaseName("message")),
              children: message
            }),
            hasActions && /* @__PURE__ */ jsxRuntime.jsx("div", {
              className: clsx.clsx(withBaseName("actions")),
              children: children || /* @__PURE__ */ jsxRuntime.jsx(core.Button, {
                onClick: onActionClick,
                ref: buttonRef,
                children: actionLabel
              })
            })
          ]
        })
      ]
    });
  }
);

exports.ContentStatus = ContentStatus;
//# sourceMappingURL=ContentStatus.js.map
