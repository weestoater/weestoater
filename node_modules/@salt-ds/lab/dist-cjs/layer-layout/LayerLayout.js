'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
var clsx = require('clsx');
var core = require('@salt-ds/core');
var useIsViewportLargerThanBreakpoint = require('../utils/useIsViewportLargerThanBreakpoint.js');
var window = require('@salt-ds/window');
var styles = require('@salt-ds/styles');
var LayerLayout$1 = require('./LayerLayout.css.js');

const LAYER_POSITIONS = [
  "center",
  "left",
  "top",
  "right",
  "bottom"
];
const withBaseName = core.makePrefixer("saltLayerLayout");
const ariaAttributes = { role: "dialog", "aria-modal": true };
const LayerLayout = React.forwardRef(
  function LayerLayout2(props, ref) {
    const {
      children,
      className,
      disableScrim = false,
      position = "center",
      fullScreenAtBreakpoint = "sm",
      disableAnimations = false,
      scrimProps,
      isOpen = true,
      ...rest
    } = props;
    const targetWindow = window.useWindow();
    styles.useComponentCssInjection({
      testId: "salt-layer-layout",
      css: LayerLayout$1,
      window: targetWindow
    });
    const previousDisableAnimationsProp = core.usePrevious(
      disableAnimations,
      [disableAnimations],
      false
    );
    const [showComponent, setShowComponent] = React.useState(false);
    const [isAnimating, setIsAnimating] = React.useState(false);
    React.useEffect(() => {
      if (!isOpen && disableAnimations || !isOpen && !isAnimating) {
        setShowComponent(false);
      }
      if (isOpen && !showComponent) {
        setShowComponent(true);
      }
    }, [isOpen, showComponent, disableAnimations, isAnimating]);
    const fullScreen = useIsViewportLargerThanBreakpoint.useIsViewportLargerThanBreakpoint(
      fullScreenAtBreakpoint
    );
    const anchored = position !== "center" && !fullScreen;
    const enterAnimation = !disableAnimations && isOpen && !previousDisableAnimationsProp;
    const exitAnimation = !disableAnimations && !isOpen;
    const layerLayout = showComponent ? /* @__PURE__ */ jsxRuntime.jsx("div", {
      ref,
      className: clsx.clsx(withBaseName(), className, {
        [withBaseName("anchor")]: anchored,
        [withBaseName("fullScreen")]: fullScreen,
        [withBaseName(position)]: !fullScreen,
        [withBaseName("enter-animation")]: enterAnimation,
        [withBaseName("exit-animation")]: exitAnimation
      }),
      onAnimationStart: () => setIsAnimating(true),
      onAnimationEnd: () => {
        if (!isOpen && showComponent) {
          setShowComponent(false);
        }
      },
      ...disableScrim && ariaAttributes,
      ...rest,
      children
    }) : null;
    return disableScrim ? layerLayout : /* @__PURE__ */ jsxRuntime.jsx(core.Scrim, {
      open: showComponent,
      className: clsx.clsx({
        [withBaseName("enter-animation")]: enterAnimation,
        [withBaseName("exit-animation")]: exitAnimation
      }),
      ...scrimProps,
      children: layerLayout
    });
  }
);

exports.LAYER_POSITIONS = LAYER_POSITIONS;
exports.LayerLayout = LayerLayout;
//# sourceMappingURL=LayerLayout.js.map
