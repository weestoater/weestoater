{"version":3,"file":"useInstantCollapse.js","sources":["../src/responsive/useInstantCollapse.ts"],"sourcesContent":["import { useIsomorphicLayoutEffect } from \"@salt-ds/core\";\nimport { useCallback, useMemo } from \"react\";\nimport {\n  InstantCollapseHookResult,\n  OverflowHookProps,\n  OverflowItem,\n} from \"./overflowTypes\";\nimport {\n  addAll,\n  allExceptOverflowIndicator,\n  getElementForItem,\n  measureContainerOverflow,\n  measureElementSize,\n} from \"./overflowUtils\";\n\ntype MinMaxSize = {\n  maxSize: number | null;\n  minSize: number | null;\n};\n\nconst newlyCollapsed = (overflowItems: OverflowItem[]) =>\n  overflowItems.some(\n    (item) =>\n      item.collapsible === \"instant\" && item.collapsed && item.fullSize === null\n  );\n\nconst findItemToCollapse = (items: OverflowItem[]) => {\n  for (let i = items.length - 1; i >= 0; i--) {\n    const item = items[i];\n    if (item.collapsible === \"instant\" && !item.collapsed) {\n      // We only ever collapse 1 item at a time. We don'tknow how much space\n      //this has saved until it re-renders and we can re-measure\n      return item;\n    }\n  }\n};\n\nconst uncollapseItems = (items: OverflowItem[], containerSize: number) => {\n  const visibleContentSize = items.reduce(allExceptOverflowIndicator, 0);\n  let diff = containerSize - visibleContentSize;\n\n  const collapsed = items\n    .filter((item) => item.collapsible === \"instant\" && item.collapsed)\n    .sort((i1, i2) => i2.index - i1.index);\n  // find the next collapsed item, see how much extra space it would\n  // occupy if restored. If we have enough space, restore it.\n  const result: OverflowItem[] = [];\n  while (collapsed.length) {\n    const item = collapsed.pop() as OverflowItem;\n    const itemDiff = item.fullSize! - item.size;\n    if (diff >= itemDiff) {\n      result.push({\n        ...item,\n        collapsed: false,\n        size: item.fullSize as number,\n        fullSize: null,\n      });\n      diff = diff - itemDiff;\n    } else {\n      break;\n    }\n  }\n  return result;\n};\n\nexport const useInstantCollapse = ({\n  collectionHook,\n  hasOverflowedItems,\n  innerContainerSize = 0,\n  label = \"Toolbar\",\n  overflowContainerRef: ref,\n  overflowItemsRef,\n  orientation,\n}: OverflowHookProps): InstantCollapseHookResult => {\n  const minMaxSizes = useMemo(() => new Map<number, MinMaxSize>(), []);\n  const { dispatch } = collectionHook;\n\n  const updateCollapse = useCallback(\n    (containerSize: number, renderedSize: number | null) => {\n      const { current: managedItems } = overflowItemsRef;\n      if (renderedSize && containerSize < renderedSize) {\n        const overflowItem = findItemToCollapse(managedItems);\n        if (overflowItem) {\n          dispatch({\n            type: \"collapse-instant-item\",\n            overflowItem,\n          });\n        }\n      } else {\n        const uncollapsedItems = uncollapseItems(managedItems, containerSize);\n        if (uncollapsedItems.length) {\n          dispatch({\n            type: \"update-items\",\n            overflowItems: uncollapsedItems,\n          });\n        }\n      }\n    },\n    [dispatch, overflowItemsRef]\n  );\n\n  const handleResize = useCallback(\n    (size: number, containerHasGrown?: boolean) => {\n      const { current: managedItems } = overflowItemsRef;\n      const { isOverflowing: willOverflow } = measureContainerOverflow(\n        ref,\n        orientation\n      );\n\n      const collapsedItems = managedItems.filter((item) => item.collapsed);\n\n      if (willOverflow && !hasOverflowedItems) {\n        const overflowItem = findItemToCollapse(managedItems);\n        if (overflowItem) {\n          dispatch({\n            type: \"collapse-instant-item\",\n            overflowItem,\n          });\n        }\n      } else if (collapsedItems.length > 0 && containerHasGrown) {\n        // Note: it must have been previously overflowing, too\n        // check to see if we can reinstate one or more items\n        updateCollapse(size, null);\n      } else if (willOverflow && hasOverflowedItems) {\n        // Note: container must have shrunk\n        // still overflowing, possibly more overflowing than before\n        const renderedSize = managedItems.reduce(addAll, 0);\n        updateCollapse(size, renderedSize);\n      }\n    },\n    [\n      dispatch,\n      hasOverflowedItems,\n      orientation,\n      overflowItemsRef,\n      ref,\n      updateCollapse,\n    ]\n  );\n\n  const resetMeasurements = useCallback(\n    (isOverflowing?: boolean) => {\n      const { current: managedItems } = overflowItemsRef;\n      if (isOverflowing) {\n        const overflowItem = findItemToCollapse(managedItems);\n        if (overflowItem) {\n          dispatch({\n            type: \"collapse-instant-item\",\n            overflowItem,\n          });\n          return true;\n        } else {\n          return false;\n        }\n      }\n    },\n    [dispatch, overflowItemsRef]\n  );\n\n  const setMinSize = useCallback(\n    (item: OverflowItem, size: number) => {\n      const minMaxSize = minMaxSizes.get(item.index);\n      if (minMaxSize) {\n        minMaxSize.minSize = size;\n      } else {\n        minMaxSizes.set(item.index, { maxSize: null, minSize: size });\n      }\n    },\n    [minMaxSizes]\n  );\n\n  const measureCollapsedItem = useCallback(() => {\n    const { current: managedItems } = overflowItemsRef;\n    const dimension = orientation === \"horizontal\" ? \"width\" : \"height\";\n    const [collapsedItem] = managedItems.filter(\n      (item) => item.collapsible === \"instant\" && item.collapsed\n    );\n    console.log(`measureCollapsedItem ${collapsedItem.index}`);\n    if (collapsedItem.fullSize === null) {\n      const target = getElementForItem(ref, collapsedItem);\n      if (target) {\n        const collapsedSize = measureElementSize(target, dimension);\n        const managedItem = findItemToCollapse(managedItems);\n        const diff = collapsedItem.size - collapsedSize;\n        const renderedSize = managedItems.reduce(addAll, 0) - diff;\n        const updates = [];\n        if (renderedSize > innerContainerSize && managedItem) {\n          console.log(`next item to collapse ${managedItem.index}`);\n          updates.push(\n            {\n              ...collapsedItem,\n              fullSize: collapsedItem.size,\n              size: collapsedSize,\n            },\n            {\n              ...managedItem,\n              collapsed: true,\n            }\n          );\n        } else {\n          updates.push({\n            ...collapsedItem,\n            fullSize: collapsedItem.size,\n            size: collapsedSize,\n          });\n        }\n        dispatch({\n          type: \"update-items\",\n          overflowItems: updates,\n        });\n        setMinSize(collapsedItem, collapsedSize);\n      }\n    } else {\n      return -1;\n    }\n  }, [\n    dispatch,\n    innerContainerSize,\n    orientation,\n    overflowItemsRef,\n    ref,\n    setMinSize,\n  ]);\n\n  useIsomorphicLayoutEffect(() => {\n    const { current: managedItems } = overflowItemsRef;\n    const newlyCollapsedItem = newlyCollapsed(managedItems);\n    if (newlyCollapsedItem) {\n      measureCollapsedItem();\n    }\n  });\n\n  return {\n    onResize: handleResize,\n    resetMeasurements,\n  };\n};\n"],"names":["allExceptOverflowIndicator","useMemo","useCallback","measureContainerOverflow","addAll","getElementForItem","measureElementSize","useIsomorphicLayoutEffect"],"mappings":"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"}