{"version":3,"file":"useWidth.js","sources":["../src/responsive/useWidth.ts"],"sourcesContent":["import { RefObject, useCallback, useRef, useState } from \"react\";\nimport { useIsomorphicLayoutEffect } from \"@salt-ds/core\";\nimport {\n  ResizeHandler,\n  useResizeObserver,\n  WidthOnly,\n} from \"./useResizeObserver\";\n\nconst NONE: string[] = [];\n\nexport function useWidth<Element extends HTMLElement>(\n  responsive: boolean\n): [RefObject<Element>, number] {\n  const [width, setWidth] = useState<number>();\n  const ref = useRef<HTMLElement>(null);\n\n  const handleResize: ResizeHandler = useCallback(({ width: newWidth }) => {\n    setWidth(newWidth);\n  }, []);\n\n  const measurementsToObserve = responsive ? WidthOnly : NONE;\n  useResizeObserver(ref, measurementsToObserve, handleResize);\n\n  useIsomorphicLayoutEffect(() => {\n    if (!ref.current) {\n      return undefined;\n    }\n    handleResize(ref.current.getBoundingClientRect());\n  }, [handleResize, responsive]);\n\n  return [ref, width] as [RefObject<Element>, number];\n}\n"],"names":["useState","useRef","useCallback","WidthOnly","useResizeObserver","useIsomorphicLayoutEffect"],"mappings":";;;;;;;;AAQA,MAAM,OAAiB,EAAC,CAAA;AAEjB,SAAS,SACd,UAC8B,EAAA;AAC9B,EAAA,MAAM,CAAC,KAAA,EAAO,QAAQ,CAAA,GAAIA,cAAiB,EAAA,CAAA;AAC3C,EAAM,MAAA,GAAA,GAAMC,aAAoB,IAAI,CAAA,CAAA;AAEpC,EAAA,MAAM,eAA8BC,iBAAY,CAAA,CAAC,EAAE,KAAA,EAAO,UAAe,KAAA;AACvE,IAAA,QAAA,CAAS,QAAQ,CAAA,CAAA;AAAA,GACnB,EAAG,EAAE,CAAA,CAAA;AAEL,EAAM,MAAA,qBAAA,GAAwB,aAAaC,2BAAY,GAAA,IAAA,CAAA;AACvD,EAAkBC,mCAAA,CAAA,GAAA,EAAK,uBAAuB,YAAY,CAAA,CAAA;AAE1D,EAAAC,8BAAA,CAA0B,MAAM;AAC9B,IAAI,IAAA,CAAC,IAAI,OAAS,EAAA;AAChB,MAAO,OAAA,KAAA,CAAA,CAAA;AAAA,KACT;AACA,IAAa,YAAA,CAAA,GAAA,CAAI,OAAQ,CAAA,qBAAA,EAAuB,CAAA,CAAA;AAAA,GAC/C,EAAA,CAAC,YAAc,EAAA,UAAU,CAAC,CAAA,CAAA;AAE7B,EAAO,OAAA,CAAC,KAAK,KAAK,CAAA,CAAA;AACpB;;;;"}