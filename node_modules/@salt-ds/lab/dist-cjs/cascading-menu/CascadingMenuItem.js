'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var core = require('@salt-ds/core');
var icons = require('@salt-ds/icons');
var clsx = require('clsx');
var React = require('react');
require('../list-deprecated/List.js');
require('../list-deprecated/ListBase.js');
require('../list-deprecated/ListItemBase.js');
var ListItem = require('../list-deprecated/ListItem.js');
require('../list-deprecated/ListItemContext.js');
require('../list-deprecated/ListStateContext.js');
var window = require('@salt-ds/window');
var styles = require('@salt-ds/styles');
var CascadingMenuItem = require('./CascadingMenuItem.css.js');

const noop = () => void 0;
const withBaseName = core.makePrefixer("saltMenuItem");
const getIcon = (sourceItem, isDisabled = false) => {
  const CustomIcon = sourceItem.icon;
  if (CustomIcon) {
    return /* @__PURE__ */ jsxRuntime.jsx(CustomIcon, {
      className: clsx.clsx(withBaseName("menuItemStartAdornment"), {
        [withBaseName("menuItemDisabled")]: isDisabled
      })
    });
  } else {
    return null;
  }
};
const DefaultMenuItem = React.forwardRef(
  function(props, ref) {
    const {
      blurSelected,
      className,
      hasEndAdornment,
      hasScrollbar,
      hasStartAdornment,
      onItemClick,
      itemToString,
      isInteracted,
      isNavigatingWithKeyboard,
      isChildMenuOpen,
      hasSubMenu,
      sourceItem,
      tooltipEnterDelay,
      tooltipLeaveDelay,
      ...restProps
    } = props;
    const targetWindow = window.useWindow();
    styles.useComponentCssInjection({
      testId: "salt-cascading-menu-item",
      css: CascadingMenuItem,
      window: targetWindow
    });
    const menuTextRef = React.useRef(null);
    const [hasTooltip, setHasTooltip] = React.useState(false);
    const menuText = itemToString(sourceItem);
    React.useEffect(() => {
      const element = menuTextRef.current;
      if (element) {
        if (element.offsetWidth < element.scrollWidth) {
          setHasTooltip(true);
        }
      }
    }, [menuText]);
    const isDisabled = sourceItem.disabled;
    const divider = sourceItem.divider;
    const onClick = isDisabled || hasSubMenu ? noop : onItemClick;
    const handleOnClick = (event) => {
      if (!isDisabled && !hasSubMenu) {
        onClick == null ? void 0 : onClick(sourceItem, event);
      }
    };
    const interactionClasses = isNavigatingWithKeyboard ? {
      [withBaseName(`menuItemKeyboardActive`)]: !isDisabled && isInteracted && !blurSelected,
      [withBaseName(`menuItemKeyboardDisabled`)]: isDisabled && isInteracted
    } : {
      [withBaseName(`menuItemHover`)]: !isDisabled && !blurSelected
    };
    const icon = hasStartAdornment ? getIcon(sourceItem, isDisabled) : null;
    const tooltipTitle = sourceItem.tooltip || menuText;
    return /* @__PURE__ */ jsxRuntime.jsx(core.Tooltip, {
      disableFocusListener: true,
      disableHoverListener: true,
      enterDelay: tooltipEnterDelay,
      leaveDelay: tooltipLeaveDelay,
      placement: "top",
      disabled: !tooltipTitle || !hasTooltip || isChildMenuOpen,
      content: tooltipTitle,
      children: /* @__PURE__ */ jsxRuntime.jsxs(ListItem.ListItem, {
        ref,
        "aria-expanded": isChildMenuOpen || void 0,
        className: clsx.clsx(
          withBaseName(),
          {
            [withBaseName("menuItemDivider")]: divider,
            [withBaseName("menuItemBlurSelected")]: blurSelected,
            [withBaseName("menuItemSelected")]: !isDisabled && !hasSubMenu && isInteracted,
            ...interactionClasses,
            [withBaseName("menuItemWithScrollbar")]: hasScrollbar
          },
          className
        ),
        disabled: isDisabled,
        role: "menuitem",
        onClick: handleOnClick,
        item: sourceItem,
        ...restProps,
        children: [
          hasStartAdornment && /* @__PURE__ */ jsxRuntime.jsx("div", {
            className: withBaseName("menuItemStartAdornmentContainer"),
            children: icon
          }),
          /* @__PURE__ */ jsxRuntime.jsx("div", {
            className: clsx.clsx(withBaseName("menuItemText"), {
              [withBaseName("menuItemDisabled")]: isDisabled
            }),
            ref: menuTextRef,
            children: menuText
          }),
          hasEndAdornment && /* @__PURE__ */ jsxRuntime.jsx("div", {
            className: clsx.clsx(withBaseName("menuItemEndAdornmentContainer"), {
              [withBaseName("menuItemAdornmentHidden")]: !hasSubMenu
            }),
            children: /* @__PURE__ */ jsxRuntime.jsx(icons.ChevronRightIcon, {
              className: clsx.clsx(withBaseName("menuItemEndAdornment"), {
                [withBaseName("menuItemDisabled")]: isDisabled
              })
            })
          }),
          divider && /* @__PURE__ */ jsxRuntime.jsx("div", {
            role: "separator"
          })
        ]
      })
    });
  }
);

exports.DefaultMenuItem = DefaultMenuItem;
//# sourceMappingURL=CascadingMenuItem.js.map
