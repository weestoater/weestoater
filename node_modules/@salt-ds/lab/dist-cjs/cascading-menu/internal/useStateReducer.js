'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var CascadingMenuAction = require('./CascadingMenuAction.js');

function getDefaultMenuState(id) {
  return {
    id,
    highlightedItemIndex: null
  };
}
function deleteAllMenusStartingFromLevel(level, menus) {
  const newState = [...menus];
  newState.splice(level);
  return newState;
}
function menuPositionReducer(state, action, level) {
  const { type } = action;
  switch (type) {
    case CascadingMenuAction.CascadingMenuAction.SET_FLIPPED:
      state[level] = {
        ...state[level]
      };
      return state;
    default:
      return state;
  }
}
function useStateReducer(menusDataById = {}, isNavigatingWithKeyboard) {
  return React.useCallback(
    (state, action) => {
      let newState = [...state];
      const { type, targetId, highlightedItemIndex = null } = action;
      const { level, childMenus = [] } = Object(
        menusDataById[targetId]
      );
      const childId = typeof highlightedItemIndex === "number" ? childMenus[highlightedItemIndex] : null;
      const childMenuData = childId ? menusDataById[childId] : void 0;
      newState = menuPositionReducer(newState, action, level);
      switch (type) {
        case CascadingMenuAction.CascadingMenuAction.SET_CURRENT_INTERACTED_ITEM:
          newState[level] = {
            ...newState[level],
            highlightedItemIndex
          };
          newState = deleteAllMenusStartingFromLevel(level + 1, newState);
          if (childId && childMenuData && !isNavigatingWithKeyboard) {
            newState[childMenuData.level] = getDefaultMenuState(childId);
          }
          break;
        case CascadingMenuAction.CascadingMenuAction.RESET_MENU:
          newState[level] = {
            ...newState[level],
            highlightedItemIndex: null
          };
          newState = deleteAllMenusStartingFromLevel(level + 1, newState);
          break;
        case CascadingMenuAction.CascadingMenuAction.OPEN_MENU:
          newState[level] = getDefaultMenuState(targetId);
          break;
        case CascadingMenuAction.CascadingMenuAction.CLOSE_MENU:
          newState = deleteAllMenusStartingFromLevel(level, newState);
          break;
        case CascadingMenuAction.CascadingMenuAction.CLOSE_CASCADING_MENU:
          newState = [];
          break;
      }
      return newState;
    },
    [isNavigatingWithKeyboard, menusDataById]
  );
}

exports.useStateReducer = useStateReducer;
//# sourceMappingURL=useStateReducer.js.map
