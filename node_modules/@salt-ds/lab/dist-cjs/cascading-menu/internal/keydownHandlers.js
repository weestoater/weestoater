'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var stateChangeTypes = require('../stateChangeTypes.js');
var CascadingMenuAction = require('./CascadingMenuAction.js');
var stateUtils = require('./stateUtils.js');

function getKeyDownHandlers(props, setIsMenuActive) {
  const {
    keyDownHandlersOverride,
    onItemClick,
    dispatch,
    isNavigatingWithKeyboard,
    setIsNavigatingWithKeyboard,
    data,
    menuTriggerRef,
    highlightedItemIndex,
    menuId,
    parentElement,
    isRoot
  } = props;
  const rowCount = data.menuItems.length;
  const isIndexDisabled = () => {
    var _a, _b;
    return highlightedItemIndex ? (_b = (_a = data.menuItems) == null ? void 0 : _a[highlightedItemIndex]) == null ? void 0 : _b.disabled : false;
  };
  const handlers = {
    Enter(event) {
      event.preventDefault();
      setIsNavigatingWithKeyboard(true);
      if (highlightedItemIndex === null || isIndexDisabled()) {
        return;
      }
      const selectedItem = data.menuItems[highlightedItemIndex];
      const subMenuId = data.childMenus[highlightedItemIndex];
      if (stateUtils.isMenuItem(selectedItem)) {
        onItemClick == null ? void 0 : onItemClick(selectedItem, event);
        dispatch({
          type: CascadingMenuAction.CascadingMenuAction.CLOSE_CASCADING_MENU,
          cause: stateChangeTypes.stateChangeTypes.ITEM_KEYDOWN_ENTER,
          targetId: menuId
        });
        if (menuTriggerRef && menuTriggerRef.focus) {
          menuTriggerRef.focus();
        }
      } else if (stateUtils.hasSubMenu(selectedItem)) {
        setIsMenuActive(false);
        dispatch({
          type: CascadingMenuAction.CascadingMenuAction.OPEN_MENU,
          cause: stateChangeTypes.stateChangeTypes.ITEM_KEYDOWN_ENTER,
          targetId: subMenuId
        });
      }
    },
    ArrowRight(event) {
      event.preventDefault();
      setIsNavigatingWithKeyboard(true);
      if (highlightedItemIndex === null && !isNavigatingWithKeyboard) {
        dispatch({
          type: CascadingMenuAction.CascadingMenuAction.SET_CURRENT_INTERACTED_ITEM,
          cause: stateChangeTypes.stateChangeTypes.ITEM_KEYDOWN_ARROW_RIGHT,
          targetId: menuId,
          highlightedItemIndex: 0
        });
        return;
      }
      if (highlightedItemIndex === null || isIndexDisabled()) {
        return;
      }
      const selectedItem = data.menuItems[highlightedItemIndex];
      const subMenuId = data.childMenus[highlightedItemIndex];
      if (stateUtils.hasSubMenu(selectedItem)) {
        setIsMenuActive(false);
        dispatch({
          type: CascadingMenuAction.CascadingMenuAction.OPEN_MENU,
          cause: stateChangeTypes.stateChangeTypes.ITEM_KEYDOWN_ARROW_RIGHT,
          targetId: subMenuId
        });
      }
    },
    " ": (event) => {
      event.preventDefault();
      setIsNavigatingWithKeyboard(true);
      if (highlightedItemIndex === null || isIndexDisabled()) {
        return;
      }
      const selectedItem = data.menuItems[highlightedItemIndex];
      const subMenuId = data.childMenus[highlightedItemIndex];
      if (stateUtils.isMenuItem(selectedItem)) {
        onItemClick == null ? void 0 : onItemClick(selectedItem, event);
      } else if (stateUtils.hasSubMenu(selectedItem)) {
        setIsMenuActive(false);
        dispatch({
          type: CascadingMenuAction.CascadingMenuAction.OPEN_MENU,
          cause: stateChangeTypes.stateChangeTypes.ITEM_KEYDOWN_SPACEBAR,
          targetId: subMenuId
        });
      }
    },
    Tab() {
      setIsNavigatingWithKeyboard(true);
      dispatch({
        type: CascadingMenuAction.CascadingMenuAction.CLOSE_CASCADING_MENU,
        cause: stateChangeTypes.stateChangeTypes.ITEM_KEYDOWN_TAB,
        targetId: menuId
      });
      if (menuTriggerRef && menuTriggerRef.focus) {
        menuTriggerRef.focus();
      }
    },
    ArrowLeft(event) {
      event.preventDefault();
      setIsNavigatingWithKeyboard(true);
      if (parentElement && !isRoot) {
        parentElement.focus();
        dispatch({
          type: CascadingMenuAction.CascadingMenuAction.CLOSE_MENU,
          cause: stateChangeTypes.stateChangeTypes.ITEM_KEYDOWN_ARROW_LEFT,
          targetId: menuId
        });
      }
    },
    Escape(event) {
      event.preventDefault();
      setIsNavigatingWithKeyboard(true);
      dispatch({
        type: CascadingMenuAction.CascadingMenuAction.CLOSE_MENU,
        cause: stateChangeTypes.stateChangeTypes.ITEM_KEYDOWN_ESCAPE,
        targetId: menuId
      });
      if (parentElement) {
        parentElement.focus();
      }
    },
    ArrowDown(event) {
      event.preventDefault();
      setIsNavigatingWithKeyboard(true);
      let indexAfterMovement = highlightedItemIndex === null ? 0 : highlightedItemIndex + 1;
      indexAfterMovement = indexAfterMovement > rowCount - 1 ? 0 : indexAfterMovement;
      dispatch({
        type: CascadingMenuAction.CascadingMenuAction.SET_CURRENT_INTERACTED_ITEM,
        cause: stateChangeTypes.stateChangeTypes.ITEM_KEYDOWN_ARROW_DOWN,
        targetId: menuId,
        highlightedItemIndex: indexAfterMovement
      });
    },
    ArrowUp(event) {
      event.preventDefault();
      setIsNavigatingWithKeyboard(true);
      let indexAfterMovement = highlightedItemIndex === null ? rowCount - 1 : highlightedItemIndex - 1;
      indexAfterMovement = indexAfterMovement < 0 ? rowCount - 1 : indexAfterMovement;
      dispatch({
        type: CascadingMenuAction.CascadingMenuAction.SET_CURRENT_INTERACTED_ITEM,
        cause: stateChangeTypes.stateChangeTypes.ITEM_KEYDOWN_ARROW_UP,
        targetId: menuId,
        highlightedItemIndex: indexAfterMovement
      });
    },
    Home(event) {
      event.preventDefault();
      setIsNavigatingWithKeyboard(true);
      if (highlightedItemIndex === 0) {
        return;
      }
      dispatch({
        type: CascadingMenuAction.CascadingMenuAction.SET_CURRENT_INTERACTED_ITEM,
        cause: stateChangeTypes.stateChangeTypes.ITEM_KEYDOWN_HOME,
        targetId: menuId,
        highlightedItemIndex: 0
      });
    },
    End(event) {
      event.preventDefault();
      setIsNavigatingWithKeyboard(true);
      if (highlightedItemIndex === rowCount - 1) {
        return;
      }
      dispatch({
        type: CascadingMenuAction.CascadingMenuAction.SET_CURRENT_INTERACTED_ITEM,
        cause: stateChangeTypes.stateChangeTypes.ITEM_KEYDOWN_ESCAPE,
        targetId: menuId,
        highlightedItemIndex: rowCount - 1
      });
    },
    ...keyDownHandlersOverride
  };
  const handleKeyDown = (event) => {
    var _a;
    (_a = handlers[event.key]) == null ? void 0 : _a.call(handlers, event);
  };
  return handleKeyDown;
}

exports.getKeyDownHandlers = getKeyDownHandlers;
//# sourceMappingURL=keydownHandlers.js.map
