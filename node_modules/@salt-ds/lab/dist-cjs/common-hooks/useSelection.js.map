{"version":3,"file":"useSelection.js","sources":["../src/common-hooks/useSelection.ts"],"sourcesContent":["import { useControlled } from \"@salt-ds/core\";\nimport { KeyboardEvent, MouseEvent, useCallback, useRef } from \"react\";\nimport { CollectionItem } from \"./collectionTypes\";\nimport {\n  SelectionHookProps,\n  SelectionHookResult,\n  SelectionStrategy,\n  SingleSelectionStrategy,\n} from \"./selectionTypes\";\n\nexport const CHECKBOX = \"checkbox\";\n\nexport const GROUP_SELECTION_NONE = \"none\";\nexport const GROUP_SELECTION_SINGLE = \"single\";\nexport const GROUP_SELECTION_CASCADE = \"cascade\";\n\nexport type GroupSelectionMode = \"none\" | \"single\" | \"cascade\";\n\nconst defaultSelectionKeys = [\"Enter\", \" \"];\n\nconst isSelectable = (item?: CollectionItem<unknown>) =>\n  item && item.disabled !== true && item.selectable !== false;\n\nconst byItemIndex = (\n  i1: CollectionItem<unknown>,\n  i2: CollectionItem<unknown>\n) => (i1.index ?? 0) - (i2.index ?? 0);\n\nexport const groupSelectionEnabled = (\n  groupSelection: GroupSelectionMode\n): boolean => groupSelection && groupSelection !== GROUP_SELECTION_NONE;\n\nexport const useSelection = <\n  Item,\n  Selection extends SelectionStrategy = \"default\"\n>({\n  defaultSelected,\n  disableSelection = false,\n  // groupSelection = GROUP_SELECTION_NONE,\n  highlightedIdx,\n  indexPositions,\n  label = \"\",\n  onSelect,\n  onSelectionChange,\n  selected: selectedProp,\n  selectionStrategy,\n  selectionKeys = defaultSelectionKeys,\n  tabToSelect,\n}: SelectionHookProps<Item, Selection>): SelectionHookResult<\n  Item,\n  Selection\n> => {\n  type collectionItem = CollectionItem<Item>;\n\n  const isDeselectable = selectionStrategy === \"deselectable\";\n  const isMultipleSelect = selectionStrategy === \"multiple\";\n  const isExtendedSelect = selectionStrategy === \"extended\";\n\n  const lastActive = useRef(-1);\n\n  const isSelectionEvent = useCallback(\n    (evt: KeyboardEvent) => selectionKeys.includes(evt.key),\n    [selectionKeys]\n  );\n\n  const emptyValue = useCallback(<\n    Item\n  >(): Selection extends SingleSelectionStrategy\n    ? null\n    : CollectionItem<Item>[] => {\n    type returnType = Selection extends SingleSelectionStrategy\n      ? null\n      : CollectionItem<Item>[];\n    return isMultipleSelect || isExtendedSelect\n      ? ([] as unknown as returnType)\n      : (null as returnType);\n  }, [isMultipleSelect, isExtendedSelect]);\n\n  const [selected, setSelected] = useControlled<\n    Selection extends SingleSelectionStrategy\n      ? CollectionItem<Item> | null\n      : CollectionItem<Item>[]\n  >({\n    controlled: selectedProp,\n    default: defaultSelected ?? emptyValue(),\n    name: \"UseSelection\",\n    state: \"selected\",\n  });\n\n  const isItemSelected = useCallback(\n    (item: collectionItem) => {\n      return Array.isArray(selected)\n        ? selected.includes(item)\n        : selected === item;\n    },\n    [selected]\n  );\n\n  const selectDefault = useCallback((item: collectionItem) => item, []);\n  const selectDeselectable = useCallback(\n    (item: collectionItem) => (isItemSelected(item) ? null : item),\n    [isItemSelected]\n  );\n  const selectMultiple = useCallback(\n    (item: collectionItem) => {\n      const nextItems = isItemSelected(item)\n        ? (selected as collectionItem[]).filter((i) => i !== item)\n        : (selected as collectionItem[]).concat(item);\n      nextItems.sort(byItemIndex);\n      return nextItems;\n    },\n    [isItemSelected, selected]\n  );\n  const selectRange = useCallback(\n    (idx: number, preserveExistingSelection?: boolean) => {\n      const currentSelection = preserveExistingSelection\n        ? (selected as collectionItem[])\n        : ([] as collectionItem[]);\n\n      const [lastSelectedItem] = (selected as collectionItem[]).slice(-1);\n      const lastSelectedItemIndex = lastSelectedItem\n        ? indexPositions.indexOf(lastSelectedItem)\n        : 0;\n\n      const startRegion = Math.min(idx, lastSelectedItemIndex);\n      const endRegion = Math.max(idx, lastSelectedItemIndex);\n      const rangeSelection = indexPositions.slice(startRegion, endRegion + 1);\n      // concat the current selection with a new selection and remove duplicates for overlaps\n      const nextItems = [...new Set([...currentSelection, ...rangeSelection])];\n      nextItems.sort(byItemIndex);\n      return nextItems;\n    },\n    [indexPositions, selected]\n  );\n\n  const selectItemAtIndex = useCallback(\n    (\n      evt: any,\n      idx: number,\n      item: collectionItem,\n      rangeSelect: boolean,\n      preserveExistingSelection?: boolean\n    ) => {\n      type returnType = Selection extends SingleSelectionStrategy\n        ? CollectionItem<Item> | null\n        : CollectionItem<Item>[];\n      let newSelected: returnType;\n      if (isMultipleSelect) {\n        newSelected = selectMultiple(item) as returnType;\n      } else if (isExtendedSelect) {\n        if (preserveExistingSelection && !rangeSelect) {\n          newSelected = selectMultiple(item) as returnType;\n        } else if (rangeSelect) {\n          newSelected = selectRange(\n            idx,\n            preserveExistingSelection\n          ) as returnType;\n        } else {\n          newSelected = [item] as returnType;\n        }\n      } else if (isDeselectable) {\n        newSelected = selectDeselectable(item) as returnType;\n      } else {\n        newSelected = selectDefault(item) as returnType;\n      }\n\n      if (newSelected !== selected) {\n        setSelected(newSelected);\n      }\n\n      // We fire onSelect irrespective of whether selection changes\n      onSelect?.(evt, item);\n\n      if (newSelected !== selected) {\n        if (onSelectionChange) {\n          onSelectionChange(evt, newSelected);\n        }\n      }\n    },\n    [\n      isMultipleSelect,\n      isExtendedSelect,\n      isDeselectable,\n      selected,\n      onSelect,\n      selectMultiple,\n      selectRange,\n      selectDeselectable,\n      selectDefault,\n      setSelected,\n      onSelectionChange,\n    ]\n  );\n\n  const handleKeyDown = useCallback(\n    (evt: KeyboardEvent) => {\n      const item = indexPositions[highlightedIdx];\n      if (isSelectable(item)) {\n        if (isSelectionEvent(evt) || (tabToSelect && evt.key === \"Tab\")) {\n          // We do not inhibit Tab behaviour, if we are selecting on Tab then we apply\n          // selection as a side effect of the Tab, not as a replacement for Tabbing.\n          if (evt.key !== \"Tab\") {\n            evt.preventDefault();\n          }\n          selectItemAtIndex(\n            evt,\n            highlightedIdx,\n            item,\n            false,\n            evt.ctrlKey || evt.metaKey\n          );\n          if (isExtendedSelect) {\n            lastActive.current = highlightedIdx;\n          }\n        }\n      }\n    },\n    [\n      indexPositions,\n      highlightedIdx,\n      isSelectionEvent,\n      tabToSelect,\n      selectItemAtIndex,\n      isExtendedSelect,\n    ]\n  );\n\n  const handleKeyboardNavigation = useCallback(\n    (evt: KeyboardEvent, currentIndex: number) => {\n      if (isExtendedSelect && evt.shiftKey) {\n        const item = indexPositions[currentIndex];\n        if (isSelectable(item)) {\n          selectItemAtIndex(evt, currentIndex, item, true);\n        }\n      }\n    },\n    [isExtendedSelect, indexPositions, selectItemAtIndex]\n  );\n\n  const handleClick = useCallback(\n    (evt: MouseEvent) => {\n      const item = indexPositions[highlightedIdx];\n      if (!disableSelection && isSelectable(item)) {\n        // if (!isCollapsibleItem(item)) {\n        evt.preventDefault();\n        evt.stopPropagation();\n        selectItemAtIndex(\n          evt,\n          highlightedIdx,\n          item,\n          evt.shiftKey,\n          evt.ctrlKey || evt.metaKey\n        );\n        if (isExtendedSelect) {\n          lastActive.current = highlightedIdx;\n        }\n        // }\n      }\n    },\n    [\n      disableSelection,\n      isExtendedSelect,\n      highlightedIdx,\n      indexPositions,\n      selectItemAtIndex,\n    ]\n  );\n\n  const listHandlers = {\n    onClick: handleClick,\n    onKeyDown: handleKeyDown,\n    onKeyboardNavigation: handleKeyboardNavigation,\n  };\n\n  return {\n    listHandlers,\n    selected,\n    setSelected,\n  };\n};\n"],"names":["useRef","useCallback","useControlled"],"mappings":"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"}