'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var keyUtils = require('./keyUtils.js');

const NO_HANDLERS = {};
const canToggleItem = (item) => Array.isArray(item.childNodes);
const toggleIconClicked = (el) => {
  const closestToggle = el.closest(
    "[data-toggle],[aria-expanded]"
  );
  return closestToggle.dataset.toggle === "true";
};
const useCollapsibleGroups = ({
  collapsibleHeaders,
  collectionHook,
  highlightedIdx,
  onToggle
}) => {
  const handleKeyDown = React.useCallback(
    (e) => {
      if (e.key === keyUtils.ArrowRight || e.key === keyUtils.Enter) {
        const item = collectionHook.data[highlightedIdx];
        if (item) {
          if (item.expanded === false && item.value) {
            e.preventDefault();
            collectionHook.expandGroupItem(item);
            onToggle == null ? void 0 : onToggle(item.value);
          }
        }
      }
      if (e.key === keyUtils.ArrowLeft || e.key === keyUtils.Enter) {
        const item = collectionHook.data[highlightedIdx];
        if (item) {
          if (item.expanded && item.value) {
            e.preventDefault();
            collectionHook.collapseGroupItem(item);
            onToggle == null ? void 0 : onToggle(item.value);
          }
        }
      }
    },
    [
      collectionHook.collapseGroupItem,
      collectionHook.data,
      collectionHook.expandGroupItem,
      highlightedIdx
    ]
  );
  const handleClick = React.useCallback(
    (evt) => {
      console.log(`useCollapsibleGroups idx=${highlightedIdx}`);
      const item = collectionHook.data[highlightedIdx];
      console.log(evt.target, evt.currentTarget);
      if (item && canToggleItem(item) && (toggleIconClicked(evt.target))) {
        evt.stopPropagation();
        evt.preventDefault();
        if (item.expanded === false && item.value) {
          collectionHook.expandGroupItem(item);
          onToggle == null ? void 0 : onToggle(item.value);
        } else if (item.expanded === true && item.value) {
          collectionHook.collapseGroupItem(item);
          onToggle == null ? void 0 : onToggle(item.value);
        }
      }
    },
    [
      collectionHook.collapseGroupItem,
      collectionHook.data,
      collectionHook.expandGroupItem,
      highlightedIdx
    ]
  );
  const listHandlers = {
    onClick: handleClick,
    onKeyDown: handleKeyDown
  };
  return collapsibleHeaders ? listHandlers : NO_HANDLERS;
};

exports.useCollapsibleGroups = useCollapsibleGroups;
//# sourceMappingURL=useCollapsibleGroups.js.map
