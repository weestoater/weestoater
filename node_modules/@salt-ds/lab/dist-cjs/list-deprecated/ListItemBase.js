'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var core = require('@salt-ds/core');
var clsx = require('clsx');
var React = require('react');
var useOverflowDetection = require('../utils/useOverflowDetection.js');
var Highlighter = require('./internal/Highlighter.js');
var window = require('@salt-ds/window');
var styles = require('@salt-ds/styles');
var ListItem = require('./ListItem.css.js');

const withBaseName = core.makePrefixer("saltListItemDeprecated");
const ListItemBase = React.memo(
  React.forwardRef(function ListItemBase2(props, ref) {
    const {
      className,
      deselectable,
      selected,
      highlighted = false,
      focusVisible,
      tooltipText,
      disabled,
      children,
      itemTextHighlightPattern,
      ...restProps
    } = props;
    const targetWindow = window.useWindow();
    styles.useComponentCssInjection({
      testId: "salt-list-item-deprecated",
      css: ListItem,
      window: targetWindow
    });
    const { current: detectTruncation } = React.useRef(typeof children === "string");
    const [overflowRef, isOverflowed] = useOverflowDetection.useOverflowDetection();
    const setItemRef = core.useForkRef(overflowRef, ref);
    return /* @__PURE__ */ jsxRuntime.jsx(core.Tooltip, {
      disabled: !isOverflowed,
      content: tooltipText,
      children: /* @__PURE__ */ jsxRuntime.jsx("div", {
        "aria-label": typeof children === "string" ? children : void 0,
        ref: detectTruncation ? ref : setItemRef,
        ...restProps,
        className: clsx.clsx(
          withBaseName(),
          {
            [withBaseName("deselectable")]: deselectable,
            [withBaseName("highlighted")]: highlighted,
            [withBaseName("selected")]: selected,
            [withBaseName("focusVisible")]: focusVisible,
            [withBaseName("disabled")]: disabled
          },
          className
        ),
        children: detectTruncation ? /* @__PURE__ */ jsxRuntime.jsx("span", {
          className: withBaseName("textWrapper"),
          ref: overflowRef,
          children: itemTextHighlightPattern == null ? children : /* @__PURE__ */ jsxRuntime.jsx(Highlighter.Highlighter, {
            matchPattern: itemTextHighlightPattern,
            text: children
          })
        }) : children
      })
    });
  })
);

exports.ListItemBase = ListItemBase;
//# sourceMappingURL=ListItemBase.js.map
