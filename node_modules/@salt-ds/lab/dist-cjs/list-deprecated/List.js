'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var core = require('@salt-ds/core');
var React = require('react');
var ListBase = require('./ListBase.js');
var ListStateContext = require('./ListStateContext.js');
var useList = require('./useList.js');
var useTypeSelect = require('./useTypeSelect.js');
var DescendantContext = require('./internal/DescendantContext.js');

const ListWithDescendants = React.forwardRef(function ListWithDescendants2(props, ref) {
  const { items } = React.useContext(DescendantContext.DescendantContext);
  const { focusedRef, state, helpers, listProps } = useList.useList({
    source: items.current.length ? items.current : [],
    ...props
  });
  const { highlightedIndex } = state;
  const { setHighlightedIndex, setFocusVisible } = helpers;
  const {
    disabled,
    disableTypeToSelect,
    getItemAtIndex,
    itemCount,
    itemToString,
    onKeyDownCapture: onListKeyDownCapture,
    ...restListProps
  } = listProps;
  const { onKeyDownCapture: onTypeSelectKeyDownCapture } = useTypeSelect.useTypeSelect({
    getItemAtIndex,
    highlightedIndex,
    itemCount,
    itemToString,
    setFocusVisible,
    setHighlightedIndex
  });
  const setListRef = core.useForkRef(focusedRef, props.listRef);
  const handleKeyDownCapture = (event) => {
    if (disabled) {
      return;
    }
    if (onListKeyDownCapture) {
      onListKeyDownCapture(event);
    }
    if (!disableTypeToSelect && onTypeSelectKeyDownCapture) {
      onTypeSelectKeyDownCapture(event);
    }
  };
  return /* @__PURE__ */ jsxRuntime.jsx(ListStateContext.ListStateContext.Provider, {
    value: { state, helpers },
    children: /* @__PURE__ */ jsxRuntime.jsx(ListBase.ListBase, {
      listRef: setListRef,
      ref,
      ...restListProps,
      disabled,
      getItemAtIndex,
      itemCount,
      itemToString,
      onKeyDownCapture: handleKeyDownCapture
    })
  });
});
const List = React.forwardRef(function List2(props, ref) {
  const itemsRef = React.useRef([]);
  return /* @__PURE__ */ jsxRuntime.jsx(DescendantContext.DescendantProvider, {
    items: itemsRef,
    children: /* @__PURE__ */ jsxRuntime.jsx(ListWithDescendants, {
      ref,
      ...props
    })
  });
});

exports.List = List;
//# sourceMappingURL=List.js.map
