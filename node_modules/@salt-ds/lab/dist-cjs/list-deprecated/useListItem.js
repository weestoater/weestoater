'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var ListStateContext = require('./ListStateContext.js');
var ListItemContext = require('./ListItemContext.js');

function useListItem(props) {
  var _a;
  validateProps(props);
  const context = ListItemContext.useListItemContext();
  const { state, helpers } = ListStateContext.useListStateContext();
  const { setHighlightedIndex, setFocusVisible, handleSelect } = helpers;
  const {
    focusVisible,
    highlightedIndex,
    selectedItem,
    isDeselectable,
    isDisabled,
    isMultiSelect
  } = state;
  const {
    index,
    item,
    onClick,
    onMouseDown,
    onMouseMove,
    id = context.getItemId(index),
    itemHeight = (_a = context.getItemHeight) == null ? void 0 : _a.call(context, index),
    itemToString = context.itemToString,
    itemTextHighlightPattern = context.itemTextHighlightPattern,
    disabled = item.disabled || isDisabled,
    ariaProps: ariaPropsProp,
    style: styleProp,
    ...restProps
  } = props;
  const style = React.useMemo(
    () => ({
      height: itemHeight,
      ...styleProp
    }),
    [itemHeight, JSON.stringify(styleProp)]
  );
  const highlighted = index === highlightedIndex;
  const selected = isMultiSelect ? selectedItem.indexOf(item) !== -1 : item === selectedItem;
  const handleClick = React.useCallback(
    (event) => {
      handleSelect(event, index, item);
      if (onClick) {
        onClick(event);
      }
    },
    [handleSelect, index, item, onClick]
  );
  const handleMouseMove = React.useCallback(
    (event) => {
      setHighlightedIndex(index);
      setFocusVisible(false);
      if (onMouseMove) {
        onMouseMove(event);
      }
    },
    [index, setFocusVisible, setHighlightedIndex, onMouseMove]
  );
  const handleMouseDown = (event) => {
    if (context.disableMouseDown) {
      event.preventDefault();
    } else if (onMouseDown) {
      onMouseDown(event);
    }
  };
  const eventHandlers = {
    onClick: handleClick,
    onMouseMove: handleMouseMove,
    onMouseDown: handleMouseDown
  };
  const ariaProps = {
    role: "option",
    ...disabled && { "aria-disabled": true },
    ...ariaPropsProp
  };
  if (selected) {
    ariaProps[`${isMultiSelect ? "aria-selected" : "aria-checked"}`] = true;
  }
  return {
    item,
    itemToString,
    itemProps: {
      "data-option-index": index,
      id,
      style,
      deselectable: isDeselectable || isMultiSelect,
      disabled,
      selected,
      highlighted,
      itemTextHighlightPattern,
      focusVisible: focusVisible && highlighted,
      tooltipText: itemToString(item),
      ...ariaProps,
      ...restProps,
      ...disabled ? {} : eventHandlers
    }
  };
}
const useVirtualizedListItem = (props) => {
  const { index, data, style = {} } = props;
  const { width: _unusedWidth, height: itemHeight, ...restStyle } = style;
  return useListItem({
    index,
    itemHeight,
    style: restStyle,
    item: data[index],
    ariaProps: {
      "aria-posinset": index + 1,
      "aria-setsize": data.length
    }
  });
};
const validateProps = (props) => {
  const { index, item } = props;
  React.useEffect(() => {
    if (item === void 0) {
      console.warn("useListItem needs `item`.");
    }
    if (index === void 0) {
      console.warn("useListItem needs to know item's index.");
    }
  }, [index, item]);
};

exports.useListItem = useListItem;
exports.useVirtualizedListItem = useVirtualizedListItem;
//# sourceMappingURL=useListItem.js.map
