'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var core = require('@salt-ds/core');
var clsx = require('clsx');
var React = require('react');
var reactWindow = require('react-window');
var calcPreferredListHeight = require('./internal/calcPreferredListHeight.js');
var scrollIntoView = require('./internal/scrollIntoView.js');
var useListAutoSizer = require('./internal/useListAutoSizer.js');
var itemToString = require('./itemToString.js');
var ListItemBase = require('./ListItemBase.js');
var ListItemContext = require('./ListItemContext.js');
var ListStateContext = require('./ListStateContext.js');
var useListItem = require('./useListItem.js');
var window = require('@salt-ds/window');
var styles = require('@salt-ds/styles');
var List = require('./List.css.js');

const withBaseName = core.makePrefixer("saltListDeprecated");
const ListboxContext = React.createContext({});
const DefaultItem = React.memo(function DefaultItem2(props) {
  const { item, itemToString, itemProps } = useListItem.useListItem(props);
  return /* @__PURE__ */ jsxRuntime.jsx(ListItemBase.ListItemBase, {
    ...itemProps,
    children: itemToString(item)
  });
}, reactWindow.areEqual);
const DefaultVirtualizedItem = React.memo(
  function DefaultVirtualizedItem2(props) {
    const { item, itemToString, itemProps } = useListItem.useVirtualizedListItem(props);
    return /* @__PURE__ */ jsxRuntime.jsx(ListItemBase.ListItemBase, {
      ...itemProps,
      children: itemToString(item)
    });
  },
  reactWindow.areEqual
);
const Listbox = React.forwardRef(function Listbox2(props, ref) {
  const { style, onScroll, children } = props;
  const {
    className,
    borderless,
    disabled,
    disableFocus,
    listRef,
    style: styleProp,
    onScroll: onScrollProp,
    ...restListProps
  } = React.useContext(ListboxContext);
  const setListRef = core.useForkRef(ref, listRef);
  const handleScroll = (event) => {
    if (onScroll) {
      onScroll(event);
    }
    if (onScrollProp) {
      onScrollProp(event);
    }
  };
  return /* @__PURE__ */ jsxRuntime.jsx("div", {
    className: clsx.clsx(
      withBaseName(),
      {
        [withBaseName("disabled")]: disabled
      },
      className
    ),
    onScroll: handleScroll,
    ref: setListRef,
    style: { ...style, ...styleProp },
    tabIndex: disabled || disableFocus ? void 0 : 0,
    ...restListProps,
    children
  });
});
const noScrolling = {
  scrollToIndex: (itemIndex) => void 0,
  scrollToItem: (item) => void 0,
  scrollTo: (scrollOffset) => void 0
};
const ListBase = React.forwardRef(function ListBase2(props, ref) {
  var _a;
  const targetWindow = window.useWindow();
  styles.useComponentCssInjection({
    testId: "salt-list-deprecated",
    css: List,
    window: targetWindow
  });
  const { state } = ListStateContext.useListStateContext();
  const generatedId = core.useId(props.id);
  const defaultId = (_a = state.id) != null ? _a : generatedId;
  const sizeStackable = "36px";
  const defaultItemHeight = parseInt(sizeStackable, 10);
  const hasIndexer = typeof props.getItemAtIndex === "function";
  const hasVariableHeight = typeof props.getItemHeight === "function";
  const {
    id = defaultId,
    source = [],
    borderless,
    children,
    disableMouseDown,
    itemTextHighlightPattern,
    itemCount = source.length,
    itemToString: itemToString$1 = itemToString.itemToString,
    itemGapSize = 1,
    itemHeight = defaultItemHeight,
    getItemHeight = () => itemHeight,
    getItemId = (index) => `${id}-item-${index}`,
    getItemIndex = (item) => source.indexOf(item),
    getItemAtIndex,
    overscanCount = 10,
    displayedItemCount = 10,
    virtualized,
    width,
    height,
    maxWidth,
    maxHeight,
    minWidth,
    minHeight,
    ListPlaceholder,
    ListItem = virtualized ? DefaultVirtualizedItem : DefaultItem,
    listRef: listRefProp,
    ...restProps
  } = props;
  const { highlightedIndex } = state;
  const preferredHeight = height != null ? height : calcPreferredListHeight.calcPreferredListHeight({
    borderless,
    displayedItemCount,
    itemCount,
    itemHeight,
    getItemHeight,
    itemGapSize
  });
  const [containerRef, autoSize] = useListAutoSizer.useListAutoSizer({
    responsive: width === void 0 || height === void 0,
    height: preferredHeight,
    width
  });
  const virtualizedListRef = React.useRef(null);
  const listRef = React.useRef(null);
  const setListRef = core.useForkRef(listRef, listRefProp);
  const scrollToIndex = (itemIndex) => {
    var _a2;
    scrollIntoView.scrollIntoView(
      (_a2 = listRef.current) == null ? void 0 : _a2.querySelector(`[data-option-index="${itemIndex}"]`),
      listRef
    );
  };
  const scrollHandles = React.useMemo(
    () => ({
      scrollToIndex,
      scrollToItem: (item) => {
        scrollToIndex(getItemIndex(item));
      },
      scrollTo: (scrollOffset) => {
        if (listRef.current) {
          listRef.current.scrollTop = scrollOffset;
        }
      }
    }),
    [getItemIndex]
  );
  const virtualizedScrollHandles = React.useMemo(
    () => ({
      scrollToIndex: (itemIndex) => {
        if (virtualizedListRef.current) {
          virtualizedListRef.current.scrollToItem(itemIndex);
        }
      },
      scrollToItem: (item) => {
        virtualizedListRef.current.scrollToItem(getItemIndex(item));
      },
      scrollTo: (scrollOffset) => {
        virtualizedListRef.current.scrollTo(scrollOffset);
      }
    }),
    [getItemIndex]
  );
  React.useImperativeHandle(
    ref,
    () => {
      if (virtualized && virtualizedListRef.current) {
        return virtualizedScrollHandles;
      } else if (listRef.current) {
        return scrollHandles;
      } else {
        return noScrolling;
      }
    },
    [virtualized, scrollHandles, virtualizedScrollHandles]
  );
  core.useIsomorphicLayoutEffect(() => {
    if (highlightedIndex == null) {
      return;
    }
    if (virtualized && virtualizedListRef.current) {
      virtualizedListRef.current.scrollToItem(highlightedIndex);
    } else if (listRef.current) {
      scrollToIndex(highlightedIndex);
    }
  }, [highlightedIndex, virtualized]);
  const renderList = () => {
    if (React.Children.count(children)) {
      return /* @__PURE__ */ jsxRuntime.jsx(Listbox, {
        style: autoSize,
        children: /* @__PURE__ */ jsxRuntime.jsx(ListItemContext.ListItemContext.Provider, {
          value: {
            disableMouseDown,
            getItemId,
            getItemHeight,
            itemToString: itemToString$1,
            itemTextHighlightPattern
          },
          children
        })
      });
    }
    if (virtualized) {
      const VirtualizedList = hasVariableHeight ? reactWindow.VariableSizeList : reactWindow.FixedSizeList;
      return /* @__PURE__ */ jsxRuntime.jsx(ListItemContext.ListItemContext.Provider, {
        value: {
          disableMouseDown,
          getItemId,
          itemToString: itemToString$1,
          itemTextHighlightPattern
        },
        children: /* @__PURE__ */ jsxRuntime.jsx(VirtualizedList, {
          height: autoSize.height,
          itemCount,
          itemData: source,
          itemSize: hasVariableHeight ? getItemHeight : itemHeight,
          outerElementType: Listbox,
          overscanCount,
          ref: virtualizedListRef,
          width: autoSize.width,
          children: ListItem
        })
      });
    }
    return /* @__PURE__ */ jsxRuntime.jsx(Listbox, {
      style: autoSize,
      children: /* @__PURE__ */ jsxRuntime.jsx(ListItemContext.ListItemContext.Provider, {
        value: {
          disableMouseDown,
          getItemId,
          getItemHeight,
          itemToString: itemToString$1,
          itemTextHighlightPattern
        },
        children: (hasIndexer ? Array.from({ length: itemCount }) : source).map(
          (item, index) => /* @__PURE__ */ jsxRuntime.jsx(ListItem, {
            index,
            item: hasIndexer ? getItemAtIndex(index) : item
          }, getItemId(index))
        )
      })
    });
  };
  return /* @__PURE__ */ jsxRuntime.jsx("div", {
    className: clsx.clsx(withBaseName("wrapper"), {
      [withBaseName("borderless")]: borderless
    }),
    ref: containerRef,
    style: {
      minWidth,
      minHeight,
      width: width != null ? width : "100%",
      height: height != null ? height : "100%",
      maxWidth: maxWidth != null ? maxWidth : width,
      maxHeight: maxHeight != null ? maxHeight : preferredHeight
    },
    children: itemCount === 0 && ListPlaceholder !== void 0 ? /* @__PURE__ */ jsxRuntime.jsx(ListPlaceholder, {
      style: autoSize
    }) : /* @__PURE__ */ jsxRuntime.jsx(ListboxContext.Provider, {
      value: {
        ...restProps,
        listRef: setListRef,
        id,
        borderless
      },
      children: renderList()
    })
  });
});

exports.ListBase = ListBase;
//# sourceMappingURL=ListBase.js.map
