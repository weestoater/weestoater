'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var core = require('@salt-ds/core');
var clsx = require('clsx');
var React = require('react');
var BreadcrumbsCollapsed = require('./internal/BreadcrumbsCollapsed.js');
var BreadcrumbsContext = require('./internal/BreadcrumbsContext.js');
var BreadcrumbsSeparator = require('./internal/BreadcrumbsSeparator.js');
var window = require('@salt-ds/window');
var styles = require('@salt-ds/styles');
var Breadcrumbs$1 = require('./Breadcrumbs.css.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

const iconWidth = 12;
const withBaseName = core.makePrefixer("saltBreadcrumbs");
function insertSeparators(items, className, separator, hideCurrentLevel, shouldRenderAllItems, itemsAfterCollapse) {
  return items.reduce((acc, current, index) => {
    if (index < items.length - 1) {
      return acc.concat(
        current,
        /* @__PURE__ */ jsxRuntime.jsx("li", {
          "aria-hidden": true,
          className,
          children: separator
        }, `separator-${index}`)
      );
    } else {
      const skipLastElement = hideCurrentLevel && shouldRenderAllItems || hideCurrentLevel && !shouldRenderAllItems && itemsAfterCollapse !== 0;
      return skipLastElement ? acc : acc.concat(current);
    }
  }, []);
}
const Breadcrumbs = React__default["default"].forwardRef(
  function Breadcrumbs2(props, ref) {
    const {
      children,
      className,
      itemsAfterCollapse = 1,
      itemsBeforeCollapse = 1,
      maxItems = 3,
      separator: separatorProp,
      hideCurrentLevel,
      itemsMinWidth: itemsMinWidthProp,
      itemsMaxWidth,
      wrap,
      Menu,
      SeparatorProps = {},
      ...other
    } = props;
    const targetWindow = window.useWindow();
    styles.useComponentCssInjection({
      testId: "salt-breadcrumbs",
      css: Breadcrumbs$1,
      window: targetWindow
    });
    const itemsMinWidth = itemsMinWidthProp != null ? itemsMinWidthProp : iconWidth;
    const breadcrumbsContext = React.useMemo(
      () => ({
        wrap,
        itemsMinWidth,
        itemsMaxWidth,
        liClass: withBaseName("li")
      }),
      [wrap, itemsMaxWidth, itemsMinWidth]
    );
    const separator = separatorProp || /* @__PURE__ */ jsxRuntime.jsx(BreadcrumbsSeparator.BreadcrumbsSeparator, {
      ...SeparatorProps
    });
    const childrenArray = React__default["default"].Children.toArray(children);
    const shouldRenderAllItems = wrap || maxItems == null || childrenArray.length <= maxItems;
    const allItems = childrenArray.filter(React.isValidElement).map((child, index) => {
      const isLastChild = index === childrenArray.length - 1;
      return React__default["default"].cloneElement(child, {
        isCurrentLevel: isLastChild
      });
    });
    const renderItemsBeforeAndAfter = () => {
      if (itemsBeforeCollapse + itemsAfterCollapse >= allItems.length) {
        console.warn(
          [
            "You have provided an invalid combination of properties to the Breadcrumbs.",
            `itemsAfterCollapse={${itemsAfterCollapse}} +itemsBeforeCollapse={${itemsBeforeCollapse}} >= maxItems={${maxItems}}`
          ].join("\n")
        );
        return allItems;
      }
      const hiddenItems = allItems.slice(
        itemsBeforeCollapse,
        allItems.length - itemsAfterCollapse
      );
      return [
        ...allItems.slice(0, itemsBeforeCollapse),
        /* @__PURE__ */ jsxRuntime.jsx("li", {
          className: withBaseName("li"),
          children: /* @__PURE__ */ jsxRuntime.jsx(BreadcrumbsCollapsed.BreadcrumbsCollapsed, {
            accessibleText: `Breadcrumb levels ${itemsBeforeCollapse + 1} to ${allItems.length - itemsAfterCollapse}`,
            className: withBaseName("overflowButton"),
            children: hiddenItems
          })
        }, "breadcrumbs-collapsed"),
        ...allItems.slice(
          allItems.length - itemsAfterCollapse,
          allItems.length
        )
      ];
    };
    const itemsToRender = shouldRenderAllItems ? allItems : renderItemsBeforeAndAfter();
    return /* @__PURE__ */ jsxRuntime.jsx(BreadcrumbsContext.BreadcrumbsContext.Provider, {
      value: breadcrumbsContext,
      children: /* @__PURE__ */ jsxRuntime.jsx("nav", {
        "aria-label": "Breadcrumb",
        className: clsx.clsx(withBaseName(), className),
        "data-testid": "breadcrumbs",
        ref,
        ...other,
        children: /* @__PURE__ */ jsxRuntime.jsx("ol", {
          className: clsx.clsx(withBaseName("ol"), {
            [withBaseName("ol-wrap")]: wrap
          }),
          children: insertSeparators(
            itemsToRender,
            withBaseName("separator"),
            separator,
            hideCurrentLevel,
            shouldRenderAllItems,
            itemsAfterCollapse
          )
        })
      })
    });
  }
);

exports.Breadcrumbs = Breadcrumbs;
//# sourceMappingURL=Breadcrumbs.js.map
