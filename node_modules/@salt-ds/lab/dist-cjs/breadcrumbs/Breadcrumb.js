'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var core = require('@salt-ds/core');
var clsx = require('clsx');
var React = require('react');
var BreadcrumbsContext = require('./internal/BreadcrumbsContext.js');
var window = require('@salt-ds/window');
var styles = require('@salt-ds/styles');
var Breadcrumb$1 = require('./Breadcrumb.css.js');

const withBaseName = core.makePrefixer("saltBreadcrumb");
const Breadcrumb = React.forwardRef(
  function Breadcrumb2({
    children,
    ContainerProps = {},
    tooltipText,
    tooltipProps,
    isCurrentLevel,
    onItemClick,
    overflowLabel,
    maxWidth,
    Icon,
    minWidth,
    className,
    ...props
  }, ref) {
    const targetWindow = window.useWindow();
    styles.useComponentCssInjection({
      testId: "salt-breadcrumb",
      css: Breadcrumb$1,
      window: targetWindow
    });
    const { itemsMaxWidth, itemsMinWidth, liClass } = BreadcrumbsContext.useBreadcrumbsContext();
    const hasChildren = React.Children.count(children) !== 0;
    const hasOnlyIcon = Icon && !hasChildren;
    const getDefaultBreadcrumb = () => isCurrentLevel ? /* @__PURE__ */ jsxRuntime.jsx(core.Text, {
      maxRows: 1,
      className: clsx.clsx(
        withBaseName(),
        className,
        withBaseName("currentLevel")
      ),
      styleAs: "label",
      children
    }) : /* @__PURE__ */ jsxRuntime.jsxs("div", {
      className: clsx.clsx(
        withBaseName(),
        className,
        {
          [withBaseName("justifyContentCenter")]: hasOnlyIcon
        },
        withBaseName("regular")
      ),
      children: [
        Icon && /* @__PURE__ */ jsxRuntime.jsx(Icon, {
          className: withBaseName("icon")
        }),
        hasChildren && /* @__PURE__ */ jsxRuntime.jsx(core.Link, {
          maxRows: 1,
          styleAs: "label",
          ...props,
          children
        })
      ]
    });
    const content = getDefaultBreadcrumb();
    const {
      style: containerStyle,
      className: containerClassName,
      ...containerPropsRest
    } = ContainerProps;
    return /* @__PURE__ */ jsxRuntime.jsx("li", {
      ref,
      style: {
        ...containerStyle,
        minWidth: minWidth != null ? minWidth : itemsMinWidth,
        maxWidth: maxWidth != null ? maxWidth : itemsMaxWidth
      },
      className: clsx.clsx(liClass, containerClassName),
      ...containerPropsRest,
      children: content
    });
  }
);

exports.Breadcrumb = Breadcrumb;
//# sourceMappingURL=Breadcrumb.js.map
