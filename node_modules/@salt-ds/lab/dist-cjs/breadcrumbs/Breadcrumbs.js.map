{"version":3,"file":"Breadcrumbs.js","sources":["../src/breadcrumbs/Breadcrumbs.tsx"],"sourcesContent":["import { makePrefixer } from \"@salt-ds/core\";\nimport { IconProps } from \"@salt-ds/icons\";\nimport { clsx } from \"clsx\";\nimport React, {\n  HTMLAttributes,\n  isValidElement,\n  ReactNode,\n  useMemo,\n} from \"react\";\nimport { BreadcrumbProps } from \"./Breadcrumb\";\nimport { BreadcrumbsCollapsed } from \"./internal/BreadcrumbsCollapsed\";\nimport { BreadcrumbsContext } from \"./internal/BreadcrumbsContext\";\nimport { BreadcrumbsSeparator } from \"./internal/BreadcrumbsSeparator\";\n\nimport { useWindow } from \"@salt-ds/window\";\nimport { useComponentCssInjection } from \"@salt-ds/styles\";\n\nimport breadcrumbsCss from \"./Breadcrumbs.css\";\n\nconst iconWidth = 12;\n\nconst withBaseName = makePrefixer(\"saltBreadcrumbs\");\n\nfunction insertSeparators(\n  items: ReactNode[],\n  className?: string,\n  separator?: ReactNode,\n  hideCurrentLevel?: boolean,\n  shouldRenderAllItems?: boolean,\n  itemsAfterCollapse?: number\n) {\n  return items.reduce((acc: ReactNode[], current: ReactNode, index: number) => {\n    if (index < items.length - 1) {\n      return acc.concat(\n        current,\n        <li aria-hidden className={className} key={`separator-${index}`}>\n          {separator}\n        </li>\n      );\n    } else {\n      const skipLastElement =\n        (hideCurrentLevel && shouldRenderAllItems) ||\n        (hideCurrentLevel && !shouldRenderAllItems && itemsAfterCollapse !== 0);\n      return skipLastElement ? acc : acc.concat(current);\n    }\n  }, []);\n}\n\nexport interface BreadcrumbsProps extends HTMLAttributes<HTMLElement> {\n  Menu?: any;\n  SeparatorProps?: IconProps;\n  hideCurrentLevel?: boolean;\n  itemsAfterCollapse?: number;\n  itemsBeforeCollapse?: number;\n  itemsMaxWidth?: number | string;\n  itemsMinWidth?: number | string;\n  maxItems?: number;\n  separator?: ReactNode;\n  wrap?: boolean;\n  className?: string;\n  children?: ReactNode;\n}\n\nexport const Breadcrumbs = React.forwardRef<HTMLElement, BreadcrumbsProps>(\n  function Breadcrumbs(props, ref) {\n    const {\n      children,\n      className,\n      itemsAfterCollapse = 1,\n      itemsBeforeCollapse = 1,\n      maxItems = 3,\n      separator: separatorProp,\n      hideCurrentLevel,\n      itemsMinWidth: itemsMinWidthProp,\n      itemsMaxWidth,\n      wrap,\n      Menu,\n      SeparatorProps = {},\n      ...other\n    } = props;\n\n    const targetWindow = useWindow();\n    useComponentCssInjection({\n      testId: \"salt-breadcrumbs\",\n      css: breadcrumbsCss,\n      window: targetWindow,\n    });\n\n    const itemsMinWidth =\n      itemsMinWidthProp != null ? itemsMinWidthProp : iconWidth;\n\n    const breadcrumbsContext = useMemo(\n      () => ({\n        wrap,\n        itemsMinWidth,\n        itemsMaxWidth,\n        liClass: withBaseName(\"li\"),\n      }),\n      [wrap, itemsMaxWidth, itemsMinWidth]\n    );\n\n    const separator = separatorProp || (\n      <BreadcrumbsSeparator {...SeparatorProps} />\n    );\n\n    const childrenArray = React.Children.toArray(children);\n    const shouldRenderAllItems =\n      wrap || maxItems == null || childrenArray.length <= maxItems;\n\n    const allItems = childrenArray\n      .filter(isValidElement)\n      .map((child, index) => {\n        const isLastChild = index === childrenArray.length - 1;\n\n        return React.cloneElement(child, {\n          isCurrentLevel: isLastChild,\n        } as BreadcrumbProps);\n      });\n\n    const renderItemsBeforeAndAfter = () => {\n      // This defends against someone passing weird input, to ensure that if all\n      // items would be shown anyway, we just show all items without the EllipsisItem\n      if (itemsBeforeCollapse + itemsAfterCollapse >= allItems.length) {\n        console.warn(\n          [\n            \"You have provided an invalid combination of properties to the Breadcrumbs.\",\n            `itemsAfterCollapse={${itemsAfterCollapse}} +itemsBeforeCollapse={${itemsBeforeCollapse}} >= maxItems={${maxItems}}`,\n          ].join(\"\\n\")\n        );\n        return allItems;\n      }\n\n      const hiddenItems = allItems.slice(\n        itemsBeforeCollapse,\n        allItems.length - itemsAfterCollapse\n      );\n      return [\n        ...allItems.slice(0, itemsBeforeCollapse),\n        <li className={withBaseName(\"li\")} key=\"breadcrumbs-collapsed\">\n          <BreadcrumbsCollapsed\n            accessibleText={`Breadcrumb levels ${itemsBeforeCollapse + 1} to ${\n              allItems.length - itemsAfterCollapse\n            }`}\n            className={withBaseName(\"overflowButton\")}\n          >\n            {hiddenItems}\n          </BreadcrumbsCollapsed>\n        </li>,\n        ...allItems.slice(\n          allItems.length - itemsAfterCollapse,\n          allItems.length\n        ),\n      ];\n    };\n\n    const itemsToRender = shouldRenderAllItems\n      ? allItems\n      : renderItemsBeforeAndAfter();\n    return (\n      <BreadcrumbsContext.Provider value={breadcrumbsContext}>\n        <nav\n          aria-label=\"Breadcrumb\"\n          className={clsx(withBaseName(), className)}\n          data-testid=\"breadcrumbs\"\n          ref={ref}\n          {...other}\n        >\n          <ol\n            className={clsx(withBaseName(\"ol\"), {\n              [withBaseName(\"ol-wrap\")]: wrap,\n            })}\n          >\n            {insertSeparators(\n              itemsToRender,\n              withBaseName(\"separator\"),\n              separator,\n              hideCurrentLevel,\n              shouldRenderAllItems,\n              itemsAfterCollapse\n            )}\n          </ol>\n        </nav>\n      </BreadcrumbsContext.Provider>\n    );\n  }\n);\n"],"names":["makePrefixer","jsx","React","Breadcrumbs","useWindow","useComponentCssInjection","breadcrumbsCss","useMemo","BreadcrumbsSeparator","isValidElement","BreadcrumbsCollapsed","BreadcrumbsContext","clsx"],"mappings":";;;;;;;;;;;;;;;;;;;AAmBA,MAAM,SAAY,GAAA,EAAA,CAAA;AAElB,MAAM,YAAA,GAAeA,kBAAa,iBAAiB,CAAA,CAAA;AAEnD,SAAS,iBACP,KACA,EAAA,SAAA,EACA,SACA,EAAA,gBAAA,EACA,sBACA,kBACA,EAAA;AACA,EAAA,OAAO,KAAM,CAAA,MAAA,CAAO,CAAC,GAAA,EAAkB,SAAoB,KAAkB,KAAA;AAC3E,IAAI,IAAA,KAAA,GAAQ,KAAM,CAAA,MAAA,GAAS,CAAG,EAAA;AAC5B,MAAA,OAAO,GAAI,CAAA,MAAA;AAAA,QACT,OAAA;AAAA,wBACCC,cAAA,CAAA,IAAA,EAAA;AAAA,UAAG,aAAW,EAAA,IAAA;AAAA,UAAC,SAAA;AAAA,UACb,QAAA,EAAA,SAAA;AAAA,SAAA,EADwC,aAAa,KAExD,CAAA,CAAA,CAAA;AAAA,OACF,CAAA;AAAA,KACK,MAAA;AACL,MAAA,MAAM,kBACH,gBAAoB,IAAA,oBAAA,IACpB,gBAAoB,IAAA,CAAC,wBAAwB,kBAAuB,KAAA,CAAA,CAAA;AACvE,MAAA,OAAO,eAAkB,GAAA,GAAA,GAAM,GAAI,CAAA,MAAA,CAAO,OAAO,CAAA,CAAA;AAAA,KACnD;AAAA,GACF,EAAG,EAAE,CAAA,CAAA;AACP,CAAA;AAiBO,MAAM,cAAcC,yBAAM,CAAA,UAAA;AAAA,EAC/B,SAASC,YAAY,CAAA,KAAA,EAAO,GAAK,EAAA;AAC/B,IAAM,MAAA;AAAA,MACJ,QAAA;AAAA,MACA,SAAA;AAAA,MACA,kBAAqB,GAAA,CAAA;AAAA,MACrB,mBAAsB,GAAA,CAAA;AAAA,MACtB,QAAW,GAAA,CAAA;AAAA,MACX,SAAW,EAAA,aAAA;AAAA,MACX,gBAAA;AAAA,MACA,aAAe,EAAA,iBAAA;AAAA,MACf,aAAA;AAAA,MACA,IAAA;AAAA,MACA,IAAA;AAAA,MACA,iBAAiB,EAAC;AAAA,MACf,GAAA,KAAA;AAAA,KACD,GAAA,KAAA,CAAA;AAEJ,IAAA,MAAM,eAAeC,gBAAU,EAAA,CAAA;AAC/B,IAAyBC,+BAAA,CAAA;AAAA,MACvB,MAAQ,EAAA,kBAAA;AAAA,MACR,GAAK,EAAAC,aAAA;AAAA,MACL,MAAQ,EAAA,YAAA;AAAA,KACT,CAAA,CAAA;AAED,IAAM,MAAA,aAAA,GACJ,iBAAqB,IAAA,IAAA,GAAO,iBAAoB,GAAA,SAAA,CAAA;AAElD,IAAA,MAAM,kBAAqB,GAAAC,aAAA;AAAA,MACzB,OAAO;AAAA,QACL,IAAA;AAAA,QACA,aAAA;AAAA,QACA,aAAA;AAAA,QACA,OAAA,EAAS,aAAa,IAAI,CAAA;AAAA,OAC5B,CAAA;AAAA,MACA,CAAC,IAAM,EAAA,aAAA,EAAe,aAAa,CAAA;AAAA,KACrC,CAAA;AAEA,IAAM,MAAA,SAAA,GAAY,iCACfN,cAAA,CAAAO,yCAAA,EAAA;AAAA,MAAsB,GAAG,cAAA;AAAA,KAAgB,CAAA,CAAA;AAG5C,IAAA,MAAM,aAAgB,GAAAN,yBAAA,CAAM,QAAS,CAAA,OAAA,CAAQ,QAAQ,CAAA,CAAA;AACrD,IAAA,MAAM,oBACJ,GAAA,IAAA,IAAQ,QAAY,IAAA,IAAA,IAAQ,cAAc,MAAU,IAAA,QAAA,CAAA;AAEtD,IAAM,MAAA,QAAA,GAAW,cACd,MAAO,CAAAO,oBAAc,EACrB,GAAI,CAAA,CAAC,OAAO,KAAU,KAAA;AACrB,MAAM,MAAA,WAAA,GAAc,KAAU,KAAA,aAAA,CAAc,MAAS,GAAA,CAAA,CAAA;AAErD,MAAO,OAAAP,yBAAA,CAAM,aAAa,KAAO,EAAA;AAAA,QAC/B,cAAgB,EAAA,WAAA;AAAA,OACE,CAAA,CAAA;AAAA,KACrB,CAAA,CAAA;AAEH,IAAA,MAAM,4BAA4B,MAAM;AAGtC,MAAI,IAAA,mBAAA,GAAsB,kBAAsB,IAAA,QAAA,CAAS,MAAQ,EAAA;AAC/D,QAAQ,OAAA,CAAA,IAAA;AAAA,UACN;AAAA,YACE,4EAAA;AAAA,YACA,CAAA,oBAAA,EAAuB,6CAA6C,mBAAqC,CAAA,eAAA,EAAA,QAAA,CAAA,CAAA,CAAA;AAAA,WAC3G,CAAE,KAAK,IAAI,CAAA;AAAA,SACb,CAAA;AACA,QAAO,OAAA,QAAA,CAAA;AAAA,OACT;AAEA,MAAA,MAAM,cAAc,QAAS,CAAA,KAAA;AAAA,QAC3B,mBAAA;AAAA,QACA,SAAS,MAAS,GAAA,kBAAA;AAAA,OACpB,CAAA;AACA,MAAO,OAAA;AAAA,QACL,GAAG,QAAA,CAAS,KAAM,CAAA,CAAA,EAAG,mBAAmB,CAAA;AAAA,wBACvCD,cAAA,CAAA,IAAA,EAAA;AAAA,UAAG,SAAA,EAAW,aAAa,IAAI,CAAA;AAAA,UAC9B,QAAC,kBAAAA,cAAA,CAAAS,yCAAA,EAAA;AAAA,YACC,cAAgB,EAAA,CAAA,kBAAA,EAAqB,mBAAsB,GAAA,CAAA,CAAA,IAAA,EACzD,SAAS,MAAS,GAAA,kBAAA,CAAA,CAAA;AAAA,YAEpB,SAAA,EAAW,aAAa,gBAAgB,CAAA;AAAA,YAEvC,QAAA,EAAA,WAAA;AAAA,WACH,CAAA;AAAA,SAAA,EARqC,uBASvC,CAAA;AAAA,QACA,GAAG,QAAS,CAAA,KAAA;AAAA,UACV,SAAS,MAAS,GAAA,kBAAA;AAAA,UAClB,QAAS,CAAA,MAAA;AAAA,SACX;AAAA,OACF,CAAA;AAAA,KACF,CAAA;AAEA,IAAM,MAAA,aAAA,GAAgB,oBAClB,GAAA,QAAA,GACA,yBAA0B,EAAA,CAAA;AAC9B,IACE,uBAAAT,cAAA,CAACU,sCAAmB,QAAnB,EAAA;AAAA,MAA4B,KAAO,EAAA,kBAAA;AAAA,MAClC,QAAC,kBAAAV,cAAA,CAAA,KAAA,EAAA;AAAA,QACC,YAAW,EAAA,YAAA;AAAA,QACX,SAAW,EAAAW,SAAA,CAAK,YAAa,EAAA,EAAG,SAAS,CAAA;AAAA,QACzC,aAAY,EAAA,aAAA;AAAA,QACZ,GAAA;AAAA,QACC,GAAG,KAAA;AAAA,QAEJ,QAAC,kBAAAX,cAAA,CAAA,IAAA,EAAA;AAAA,UACC,SAAW,EAAAW,SAAA,CAAK,YAAa,CAAA,IAAI,CAAG,EAAA;AAAA,YAClC,CAAC,YAAa,CAAA,SAAS,CAAI,GAAA,IAAA;AAAA,WAC5B,CAAA;AAAA,UAEA,QAAA,EAAA,gBAAA;AAAA,YACC,aAAA;AAAA,YACA,aAAa,WAAW,CAAA;AAAA,YACxB,SAAA;AAAA,YACA,gBAAA;AAAA,YACA,oBAAA;AAAA,YACA,kBAAA;AAAA,WACF;AAAA,SACF,CAAA;AAAA,OACF,CAAA;AAAA,KACF,CAAA,CAAA;AAAA,GAEJ;AACF;;;;"}