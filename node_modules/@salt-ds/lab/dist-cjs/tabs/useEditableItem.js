'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var core = require('@salt-ds/core');
var React = require('react');

const editKeys = /* @__PURE__ */ new Set(["Enter", " "]);
const isEditKey = (key) => editKeys.has(key);
const useEditableItem = ({
  editing: editingProp,
  highlightedIdx,
  indexPositions,
  onEnterEditMode: onEnterEditModeProp,
  onExitEditMode: onExitEditModeProp
}) => {
  const [editing, setEditing] = core.useControlled({
    controlled: editingProp,
    default: false,
    name: "useEditableItem",
    state: "editing"
  });
  const onEnterEditMode = React.useCallback(() => {
    setEditing(true);
    onEnterEditModeProp == null ? void 0 : onEnterEditModeProp();
  }, [onEnterEditModeProp, setEditing]);
  const onExitEditMode = (originalValue, editedValue, allowDeactivation, tabIndex) => {
    setEditing(false);
    console.log("exit edit mode");
    onExitEditModeProp == null ? void 0 : onExitEditModeProp(
      originalValue,
      editedValue,
      allowDeactivation,
      tabIndex
    );
  };
  const onKeyDown = React.useCallback(
    (evt) => {
      var _a, _b;
      console.log(`useEditableItem onKeyDown ${highlightedIdx}`, {
        editable: (_a = indexPositions[highlightedIdx]) == null ? void 0 : _a.editable
      });
      if (isEditKey(evt.key) && ((_b = indexPositions[highlightedIdx]) == null ? void 0 : _b.editable)) {
        onEnterEditMode();
      }
    },
    [onEnterEditMode, highlightedIdx, indexPositions]
  );
  return {
    editing,
    onKeyDown,
    onEnterEditMode,
    onExitEditMode,
    setEditing
  };
};

exports.useEditableItem = useEditableItem;
//# sourceMappingURL=useEditableItem.js.map
