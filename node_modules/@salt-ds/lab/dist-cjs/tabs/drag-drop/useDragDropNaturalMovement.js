'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
var useDragSpacers = require('./useDragSpacers.js');
var dragUtils = require('./drag-utils.js');
var Draggable = require('./Draggable.js');

const dragThreshold = 3;
const useDragDropNaturalMovement = ({
  onDrop,
  orientation = "horizontal",
  containerRef,
  itemQuery = "*"
}) => {
  const [showOverflow, setShowOverflow] = React.useState(false);
  const overflowMenuShowingRef = React.useRef(false);
  const [isDragging, setIsDragging] = React.useState(false);
  const [dragPortal, setDragPortal] = React.useState(null);
  const draggableRef = React.useRef(null);
  const startPos = React.useRef(0);
  const previousPos = React.useRef(0);
  const mouseOffset = React.useRef(0);
  const mouseDownTimer = React.useRef(null);
  const dragLimits = React.useRef({ start: 0, end: 0 });
  const dragDirection = React.useRef();
  const dropTarget = React.useRef(null);
  const measuredDropTargets = React.useRef([]);
  const { clearSpacers, displaceItem, displaceLastItem } = useDragSpacers.useDragSpacers();
  const dragMouseMoveHandler = React.useCallback(
    (evt) => {
      const { POS } = dragUtils.dimensions(orientation);
      const { [POS]: clientPos } = evt;
      const { current: lastClientPos } = previousPos;
      const { current: currentDropTarget } = dropTarget;
      const { current: dropTargets } = measuredDropTargets;
      const draggedItem = dragUtils.getDraggedItem(dropTargets);
      if (Math.abs(lastClientPos - clientPos) > 0) {
        previousPos.current = clientPos;
        const moveDistance = clientPos - startPos.current;
        const pos = startPos.current - mouseOffset.current + moveDistance;
        const renderPos = Math.max(
          dragLimits.current.start,
          Math.min(dragLimits.current.end, pos)
        );
        if (draggableRef.current && containerRef.current) {
          const START = orientation === "horizontal" ? "left" : "top";
          draggableRef.current.style[START] = `${renderPos}px`;
          const direction = lastClientPos < clientPos ? "fwd" : "bwd";
          const offsetPos = clientPos - mouseOffset.current;
          const leadingEdge = direction === "fwd" ? offsetPos + draggedItem.size : offsetPos;
          const nextDropTarget = dragUtils.getNextDropTarget(
            measuredDropTargets.current,
            leadingEdge,
            direction
          );
          if (nextDropTarget && (nextDropTarget.index !== (currentDropTarget == null ? void 0 : currentDropTarget.index) || direction !== dragDirection.current)) {
            if (nextDropTarget.isOverflowIndicator) {
              setShowOverflow(overflowMenuShowingRef.current = true);
            } else {
              const newDropTargets = dragUtils.moveDragItem(dropTargets, nextDropTarget);
              const draggedItem2 = dragUtils.getDraggedItem(newDropTargets);
              const nextDisplacedItem = newDropTargets[draggedItem2.currentIndex + 1];
              if (nextDisplacedItem) {
                displaceItem(
                  nextDisplacedItem,
                  draggedItem2.size,
                  true,
                  direction
                );
              } else {
                const displacedItem = newDropTargets[draggedItem2.currentIndex - 1];
                displaceLastItem(displacedItem, draggedItem2.size, true);
              }
              measuredDropTargets.current = newDropTargets;
              setShowOverflow(overflowMenuShowingRef.current = false);
            }
            dropTarget.current = nextDropTarget;
            dragDirection.current = direction;
          }
        }
      }
    },
    [containerRef, displaceItem, displaceLastItem, orientation]
  );
  const dragMouseUpHandler = React.useCallback(() => {
    document.removeEventListener("mousemove", dragMouseMoveHandler, false);
    document.removeEventListener("mouseup", dragMouseUpHandler, false);
    clearSpacers();
    const { current: dropTargets } = measuredDropTargets;
    const draggedItem = dragUtils.getDraggedItem(dropTargets);
    const { dataIndex = -1, index, currentIndex: toIndex } = draggedItem;
    const fromIndex = dataIndex !== -1 ? dataIndex : index;
    dropTarget.current = null;
    dragDirection.current = void 0;
    setDragPortal(null);
    if (overflowMenuShowingRef.current) {
      onDrop(fromIndex, -1);
    } else if (fromIndex !== toIndex) {
      onDrop(fromIndex, toIndex);
    }
    setShowOverflow(false);
    setIsDragging(false);
  }, [clearSpacers, dragMouseMoveHandler, onDrop]);
  const enterDraggingState = React.useCallback(
    (evt) => {
      const { POS, START } = dragUtils.dimensions(orientation);
      const { [POS]: clientPos } = evt;
      const evtTarget = evt.target;
      const dragElement = evtTarget.closest(itemQuery);
      if (dragElement) {
        const query = `:is(${itemQuery}:not([data-overflowed="true"]),[data-overflow-indicator])`;
        const dropTargets = dragUtils.measureDropTargets(
          containerRef.current,
          orientation,
          dragElement,
          query
        );
        const draggedItem = dropTargets.find(dragUtils.isDraggedElement);
        if (draggedItem && containerRef.current) {
          measuredDropTargets.current = dropTargets;
          dropTarget.current = draggedItem;
          const containerRect = containerRef.current.getBoundingClientRect();
          const draggableRect = draggedItem.element.getBoundingClientRect();
          mouseOffset.current = clientPos - draggedItem.start;
          const [lastItem] = dropTargets.slice(-1);
          const lastChildEnd = lastItem.end;
          console.log({ lastItem });
          dragLimits.current.start = containerRect[START];
          dragLimits.current.end = lastItem.isOverflowIndicator ? Math.max(lastItem.start, containerRect.right - draggedItem.size) : lastChildEnd - draggedItem.size;
          setDragPortal(
            /* @__PURE__ */ jsxRuntime.jsx(Draggable.Draggable, {
              wrapperClassName: `tabstrip-${orientation}`,
              ref: draggableRef,
              rect: draggableRect,
              element: dragElement.cloneNode(true)
            })
          );
          if (draggedItem !== lastItem) {
            const nextItem = dropTargets[draggedItem.index + 1];
            displaceItem(nextItem, draggedItem.size, false);
          } else {
            const displacedItem = dropTargets[draggedItem.index];
            displaceLastItem(displacedItem, draggedItem.size, false);
          }
          setIsDragging(true);
        }
        document.addEventListener("mousemove", dragMouseMoveHandler, false);
        document.addEventListener("mouseup", dragMouseUpHandler, false);
      }
    },
    [
      containerRef,
      displaceItem,
      displaceLastItem,
      dragMouseMoveHandler,
      dragMouseUpHandler,
      itemQuery,
      orientation,
      setIsDragging
    ]
  );
  const preDragMouseMoveHandler = React.useCallback(
    (evt) => {
      const { POS } = dragUtils.dimensions(orientation);
      const { [POS]: clientPos } = evt;
      const mouseMoveDistance = Math.abs(clientPos - startPos.current);
      if (mouseMoveDistance > dragThreshold && containerRef.current) {
        if (mouseDownTimer.current) {
          window.clearTimeout(mouseDownTimer.current);
          mouseDownTimer.current = null;
        }
        document.removeEventListener(
          "mousemove",
          preDragMouseMoveHandler,
          false
        );
        document.removeEventListener("mouseup", preDragMouseUpHandler, false);
        enterDraggingState(evt);
      }
    },
    [containerRef, enterDraggingState, orientation]
  );
  const preDragMouseUpHandler = React.useCallback(() => {
    if (mouseDownTimer.current) {
      window.clearTimeout(mouseDownTimer.current);
      mouseDownTimer.current = null;
    }
    document.removeEventListener("mousemove", preDragMouseMoveHandler, false);
    document.removeEventListener("mouseup", preDragMouseUpHandler, false);
  }, [preDragMouseMoveHandler]);
  const mouseDownHandler = React.useCallback(
    (evt) => {
      if (containerRef.current && !evt.defaultPrevented) {
        const { POS } = dragUtils.dimensions(orientation);
        const { [POS]: clientPos } = evt;
        startPos.current = clientPos;
        previousPos.current = clientPos;
        document.addEventListener("mousemove", preDragMouseMoveHandler, false);
        document.addEventListener("mouseup", preDragMouseUpHandler, false);
        evt.persist();
        mouseDownTimer.current = window.setTimeout(() => {
          document.removeEventListener(
            "mousemove",
            preDragMouseMoveHandler,
            false
          );
          document.removeEventListener("mouseup", preDragMouseUpHandler, false);
          enterDraggingState(evt.nativeEvent);
        }, 500);
      }
    },
    [
      containerRef,
      enterDraggingState,
      orientation,
      preDragMouseMoveHandler,
      preDragMouseUpHandler
    ]
  );
  const draggedItemIndex = isDragging ? dragUtils.getDraggedItem(measuredDropTargets.current).dataIndex : -1;
  return {
    draggable: dragPortal,
    dropIndicator: null,
    draggedItemIndex,
    isDragging,
    onMouseDown: mouseDownHandler,
    revealOverflowedItems: showOverflow
  };
};

exports.useDragDropNaturalMovement = useDragDropNaturalMovement;
//# sourceMappingURL=useDragDropNaturalMovement.js.map
