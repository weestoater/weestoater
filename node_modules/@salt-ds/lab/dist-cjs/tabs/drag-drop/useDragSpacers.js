'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var Draggable = require('./Draggable.js');

const useDragSpacers = () => {
  const animationFrame = React.useRef(0);
  const transitioning = React.useRef(false);
  const spacers = React.useMemo(
    () => [Draggable.createDragSpacer(transitioning), Draggable.createDragSpacer()],
    []
  );
  const clearSpacers = React.useCallback(
    () => spacers.forEach((spacer) => {
      var _a;
      return (_a = spacer.parentElement) == null ? void 0 : _a.removeChild(spacer);
    }),
    []
  );
  const animateTransition = React.useCallback((size) => {
    const [spacer1, spacer2] = spacers;
    animationFrame.current = requestAnimationFrame(() => {
      transitioning.current = true;
      spacer1.style.cssText = "width: 0px";
      spacer2.style.cssText = `width: ${size}px`;
      spacers[0] = spacer2;
      spacers[1] = spacer1;
    });
  }, []);
  const cancelAnyPendingAnimation = React.useCallback(() => {
    if (animationFrame.current) {
      cancelAnimationFrame(animationFrame.current);
      animationFrame.current = 0;
    }
  }, []);
  const displaceItem = React.useCallback(
    (item = null, size, useTransition = false, direction) => {
      var _a, _b, _c, _d;
      if (item) {
        const [spacer1, spacer2] = spacers;
        cancelAnyPendingAnimation();
        if (useTransition) {
          if (transitioning.current) {
            clearSpacers();
            spacer1.style.cssText = `width: ${size}px`;
            spacer2.style.cssText = `width: 0px`;
            const target = direction === "fwd" ? item.element.previousElementSibling : item.element.nextElementSibling;
            (_a = item.element.parentElement) == null ? void 0 : _a.insertBefore(spacer1, target);
            (_b = item.element.parentElement) == null ? void 0 : _b.insertBefore(spacer2, item.element);
          } else {
            (_c = item.element.parentElement) == null ? void 0 : _c.insertBefore(spacer2, item.element);
          }
          animateTransition(size);
        } else {
          spacer1.style.cssText = `width: ${size}px`;
          (_d = item.element.parentElement) == null ? void 0 : _d.insertBefore(spacer1, item.element);
        }
      }
    },
    []
  );
  const displaceLastItem = React.useCallback(
    (item, size, useTransition = false) => {
      var _a, _b, _c, _d;
      const [spacer1, spacer2] = spacers;
      cancelAnyPendingAnimation();
      if (useTransition) {
        if (transitioning.current) {
          clearSpacers();
          spacer1.style.cssText = `width: ${size}px`;
          spacer2.style.cssText = `width: 0px`;
          (_a = item.element.parentElement) == null ? void 0 : _a.insertBefore(
            spacer1,
            item.element.previousElementSibling
          );
          (_b = item.element.parentElement) == null ? void 0 : _b.insertBefore(
            spacer2,
            item.element.nextElementSibling
          );
        } else {
          (_c = item.element.parentElement) == null ? void 0 : _c.insertBefore(
            spacer2,
            item.element.nextElementSibling
          );
        }
        animateTransition(size);
      } else {
        spacer1.style.cssText = `width: ${size}px`;
        (_d = item.element.parentElement) == null ? void 0 : _d.insertBefore(
          spacer1,
          item.element.nextElementSibling
        );
      }
    },
    []
  );
  return {
    displaceItem,
    displaceLastItem,
    clearSpacers
  };
};

exports.useDragSpacers = useDragSpacers;
//# sourceMappingURL=useDragSpacers.js.map
