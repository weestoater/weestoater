'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var core = require('@salt-ds/core');
var clsx = require('clsx');
var React = require('react');
var Portal = require('../../portal/Portal.js');
var Draggable$1 = require('./Draggable.css.js');
var styles = require('@salt-ds/styles');
var window = require('@salt-ds/window');

const makeClassNames = (classNames) => classNames.split(" ").map((className) => `saltDraggable-${className}`);
const Draggable = React.forwardRef(function Draggable2({ wrapperClassName, element, rect, scale = 1 }, forwardedRef) {
  const targetWindow = window.useWindow();
  styles.useComponentCssInjection({
    testId: "salt-draggable",
    css: Draggable$1,
    window: targetWindow
  });
  const callbackRef = React.useCallback(
    (el) => {
      if (el) {
        el.innerHTML = "";
        el.appendChild(element);
        if (scale !== 1) {
          el.style.transform = `scale(${scale},${scale})`;
        }
      }
    },
    [element, scale]
  );
  const forkedRef = core.useForkRef(forwardedRef, callbackRef);
  const { left, top, width, height } = rect;
  return /* @__PURE__ */ jsxRuntime.jsx(Portal.Portal, {
    children: /* @__PURE__ */ jsxRuntime.jsx("div", {
      className: clsx.clsx("saltDraggable", ...makeClassNames(wrapperClassName)),
      ref: forkedRef,
      style: { left, top, width, height }
    })
  });
});
const createDragSpacer = (transitioning) => {
  const spacer = document.createElement("div");
  spacer.className = "saltDraggable-spacer";
  if (transitioning) {
    spacer.addEventListener("transitionend", () => {
      transitioning.current = false;
    });
  }
  return spacer;
};

exports.Draggable = Draggable;
exports.createDragSpacer = createDragSpacer;
//# sourceMappingURL=Draggable.js.map
