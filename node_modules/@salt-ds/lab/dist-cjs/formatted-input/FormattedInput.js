'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var clsx = require('clsx');
var React = require('react');
var rifm = require('rifm');
var core = require('@salt-ds/core');
var InputLegacy = require('../input-legacy/InputLegacy.js');
require('../input-legacy/StaticInputAdornment.js');
var InputWithMask = require('./internal/InputWithMask.js');
var window = require('@salt-ds/window');
var styles = require('@salt-ds/styles');
var FormattedInput$1 = require('./FormattedInput.css.js');

const defaultFormatter = (string) => string;
const defaultRifmOptions = {};
const FormattedInput = React.forwardRef(
  function FormattedInput2({
    defaultValue = "",
    className,
    inputProps,
    mask,
    onChange,
    rifmOptions = defaultRifmOptions,
    value: valueProp,
    textAlign,
    ...other
  }, ref) {
    const targetWindow = window.useWindow();
    styles.useComponentCssInjection({
      testId: "salt-formatted-input",
      css: FormattedInput$1,
      window: targetWindow
    });
    const [valueState, setValueState] = core.useControlled({
      default: defaultValue,
      controlled: valueProp,
      name: "FormattedInput",
      state: "value"
    });
    const handleChange = (value) => {
      setValueState(value);
      onChange == null ? void 0 : onChange(value);
    };
    let rifmMask = false;
    if (rifmOptions.mask) {
      rifmMask = typeof rifmOptions.mask === "function" ? rifmOptions.mask(valueState) : rifmOptions.mask;
    }
    const rifm$1 = rifm.useRifm({
      format: defaultFormatter,
      accept: /.*/,
      ...rifmOptions,
      mask: rifmMask,
      value: valueState || "",
      onChange: handleChange
    });
    return /* @__PURE__ */ jsxRuntime.jsx(InputLegacy.InputLegacy, {
      className: clsx.clsx(InputWithMask.baseName, className),
      inputComponent: InputWithMask.InputWithMask,
      inputProps: { mask, textAlign, ...inputProps },
      onChange: rifm$1.onChange,
      textAlign,
      value: rifm$1.value,
      ...other,
      ref
    });
  }
);

exports.FormattedInput = FormattedInput;
//# sourceMappingURL=FormattedInput.js.map
