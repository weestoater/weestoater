'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var core = require('@salt-ds/core');
var clsx = require('clsx');
var React = require('react');
var MetricContext = require('./internal/MetricContext.js');
var window = require('@salt-ds/window');
var styles = require('@salt-ds/styles');
var Metric$1 = require('./Metric.css.js');

const withBaseName = core.makePrefixer("saltMetric");
const Metric = React.forwardRef(function Metric2({
  className,
  children,
  direction,
  showIndicator,
  align = "left",
  orientation = "vertical",
  indicatorPosition = "end",
  headingAriaLevel = 2,
  id: idProp,
  size = "medium",
  ...restProps
}, ref) {
  const targetWindow = window.useWindow();
  styles.useComponentCssInjection({
    testId: "salt-metric",
    css: Metric$1,
    window: targetWindow
  });
  const id = core.useId(idProp);
  const titleId = `metric-title-${id}`;
  const subtitleId = `metric-subtitle-${id}`;
  const valueId = `metric-value-${id}`;
  const value = React.useMemo(
    () => ({
      align,
      direction,
      orientation,
      showIndicator,
      indicatorPosition,
      headingAriaLevel,
      size,
      titleId,
      subtitleId,
      valueId
    }),
    [
      align,
      direction,
      orientation,
      showIndicator,
      indicatorPosition,
      headingAriaLevel,
      size,
      titleId,
      subtitleId,
      valueId
    ]
  );
  return /* @__PURE__ */ jsxRuntime.jsx(MetricContext.MetricContextProvider, {
    value,
    children: /* @__PURE__ */ jsxRuntime.jsx("div", {
      ...restProps,
      className: clsx.clsx(
        withBaseName(),
        withBaseName(`size-${size}`),
        {
          [withBaseName(`direction-${direction}`)]: direction,
          [withBaseName(`orientation-${orientation}`)]: orientation,
          [withBaseName(`align-${align}`)]: align
        },
        className
      ),
      id,
      ref,
      children
    })
  });
});

exports.Metric = Metric;
//# sourceMappingURL=Metric.js.map
