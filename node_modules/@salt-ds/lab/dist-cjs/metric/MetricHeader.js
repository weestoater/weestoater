'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var core = require('@salt-ds/core');
var clsx = require('clsx');
var React = require('react');
var MetricContext = require('./internal/MetricContext.js');
var window = require('@salt-ds/window');
var styles = require('@salt-ds/styles');
var MetricHeader$1 = require('./MetricHeader.css.js');

const withBaseName = core.makePrefixer("saltMetricHeader");
const MetricHeader = React.forwardRef(
  function MetricHeader2({ SubtitleLinkProps, className, title, subtitle, ...restProps }, ref) {
    const targetWindow = window.useWindow();
    styles.useComponentCssInjection({
      testId: "salt-metric-header",
      css: MetricHeader$1,
      window: targetWindow
    });
    const { titleId, subtitleId, headingAriaLevel } = MetricContext.useMetricContext();
    const renderSubtitle = React.useCallback(() => {
      if (!subtitle)
        return null;
      const subtitleComponent = /* @__PURE__ */ jsxRuntime.jsx(core.Text, {
        id: subtitleId,
        className: withBaseName("subtitle"),
        "data-testid": "metric-subtitle",
        variant: "secondary",
        children: subtitle
      });
      if (SubtitleLinkProps) {
        const { href = "", ...restLinkProps } = SubtitleLinkProps;
        return /* @__PURE__ */ jsxRuntime.jsx(core.Link, {
          href,
          ...restLinkProps,
          children: subtitleComponent
        });
      }
      return subtitleComponent;
    }, [subtitle, subtitleId, SubtitleLinkProps]);
    return /* @__PURE__ */ jsxRuntime.jsxs("div", {
      ...restProps,
      className: clsx.clsx(withBaseName(), className),
      ref,
      children: [
        /* @__PURE__ */ jsxRuntime.jsx(core.Text, {
          styleAs: "h4",
          className: withBaseName("title"),
          "data-testid": "metric-title",
          id: titleId,
          role: "heading",
          "aria-level": headingAriaLevel,
          children: title
        }),
        renderSubtitle()
      ]
    });
  }
);

exports.MetricHeader = MetricHeader;
//# sourceMappingURL=MetricHeader.js.map
