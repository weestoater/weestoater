'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var core = require('@salt-ds/core');
var icons = require('@salt-ds/icons');
var clsx = require('clsx');
var React = require('react');
var MetricContext = require('./internal/MetricContext.js');
var window = require('@salt-ds/window');
var styles = require('@salt-ds/styles');
var MetricContent$1 = require('./MetricContent.css.js');

const iconComponentMap = {
  down: icons.ArrowDownIcon,
  up: icons.ArrowUpIcon
};
const withBaseName = core.makePrefixer("saltMetricContent");
const MetricContent = React.forwardRef(
  function MetricContent2({
    IndicatorIconProps,
    IndicatorIconComponent,
    className,
    value,
    subvalue,
    ...restProps
  }, ref) {
    const targetWindow = window.useWindow();
    styles.useComponentCssInjection({
      testId: "salt-metric-content",
      css: MetricContent$1,
      window: targetWindow
    });
    const {
      direction,
      showIndicator,
      indicatorPosition,
      size = "medium",
      valueId,
      titleId,
      subtitleId
    } = MetricContext.useMetricContext();
    const iconSize = size === "large" ? 2 : 1;
    const valueComponentMap = {
      small: core.Display3,
      medium: core.Display2,
      large: core.Display1
    };
    const ValueComponent = valueComponentMap[size];
    const iconProps = {
      "aria-label": direction,
      className: withBaseName("indicator"),
      name: direction ? `movement-${direction}` : "",
      size: iconSize,
      ...IndicatorIconProps
    };
    const IconComponent = IndicatorIconComponent != null ? IndicatorIconComponent : direction ? iconComponentMap[direction] : void 0;
    const icon = showIndicator && IconComponent ? /* @__PURE__ */ jsxRuntime.jsx(IconComponent, {
      ...iconProps
    }) : null;
    return /* @__PURE__ */ jsxRuntime.jsxs("div", {
      ...restProps,
      className: clsx.clsx(withBaseName(), className),
      "aria-labelledby": `${titleId || ""} ${subtitleId || ""}`,
      ref,
      children: [
        /* @__PURE__ */ jsxRuntime.jsxs("div", {
          className: withBaseName("value-container"),
          children: [
            indicatorPosition === "start" && icon,
            /* @__PURE__ */ jsxRuntime.jsx(ValueComponent, {
              "data-testid": "metric-value",
              id: valueId,
              className: withBaseName("value"),
              children: value
            }),
            indicatorPosition === "end" && icon
          ]
        }),
        subvalue && /* @__PURE__ */ jsxRuntime.jsx(core.Text, {
          className: withBaseName("subvalue"),
          "data-testid": "metric-subvalue",
          children: subvalue
        })
      ]
    });
  }
);

exports.MetricContent = MetricContent;
//# sourceMappingURL=MetricContent.js.map
