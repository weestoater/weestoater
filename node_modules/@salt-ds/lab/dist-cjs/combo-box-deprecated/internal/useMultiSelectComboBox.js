'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var core = require('@salt-ds/core');
var React = require('react');
require('../../list-deprecated/List.js');
require('../../list-deprecated/ListBase.js');
require('../../list-deprecated/ListItemBase.js');
require('../../list-deprecated/ListItem.js');
require('../../list-deprecated/ListItemContext.js');
require('../../list-deprecated/ListStateContext.js');
var useList = require('../../list-deprecated/useList.js');
require('../../tokenized-input/TokenizedInput.js');
require('../../tokenized-input/TokenizedInputBase.js');
var useTokenizedInput = require('../../tokenized-input/useTokenizedInput.js');
var defaultItemToString = require('../../tokenized-input/internal/defaultItemToString.js');
var filterHelpers = require('../filterHelpers.js');
var usePopperStatus = require('./usePopperStatus.js');

const REQUIRE_PREV_HIGHLIGHT = ["ArrowUp", "ArrowDown", "PageUp", "PageDown"];
const useMultiSelectComboBox = (props) => {
  const {
    allowFreeText,
    displayedItemCount,
    virtualized,
    disabled,
    expandButtonRef,
    onBlur,
    onFocus,
    onChange,
    onSelect,
    onInputChange,
    onInputFocus,
    onInputBlur,
    onInputSelect,
    id: idProp,
    source: sourceProp,
    selectedItem: selectedItemProp,
    inputValue: inputValueProp,
    initialOpen,
    initialSelectedItem: initialSelectedItems,
    "aria-labelledby": ariaLabelledBy,
    getFilterRegex = filterHelpers.getDefaultFilterRegex,
    itemToString = defaultItemToString.defaultItemToString,
    stringToItem: stringToItemProp = (_, value) => value.trim(),
    InputProps = {
      onBlur,
      onFocus,
      onInputBlur,
      onInputFocus,
      onInputChange,
      onInputSelect
    },
    ListProps = {},
    ...restProps
  } = props;
  const id = core.useId(idProp);
  const inputId = `${id}-input`;
  const listId = `${id}-list`;
  const [inputValue, setInputValue] = core.useControlled({
    controlled: inputValueProp,
    default: "",
    name: "MultiSelectComboBox",
    state: "inputValue"
  });
  const { isOpen: isListOpen, notifyPopper } = usePopperStatus.usePopperStatus({
    initialOpen,
    isMultiSelect: true
  });
  const [selectionChanged, setSelectionChanged] = React.useState(false);
  const inputBlurTimeout = React.useRef(null);
  const [allowAnnouncement, setAllowAnnouncement] = React.useState(false);
  const labels = React.useMemo(
    () => sourceProp.map(itemToString),
    [sourceProp, itemToString]
  );
  const source = React.useMemo(() => {
    if (inputValue && inputValue.trim().length) {
      const itemFilter = filterHelpers.getDefaultFilter(inputValue, getFilterRegex);
      return sourceProp.filter((item) => itemFilter(itemToString(item)));
    }
    return sourceProp;
  }, [inputValue, sourceProp, getFilterRegex, itemToString]);
  const itemTextHighlightPattern = React.useMemo(
    () => inputValue && inputValue.trim().length ? getFilterRegex(inputValue) : void 0,
    [inputValue, getFilterRegex]
  );
  const {
    focusedRef,
    listProps,
    state: listState,
    helpers: listHelpers
  } = useList.useList({
    ...ListProps,
    source,
    disabled,
    virtualized,
    itemToString,
    displayedItemCount,
    onChange,
    onSelect,
    id: listId,
    disableFocus: true,
    disableMouseDown: true,
    selectionVariant: "multiple",
    initialSelectedItem: initialSelectedItems,
    selectedItem: selectedItemProp,
    "aria-labelledby": ariaLabelledBy
  });
  const { "aria-activedescendant": ariaActiveDescendant, ...restListProps } = listProps;
  const { selectedItem } = listState;
  const [quickSelection, setQuickSelection] = React.useState(false);
  const {
    isFocusVisibleRef,
    onFocus: handleFocusVisible,
    onBlur: handleBlurVisible,
    ref: focusVisibleRef
  } = core.useIsFocusVisible();
  const selectedItems = selectedItem;
  const {
    setSelectedItem: setSelectedItems,
    setHighlightedIndex: setHighlightedListIndex
  } = listHelpers;
  const handleInputFocus = (event) => {
    handleFocusVisible(event);
    if (isFocusVisibleRef.current) {
      listHelpers.setFocusVisible(true);
    }
    if (InputProps.onInputFocus) {
      InputProps.onInputFocus(event);
    }
    notifyPopper(event);
  };
  const handleInputBlur = (event) => {
    handleBlurVisible();
    setAllowAnnouncement(false);
    setInputValue("");
    if (restListProps.onBlur) {
      restListProps.onBlur(event);
    }
    if (InputProps.onInputBlur) {
      InputProps.onInputBlur(event);
    }
    notifyPopper(event);
  };
  const handleInputChange = (event) => {
    setInputValue(event.target.value);
    setQuickSelection(event.target.value.length > 0 && !allowFreeText);
    if (InputProps.onInputChange) {
      InputProps.onInputChange(event);
    }
  };
  const handleItemsChange = (newItems) => {
    const uniqueItems = Array.from(new Set(newItems));
    setSelectedItems(uniqueItems);
    onChange && onChange(null, uniqueItems);
  };
  const handleInputSelect = (event) => {
    event.persist();
    setSelectionChanged(true);
    if (InputProps.onInputSelect) {
      InputProps.onInputSelect(event);
    }
  };
  const handleClear = () => {
    setSelectedItems([]);
  };
  const stringToItem = (selected, value) => {
    const trimmed = value.trim();
    const item = stringToItemProp(selected, trimmed);
    const isSelected = selected.map(itemToString).indexOf(trimmed) !== -1;
    return !isSelected && (allowFreeText || labels.indexOf(trimmed) !== -1) ? item : null;
  };
  const {
    inputRef,
    inputProps,
    state: inputState,
    helpers: inputHelpers
  } = useTokenizedInput.useTokenizedInput({
    ...restProps,
    ...InputProps,
    disabled,
    itemToString,
    stringToItem,
    selectedItems,
    initialSelectedItems,
    onInputFocus: handleInputFocus,
    onInputBlur: handleInputBlur,
    onInputChange: handleInputChange,
    onInputSelect: handleInputSelect,
    onChange: handleItemsChange,
    onClear: handleClear,
    onKeyDown: InputProps.onKeyDown
  });
  const handleFocusVisibleRef = core.useForkRef(focusVisibleRef, focusedRef);
  const handleInputRef = core.useForkRef(inputRef, handleFocusVisibleRef);
  const { setHighlightedIndex: setHighlightedPillIndex } = inputHelpers;
  React.useEffect(() => {
    if (!isListOpen) {
      setHighlightedListIndex(void 0);
      setQuickSelection(false);
    }
  }, [isListOpen, setHighlightedListIndex, setQuickSelection]);
  const previousSelectedItems = core.usePrevious(selectedItems);
  core.useIsomorphicLayoutEffect(() => {
    if (selectedItems.some(
      (item) => !(previousSelectedItems || []).includes(item)
    )) {
      setInputValue("");
    }
    if (!selectedItems.length) {
      setHighlightedListIndex(void 0);
    }
  }, [
    selectedItems,
    previousSelectedItems,
    setInputValue,
    setHighlightedListIndex
  ]);
  React.useEffect(() => {
    if (inputState.highlightedIndex != null && inputState.highlightedIndex >= 0) {
      setHighlightedListIndex(void 0);
      setQuickSelection(false);
    }
  }, [inputState.highlightedIndex, setHighlightedListIndex, setQuickSelection]);
  const highlightedIndex = listState && listState.highlightedIndex;
  React.useEffect(() => {
    if (highlightedIndex != null && highlightedIndex >= 0) {
      setHighlightedPillIndex(void 0);
    }
  }, [highlightedIndex, setHighlightedPillIndex]);
  React.useEffect(() => {
    setHighlightedListIndex(void 0);
  }, [source, setHighlightedListIndex]);
  const handleFirstItemSelection = (event) => {
    if (!allowFreeText && event.key === "Enter" && quickSelection) {
      const newItem = source[0];
      const newSelectedItems = selectedItems.indexOf(newItem) === -1 ? selectedItems.concat(source.slice(0, 1)) : selectedItems.filter((item) => item !== newItem);
      setSelectedItems(newSelectedItems);
      onSelect && onSelect(event, newItem);
      onChange && onChange(event, newSelectedItems);
    }
  };
  const handleListOpenKeyDown = (event) => {
    if ("Escape" === event.key && inputProps.expanded) {
      setTimeout(() => {
        if (expandButtonRef.current) {
          expandButtonRef.current.focus();
        }
      }, 250);
    }
    handleFirstItemSelection(event);
    if ("Home" !== event.key && "End" !== event.key && !(" " === event.key && !event.ctrlKey)) {
      if (restListProps.onKeyDown) {
        restListProps.onKeyDown(event);
      }
      setSelectionChanged(false);
    }
  };
  const handleInputKeyDown = (event) => {
    if ("Escape" === event.key) {
      setInputValue("");
      setHighlightedListIndex(void 0);
    }
    if (" " === event.key && !event.ctrlKey) {
      setHighlightedPillIndex(void 0);
    } else {
      if (inputProps.onKeyDown) {
        inputProps.onKeyDown(
          event
        );
      }
    }
    if (!usePopperStatus.isToggleList(event) && listState.highlightedIndex == null && REQUIRE_PREV_HIGHLIGHT.indexOf(event.key) !== -1) {
      event.preventDefault();
      setHighlightedListIndex(
        Math.min(quickSelection ? 1 : 0, source.length - 1)
      );
      setQuickSelection(false);
      setSelectionChanged(false);
    } else if (isListOpen) {
      handleListOpenKeyDown(event);
    }
    setAllowAnnouncement("Backspace" !== event.key);
    notifyPopper(event);
  };
  const handleListClick = (event) => {
    clearTimeout(
      inputBlurTimeout.current == null ? void 0 : inputBlurTimeout.current
    );
    const inputEl = inputRef && inputRef.current;
    if (inputEl) {
      inputEl.focus();
    }
    if (restListProps.onClick) {
      restListProps.onClick(event);
    }
  };
  const mergedInputProps = {
    ...inputProps.InputProps,
    inputProps: {
      ...(inputProps.InputProps || {}).inputProps,
      role: "textbox",
      "aria-roledescription": "MultiSelect Combobox"
    }
  };
  if (ariaActiveDescendant && !selectionChanged) {
    mergedInputProps.inputProps["aria-activedescendant"] = ariaActiveDescendant;
  }
  const expandButtonProps = {
    accessibleText: void 0,
    role: "button",
    "aria-roledescription": "Expand combobox button",
    "aria-labelledby": [ariaLabelledBy, `${inputId}-input`].filter(Boolean).join(" ")
  };
  return {
    inputHelpers,
    inputRef: handleInputRef,
    listContext: {
      state: listState,
      helpers: listHelpers
    },
    inputProps: {
      ...inputProps,
      selectedItems,
      allowAnnouncement,
      id: inputId,
      value: inputValue,
      ExpandButtonProps: expandButtonProps,
      InputProps: mergedInputProps,
      onKeyDown: handleInputKeyDown
    },
    listProps: {
      ...restListProps,
      source,
      itemToString,
      itemTextHighlightPattern,
      onClick: handleListClick,
      isListOpen: isListOpen && Boolean(source.length)
    }
  };
};

exports.useMultiSelectComboBox = useMultiSelectComboBox;
//# sourceMappingURL=useMultiSelectComboBox.js.map
