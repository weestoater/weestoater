'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var react = require('@floating-ui/react');
var core = require('@salt-ds/core');
var React = require('react');
var Portal = require('../../portal/Portal.js');
require('../../list-deprecated/List.js');
var ListBase = require('../../list-deprecated/ListBase.js');
require('../../list-deprecated/ListItemBase.js');
require('../../list-deprecated/ListItem.js');
require('../../list-deprecated/ListItemContext.js');
var ListStateContext = require('../../list-deprecated/ListStateContext.js');
require('../../tokenized-input/TokenizedInput.js');
var TokenizedInputBase = require('../../tokenized-input/TokenizedInputBase.js');
require('clipboard-copy');
require('../../form-field-context-legacy/FormFieldLegacyContext.js');
var getAnnouncement = require('./getAnnouncement.js');
var useMultiSelectComboBox = require('./useMultiSelectComboBox.js');
var WindowContext = require('../../window/WindowContext.js');
require('../../window/ElectronWindow.js');

function MultiSelectComboBox(props) {
  const {
    ListItem,
    WindowProps,
    rootRef,
    listRef: listRefProp,
    rootWidth,
    listWidth,
    inputRef: inputRefProp,
    ...restProps
  } = props;
  const { announce } = core.useAriaAnnouncer({ debounce: 1e3 });
  const expandButtonRef = React.useRef(null);
  const listRef = React.useRef(null);
  const setListRef = core.useForkRef(listRef, listRefProp);
  const { inputRef, listContext, inputProps, listProps, inputHelpers } = useMultiSelectComboBox.useMultiSelectComboBox({
    ...restProps,
    expandButtonRef
  });
  const { allowAnnouncement, disabled, value, ...restInputProps } = inputProps;
  const { isListOpen, itemCount, itemToString, source, ...restListProps } = listProps;
  const firstItem = null;
  const allowAnnouncementRef = React.useRef(allowAnnouncement);
  React.useEffect(() => {
    allowAnnouncementRef.current = allowAnnouncement;
  }, [allowAnnouncement]);
  React.useEffect(() => {
    if (allowAnnouncementRef.current && value && firstItem) {
      announce(getAnnouncement.getAnnouncement(itemCount, firstItem));
    }
  }, [value, firstItem, itemCount, announce]);
  const [maxListHeight, setMaxListHeight] = React.useState(
    void 0
  );
  const middleware = WindowContext.isDesktop ? [] : [
    react.flip({
      fallbackPlacements: ["bottom-start", "top-start"]
    }),
    react.shift({ limiter: react.limitShift() }),
    react.size({
      apply({ availableHeight }) {
        setMaxListHeight(availableHeight);
      }
    })
  ];
  const { reference, floating, x, y, strategy } = core.useFloatingUI({
    placement: "bottom-start",
    middleware
  });
  React.useEffect(() => {
    if (rootRef.current) {
      reference(rootRef.current);
    }
  }, [rootRef, reference]);
  const Window = WindowContext.useWindow();
  return /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, {
    children: [
      /* @__PURE__ */ jsxRuntime.jsx(TokenizedInputBase.TokenizedInputBase, {
        disabled,
        expandButtonRef,
        inputRef: core.useForkRef(inputRef, inputRefProp),
        value,
        helpers: inputHelpers,
        ...restInputProps
      }),
      rootRef.current && isListOpen && /* @__PURE__ */ jsxRuntime.jsx(Portal.Portal, {
        children: /* @__PURE__ */ jsxRuntime.jsx(Window, {
          style: {
            top: y != null ? y : 0,
            left: x != null ? x : 0,
            position: strategy,
            maxHeight: maxListHeight != null ? maxListHeight : ""
          },
          ...WindowProps,
          ref: floating,
          children: /* @__PURE__ */ jsxRuntime.jsx(ListStateContext.ListStateContext.Provider, {
            value: listContext,
            children: /* @__PURE__ */ jsxRuntime.jsx(ListBase.ListBase, {
              ...{
                ListItem,
                disabled,
                itemCount,
                itemToString,
                width: listWidth || rootWidth,
                source,
                ...restListProps,
                listRef: setListRef
              },
              maxHeight: maxListHeight || listProps.maxHeight
            })
          })
        })
      })
    ]
  });
}

exports.MultiSelectComboBox = MultiSelectComboBox;
//# sourceMappingURL=MultiSelectComboBox.js.map
