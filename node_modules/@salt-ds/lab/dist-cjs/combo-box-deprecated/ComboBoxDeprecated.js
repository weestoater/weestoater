'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var core = require('@salt-ds/core');
var clsx = require('clsx');
var React = require('react');
var DefaultComboBox = require('./internal/DefaultComboBox.js');
var MultiSelectComboBox = require('./internal/MultiSelectComboBox.js');
var useWidth = require('../list-deprecated/internal/useWidth.js');
require('../form-field-context-legacy/FormFieldLegacyContext.js');
var useFormFieldLegacyProps = require('../form-field-context-legacy/useFormFieldLegacyProps.js');
var window = require('@salt-ds/window');
var styles = require('@salt-ds/styles');
var ComboBox = require('./ComboBox.css.js');

const withBaseName = core.makePrefixer("saltComboBox");
function getMultiSelect({
  multiSelect,
  initialSelectedItem,
  selectedItem
}) {
  return multiSelect || Array.isArray(initialSelectedItem) || Array.isArray(selectedItem);
}
const validateProps = ({
  isMultiSelect,
  delimiter
}) => {
  if (process.env.NODE_ENV !== "production") {
    if (!isMultiSelect && delimiter) {
      console.warn("Delimiter can only be used for a multi-select combo-box.");
    }
  }
};
const ComboBoxDeprecated = React.forwardRef(function ComboBox$1(props, ref) {
  const targetWindow = window.useWindow();
  styles.useComponentCssInjection({
    testId: "salt-combo-box-deprecated",
    css: ComboBox,
    window: targetWindow
  });
  const {
    inFormField,
    a11yProps: {
      "aria-labelledby": ariaLabelledBy,
      "aria-required": ariaRequired,
      disabled: formFieldDisabled
    } = {}
  } = useFormFieldLegacyProps.useFormFieldLegacyProps();
  const { current: isMultiSelect } = React.useRef(getMultiSelect(props));
  validateProps({ isMultiSelect, ...props });
  const {
    inputRef,
    listRef,
    className,
    disabled = formFieldDisabled,
    source = [],
    multiSelect,
    initialSelectedItem,
    selectedItem,
    width,
    listWidth,
    id: idProp,
    "aria-label": ariaLabel,
    ...restProps
  } = props;
  const id = core.useId(idProp);
  const [rootRef, rootWidth] = useWidth.useWidth(
    width == null && listWidth == null
  );
  const ComboBoxComponent = isMultiSelect ? MultiSelectComboBox.MultiSelectComboBox : DefaultComboBox.DefaultComboBox;
  return /* @__PURE__ */ jsxRuntime.jsx("div", {
    className: clsx.clsx(
      withBaseName(),
      {
        [withBaseName("disabled")]: disabled,
        [withBaseName(`field`)]: inFormField
      },
      className
    ),
    id,
    ref: core.useForkRef(ref, rootRef),
    style: { width },
    children: /* @__PURE__ */ jsxRuntime.jsx(ComboBoxComponent, {
      ...{
        ...restProps,
        id,
        source,
        disabled,
        rootRef,
        rootWidth,
        inputRef,
        listRef,
        listWidth,
        initialSelectedItem,
        selectedItem,
        "aria-label": clsx.clsx(ariaLabel),
        "aria-labelledby": ariaLabelledBy,
        "aria-required": ariaRequired
      }
    })
  });
});

exports.ComboBoxDeprecated = ComboBoxDeprecated;
//# sourceMappingURL=ComboBoxDeprecated.js.map
