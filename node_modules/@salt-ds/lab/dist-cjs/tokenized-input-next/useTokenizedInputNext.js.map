{"version":3,"file":"useTokenizedInputNext.js","sources":["../src/tokenized-input-next/useTokenizedInputNext.tsx"],"sourcesContent":["import {\n  ownerWindow,\n  useControlled,\n  useDensity,\n  useForkRef,\n  useFormFieldProps,\n  useId,\n  useIsomorphicLayoutEffect,\n} from \"@salt-ds/core\";\nimport copy from \"clipboard-copy\";\nimport {\n  ChangeEvent,\n  FocusEvent,\n  InputHTMLAttributes,\n  KeyboardEvent,\n  KeyboardEventHandler,\n  Ref,\n  SetStateAction,\n  SyntheticEvent,\n  useCallback,\n  useMemo,\n  useRef,\n  useState,\n  MutableRefObject,\n} from \"react\";\nimport { escapeRegExp } from \"../utils\";\nimport { TokenizedInputNextProps } from \"./TokenizedInputNext\";\nimport { getPadding, useWidth } from \"./internal/useWidth\";\nimport { useResizeObserver } from \"./internal/useResizeObserver\";\nimport { calcFirstHiddenIndex } from \"./internal/calcFirstHiddenIndex\";\n\nexport interface TokenizedInputNextState<Item> {\n  activeIndices: number[];\n  expanded: boolean | undefined;\n  highlightedIndex: number | undefined;\n  selectedItems: Item[];\n  value: string | undefined;\n}\n\nexport interface TokenizedInputNextHelpers<Item> {\n  setHighlightedIndex: (value?: number) => void;\n  setValue: (value: string) => void;\n  setSelectedItems: (selectedItems: Item[]) => void;\n  updateExpanded: (event: SyntheticEvent, expanded: boolean) => void;\n}\n\nexport interface TokenizedInputNextRefs {\n  textAreaRef: Ref<HTMLTextAreaElement>;\n  pillsRef: MutableRefObject<Record<number, number | undefined>>;\n  clearButtonRef: (newNode: HTMLButtonElement) => void;\n  expandButtonRef: Ref<HTMLButtonElement>;\n  statusAdornmentRef: Ref<SVGSVGElement>;\n  containerRef: Ref<HTMLDivElement>;\n}\n\nconst getCursorPosition = (\n  inputRef: MutableRefObject<HTMLTextAreaElement | null>\n) => {\n  if (inputRef.current) {\n    const { selectionStart, selectionEnd } = inputRef.current;\n\n    // if there is no selection range\n    if (selectionStart != null && selectionStart === selectionEnd) {\n      return selectionStart;\n    }\n  }\n\n  return -1;\n};\n\nconst isCtrlModifier = (event: KeyboardEvent<HTMLTextAreaElement>) => {\n  return (\n    event.ctrlKey ||\n    event.metaKey ||\n    [\"CONTROL\", \"META\"].indexOf(event.key.toUpperCase()) !== -1\n  );\n};\n\nfunction isValidItem<Item>(data: unknown): data is Item {\n  return (\n    (typeof data === \"string\" && Boolean(data.length)) ||\n    (typeof data !== \"string\" && data != null)\n  );\n}\n\ninterface useTokenizedInputNextResult<Item> {\n  /**\n   * The tokenized input state\n   */\n  state: TokenizedInputNextState<Item>;\n  /**\n   * First hidden element when collapsed\n   */\n  firstHiddenIndex: number | null;\n  /**\n   * Utility functions for modifying tokenized input state\n   */\n  helpers: TokenizedInputNextHelpers<Item>;\n  /**\n   * Refs for tokenized input items.\n   */\n  refs: TokenizedInputNextRefs;\n  /**\n   * Properties applied to a basic tokenized input component\n   */\n  inputProps: Omit<TokenizedInputNextProps<Item>, \"helpers\" | \"onChange\">;\n}\n\nexport function useTokenizedInputNext<Item>(\n  props: TokenizedInputNextProps<Item>\n): useTokenizedInputNextResult<Item> {\n  const {\n    disabled: formFieldDisabled,\n    readOnly,\n    necessity,\n    validationStatus,\n    a11yProps: {\n      \"aria-describedby\": ariaDescribedBy,\n      \"aria-labelledby\": ariaLabelledBy,\n    } = {},\n  } = useFormFieldProps();\n\n  const {\n    delimiters = [\",\"],\n    defaultSelected = [],\n    disabled = formFieldDisabled,\n    readOnly: readOnlyProp,\n    validationStatus: validationStatusProp,\n    disableAddOnBlur,\n    onBlur,\n    onClick,\n    onExpand,\n    onCollapse,\n    onKeyDown,\n    onInputChange,\n    onInputFocus,\n    onInputBlur,\n    onClear,\n    onChange,\n    id: idProp,\n    value: valueProp,\n    expanded: expandedProp,\n    selectedItems: selectedItemsProp,\n    \"aria-label\": ariaLabel,\n    \"aria-describedby\": ariaDescribedByProp,\n    expandButtonRef: expandButtonRefProp,\n    ...restProps\n  } = props;\n\n  const density = useDensity();\n  const id = useId(idProp);\n\n  const [focused, setFocused] = useState(false);\n  const [pillGroupWidth, setPillGroupWidth] = useState<number | null>(null);\n  const [firstHiddenIndex, setFirstHiddenIndex] = useState<number | null>(null);\n  const [activeIndices, setActiveIndices] = useState<number[]>([]);\n  const [highlightedIndex, setHighlightedIndex] = useState<number | undefined>(\n    undefined\n  );\n\n  const [expandButtonHookRef, expandButtonWidth] = useWidth(density);\n  const [clearButtonRef, clearButtonWidth] = useWidth(density);\n  const [statusAdornmentRef, statusAdornmentWidth] = useWidth(density);\n  const [inputRef, inputWidth] = useWidth(density);\n\n  const containerRef = useRef<HTMLDivElement>(null);\n  const pillsRef = useRef<Record<number, number | undefined>>({});\n  const textAreaRef = useRef<HTMLTextAreaElement>(null);\n  const preventBlurOnCopy = useRef(false);\n  const expandButtonRef = useForkRef(expandButtonHookRef, expandButtonRefProp);\n\n  const hasActiveItems = Boolean(activeIndices.length);\n  const primaryDelimiter = delimiters[0];\n  const delimiterRegex = useMemo(\n    () => new RegExp(delimiters.map(escapeRegExp).join(\"|\"), \"gi\"),\n    [delimiters]\n  );\n\n  const [value, setValue, isInputControlled] = useControlled<\n    string | undefined\n  >({\n    controlled: valueProp,\n    default: \"\",\n    name: \"TokenizedInputNext\",\n    state: \"value\",\n  });\n\n  const [selectedItems = [], setSelectedItems, isSelectionControlled] =\n    useControlled<Item[] | undefined>({\n      controlled: selectedItemsProp,\n      default: defaultSelected,\n      name: \"TokenizedInputNext\",\n      state: \"selectedItems\",\n    });\n\n  const [expanded, setExpanded, isExpandedControlled] = useControlled<boolean>({\n    controlled: expandedProp,\n    default: false,\n    name: \"TokenizedInputNext\",\n    state: \"expanded\",\n  });\n\n  const widthOffset =\n    inputWidth +\n    statusAdornmentWidth +\n    (expanded ? clearButtonWidth : expandButtonWidth);\n\n  const containerObserverRef = useResizeObserver<HTMLDivElement>(\n    useCallback(\n      ([{ contentRect }]) => {\n        const padding = getPadding(containerRef.current);\n        setPillGroupWidth(contentRect.width - padding - widthOffset);\n      },\n      [widthOffset]\n    )\n  );\n\n  useIsomorphicLayoutEffect(\n    () => () => {\n      // When density changes, set hidden index to null so that pills are in their\n      // readonly state before they are measured.\n      setFirstHiddenIndex(null);\n    },\n    [density]\n  );\n\n  // useIsomorphicLayoutEffect because of potential layout change\n  // We want to do that before paint to avoid layout jumps\n  useIsomorphicLayoutEffect(\n    () => {\n      if (expanded) {\n        setFirstHiddenIndex(null);\n      } else if (pillGroupWidth != null) {\n        setFirstHiddenIndex(\n          calcFirstHiddenIndex({\n            containerWidth: pillGroupWidth,\n            pillWidths: Object.values(pillsRef.current).filter(\n              Boolean\n            ) as number[],\n          })\n        );\n      }\n    },\n    // Additional dependency on selectedItems is for the controlled version\n    [expanded, pillGroupWidth, selectedItems]\n  );\n\n  const focusInput = useCallback(() => {\n    if (textAreaRef.current) {\n      textAreaRef.current.focus();\n    }\n  }, []);\n\n  const updateInputValue = (newValue: string | undefined) => {\n    if (!isInputControlled) {\n      setValue(newValue);\n    }\n  };\n\n  const updateSelectedItems = useCallback(\n    (event: SyntheticEvent, action: SetStateAction<Item[] | undefined>) => {\n      if (!isSelectionControlled) {\n        setSelectedItems((prevSelectedItems?: Item[]) => {\n          const newItems =\n            typeof action === \"function\" ? action(prevSelectedItems) : action;\n\n          if (newItems !== prevSelectedItems) {\n            onChange?.(event, newItems);\n          }\n          return newItems;\n        });\n      } else {\n        onChange?.(\n          event,\n          typeof action === \"function\" ? action(selectedItems) : action\n        );\n      }\n    },\n    [isSelectionControlled, setSelectedItems, onChange, selectedItems]\n  );\n\n  const updateExpanded = (event: SyntheticEvent, newExpanded: boolean) => {\n    if (!isExpandedControlled) {\n      setExpanded(newExpanded);\n    }\n\n    if (newExpanded) {\n      focusInput();\n      onExpand?.(event);\n    } else {\n      onCollapse?.(event);\n    }\n  };\n\n  const resetInput = () => {\n    updateInputValue(\"\");\n    setHighlightedIndex(undefined);\n    setActiveIndices([]);\n  };\n\n  const removeItems = useCallback(\n    (event: SyntheticEvent, itemIndices: number[]) => {\n      updateSelectedItems(\n        event,\n        (prevSelectedItems) =>\n          prevSelectedItems &&\n          (prevSelectedItems.length === 0\n            ? prevSelectedItems\n            : prevSelectedItems.filter(\n                (_, index) => itemIndices.indexOf(index) === -1\n              ))\n      );\n    },\n    [updateSelectedItems]\n  );\n\n  const handleInputFocus = (event: FocusEvent<HTMLTextAreaElement>) => {\n    event.stopPropagation();\n\n    // The input will lose focus when building the text to copy in a temporary\n    // DOM node. This is particularly visible in a slower browser, i.e. IE 11.\n    // This is to prevent a blur in that scenario.\n    if (preventBlurOnCopy.current) {\n      preventBlurOnCopy.current = false;\n      setActiveIndices(\n        Array.from(\n          { length: selectedItems ? selectedItems.length : 0 },\n          (_, index) => index\n        )\n      );\n      return;\n    }\n\n    onInputFocus?.(event);\n    updateExpanded(event, true);\n    setFocused(true);\n  };\n\n  const handleBlur = (\n    event: FocusEvent<HTMLTextAreaElement | HTMLButtonElement>\n  ) => {\n    onBlur?.(event);\n    setFocused(false);\n    updateExpanded(event, false);\n  };\n\n  const handleInputBlur = (event: FocusEvent<HTMLTextAreaElement>) => {\n    // Check if the related target inside TokenizedInput\n    const container = containerRef?.current;\n    const eventTarget = event.relatedTarget;\n    event.preventDefault();\n    event.stopPropagation();\n    setHighlightedIndex(undefined);\n    setActiveIndices([]);\n    if (!disableAddOnBlur) {\n      handleAddItems(event, value);\n    }\n    onInputBlur?.(event);\n    if (\n      eventTarget !== container &&\n      !container?.contains(eventTarget as Node)\n    ) {\n      handleBlur(event);\n    }\n  };\n\n  const handleClick = (event: SyntheticEvent<HTMLElement>) => {\n    updateExpanded(event, true);\n    setActiveIndices([]);\n    onClick?.(event);\n  };\n\n  const handleInputChange = (event: ChangeEvent<HTMLTextAreaElement>) => {\n    setHighlightedIndex(undefined);\n\n    onInputChange?.(event);\n\n    const newValue = event.target.value;\n\n    if (delimiterRegex.test(newValue)) {\n      // Process value with delimiters\n      handleAddItems(event, newValue);\n    } else {\n      // Just update input value if there is no delimiter\n      updateInputValue(newValue);\n    }\n  };\n\n  const handleAddItems = (\n    event: SyntheticEvent,\n    newValue: string | undefined,\n    appendOnly?: boolean\n  ) => {\n    if (!newValue || newValue.length === 0) {\n      return;\n    }\n\n    resetInput();\n\n    const newItems = newValue\n      .split(delimiterRegex)\n      .reduce<Item[]>((values, item) => {\n        const newItem = item.trim();\n        return isValidItem<Item>(newItem) ? values.concat(newItem) : values;\n      }, []);\n\n    if (newItems.length) {\n      updateSelectedItems(event, (prevSelectedItems = []) =>\n        hasActiveItems && !appendOnly\n          ? newItems\n          : prevSelectedItems.concat(newItems)\n      );\n    }\n  };\n\n  const handleRemoveItem = useCallback(\n    (event: SyntheticEvent, itemIndex?: number) => {\n      focusInput();\n      if (itemIndex != undefined && !readOnly && !readOnlyProp) {\n        removeItems(event, [itemIndex]);\n      }\n    },\n    [focusInput, removeItems]\n  );\n\n  const handleClear = (event: ChangeEvent<HTMLTextAreaElement>) => {\n    updateSelectedItems(event, []);\n    resetInput();\n    focusInput();\n    onClear?.(event);\n  };\n\n  const cursorAtInputStart = () =>\n    getCursorPosition(textAreaRef) === 0 && Boolean(selectedItems.length);\n\n  const highlightAtPillGroupEnd = () =>\n    highlightedIndex === selectedItems.length - 1;\n\n  const pillGroupKeyDownHandlers: Record<\n    string,\n    KeyboardEventHandler<HTMLTextAreaElement>\n  > = {\n    ArrowLeft: (event) => {\n      event.preventDefault();\n      setHighlightedIndex((prevHighlightedIndex) =>\n        prevHighlightedIndex == null\n          ? selectedItems.length - 1\n          : Math.max(0, prevHighlightedIndex - 1)\n      );\n    },\n    ArrowRight: (event) => {\n      if (highlightAtPillGroupEnd()) {\n        return setHighlightedIndex(undefined);\n      }\n\n      event.preventDefault();\n      setHighlightedIndex((prevHighlightedIndex) =>\n        prevHighlightedIndex == null\n          ? prevHighlightedIndex\n          : Math.min(selectedItems.length - 1, prevHighlightedIndex + 1)\n      );\n    },\n    Backspace: (event) => {\n      event.preventDefault();\n      handleRemoveItem(event, highlightedIndex);\n      setHighlightedIndex((prevHighlightedIndex) =>\n        prevHighlightedIndex == null\n          ? prevHighlightedIndex\n          : Math.max(0, prevHighlightedIndex - 1)\n      );\n    },\n    Home: (event) => {\n      event.preventDefault();\n      setHighlightedIndex(0);\n    },\n    End: (event) => {\n      event.preventDefault();\n      setHighlightedIndex(selectedItems.length - 1);\n    },\n    Enter: (event) => {\n      event.preventDefault();\n      handleRemoveItem(event, highlightedIndex);\n    },\n    Delete: (event) => {\n      event.preventDefault();\n      handleRemoveItem(event, highlightedIndex);\n    },\n    \" \": (event) => {\n      event.preventDefault();\n      handleRemoveItem(event, highlightedIndex);\n    },\n  };\n\n  const inputKeyDownHandlers: Record<\n    string,\n    KeyboardEventHandler<HTMLTextAreaElement>\n  > = {\n    ArrowLeft: (event) => {\n      if (cursorAtInputStart()) {\n        event.preventDefault();\n        setHighlightedIndex(selectedItems.length - 1);\n      }\n    },\n    Backspace: (event) => {\n      if (hasActiveItems) {\n        removeItems(event, activeIndices);\n      } else if (cursorAtInputStart()) {\n        setHighlightedIndex(selectedItems.length - 1);\n      }\n    },\n    Delete: (event) => {\n      if (hasActiveItems) {\n        removeItems(event, activeIndices);\n      }\n    },\n    Enter: (event) => {\n      event.preventDefault();\n\n      if (hasActiveItems) {\n        removeItems(event, activeIndices);\n      } else {\n        handleAddItems(event, value);\n      }\n    },\n  };\n\n  const handleCtrlModifierKeyDown: InputHTMLAttributes<HTMLTextAreaElement>[\"onKeyDown\"] =\n    (event) => {\n      const win = ownerWindow(event.target as HTMLElement);\n      const supportClipboard = win.navigator?.clipboard;\n\n      switch (event.key.toUpperCase()) {\n        case \"A\":\n          // Select all\n          setHighlightedIndex(undefined);\n          setActiveIndices(\n            Array.from({ length: selectedItems.length }, (_, index) => index)\n          );\n          break;\n        case \"C\":\n          // Copy\n          const textToCopy =\n            activeIndices.length > 0\n              ? activeIndices\n                  .map((index) => String(selectedItems[index]))\n                  .concat(value != null ? String(value).trim() : \"\")\n                  .filter(Boolean)\n                  .join(primaryDelimiter)\n              : highlightedIndex !== undefined\n              ? String(selectedItems[highlightedIndex] + \",\")\n              : \"\";\n          copy(textToCopy)\n            .then((result) => {\n              preventBlurOnCopy.current = !supportClipboard;\n              return result;\n            })\n            .catch((error) => {\n              console.error(error);\n            });\n          break;\n        case \"V\":\n          // Paste - do nothing and let handleChange deal with it\n          break;\n        case \"ARROWLEFT\":\n          pillGroupKeyDownHandlers.ArrowLeft(event);\n          break;\n        case \"ARROWRIGHT\":\n          pillGroupKeyDownHandlers.ArrowRight(event);\n          break;\n        case \"BACKSPACE\":\n          if (cursorAtInputStart()) {\n            handleRemoveItem(event, selectedItems.length - 1);\n          }\n          break;\n        case \"CONTROL\":\n        case \"META\":\n          // Do nothing\n          break;\n        default:\n          // Otherwise, reset active items\n          setActiveIndices([]);\n      }\n    };\n\n  const handleCommonKeyDown = (event: KeyboardEvent<HTMLTextAreaElement>) => {\n    const eventKey = event.key.toUpperCase();\n    if (eventKey === \"ESCAPE\") {\n      event.preventDefault();\n      resetInput();\n    } else if (eventKey === \"TAB\" && !disableAddOnBlur) {\n      // Pressing Tab adds a new value\n      handleAddItems(event, value);\n    }\n  };\n\n  const handleKeyDown: InputHTMLAttributes<HTMLTextAreaElement>[\"onKeyDown\"] = (\n    event\n  ) => {\n    onKeyDown?.(event);\n    if (event.defaultPrevented) {\n      return;\n    }\n    if (isCtrlModifier(event)) {\n      handleCtrlModifierKeyDown(event);\n    } else {\n      let handler;\n      if (highlightedIndex == null) {\n        handler = inputKeyDownHandlers[event.key];\n        setActiveIndices([]);\n      } else {\n        handler = pillGroupKeyDownHandlers[event.key];\n      }\n\n      if (handler != null) {\n        handler(event);\n      } else {\n        handleCommonKeyDown(event);\n      }\n    }\n  };\n\n  const state: TokenizedInputNextState<Item> = {\n    value,\n    selectedItems,\n    activeIndices,\n    highlightedIndex,\n    expanded,\n  };\n\n  const eventHandlers = {\n    // onFocus is a focus on the expand button\n    // It can also be triggered by a focus on the input\n    // onBlur is a blur from the expand button when it's collapsed\n    // It can also be triggered by the clear button\n    onBlur: expanded ? handleBlur : onBlur,\n    onClick: handleClick,\n    onInputChange: handleInputChange,\n    onInputFocus: handleInputFocus,\n    onInputBlur: handleInputBlur,\n    onKeyDown: handleKeyDown,\n    onRemoveItem: handleRemoveItem,\n    onClear: handleClear,\n  };\n\n  return {\n    state,\n    firstHiddenIndex,\n    refs: {\n      textAreaRef: useForkRef(textAreaRef, inputRef),\n      pillsRef,\n      clearButtonRef,\n      expandButtonRef,\n      statusAdornmentRef,\n      containerRef: useForkRef(containerRef, containerObserverRef),\n    },\n    helpers: {\n      setValue,\n      setSelectedItems,\n      setHighlightedIndex,\n      updateExpanded,\n    },\n    inputProps: {\n      id,\n      disabled,\n      validationStatus: validationStatus ?? validationStatusProp,\n      readOnly: readOnly ?? readOnlyProp,\n      necessity: necessity,\n      focused,\n      \"aria-labelledby\": ariaLabelledBy,\n      \"aria-label\": ariaLabel,\n      \"aria-describedby\": ariaDescribedBy ?? ariaDescribedByProp,\n      ...state,\n      ...restProps,\n      ...(disabled ? {} : eventHandlers),\n    },\n  };\n}\n"],"names":["useFormFieldProps","useDensity","useId","useState","useWidth","useRef","useForkRef","useMemo","escapeRegExp","useControlled","useResizeObserver","useCallback","getPadding","useIsomorphicLayoutEffect","calcFirstHiddenIndex","ownerWindow","copy"],"mappings":"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"}