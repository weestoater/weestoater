'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var core = require('@salt-ds/core');
var React = require('react');
var useTokenizedInputNext = require('./useTokenizedInputNext.js');
var clsx = require('clsx');
var InputPill = require('./internal/InputPill.js');
var icons = require('@salt-ds/icons');
var window = require('@salt-ds/window');
var styles = require('@salt-ds/styles');
var TokenizedInputNext$1 = require('./TokenizedInputNext.css.js');

const withBaseName = core.makePrefixer("saltTokenizedInputNext");
const getItemsAriaLabel = (itemCount) => itemCount === 0 ? "no item selected" : `${itemCount} ${itemCount > 1 ? "items" : "item"}`;
const TokenizedInputNext = React.forwardRef(function TokenizedInputNext2({
  textAreaRef: textAreaRefProp,
  textAreaProps = {},
  variant = "primary",
  ...rest
}, ref) {
  const targetWindow = window.useWindow();
  styles.useComponentCssInjection({
    testId: "salt-tokenized-input-next",
    css: TokenizedInputNext$1,
    window: targetWindow
  });
  const {
    "aria-describedby": textAreaDescribedBy,
    "aria-labelledby": textAreaLabelledBy,
    required: textAreaRequired,
    ...restTextAreaProps
  } = textAreaProps;
  const { refs, helpers, inputProps, firstHiddenIndex } = useTokenizedInputNext.useTokenizedInputNext(rest);
  const {
    textAreaRef: textAreaHookRef,
    pillsRef,
    clearButtonRef,
    expandButtonRef,
    statusAdornmentRef,
    containerRef: containerHookRef
  } = refs;
  const {
    ExpandButtonProps = {
      "aria-label": "expand edit"
    },
    className,
    activeIndices = [],
    selectedItems = [],
    highlightedIndex,
    value,
    expanded,
    disabled,
    onBlur,
    onKeyDown,
    onRemoveItem,
    onInputChange,
    focused,
    validationStatus,
    readOnly,
    onInputFocus,
    onInputBlur,
    onClear,
    onClick,
    onKeyUp,
    id: idProp,
    "aria-label": ariaLabel,
    "aria-labelledby": ariaLabelledBy,
    "aria-describedby": ariaDescribedBy,
    ...restProps
  } = inputProps;
  const id = core.useId(idProp);
  const inputId = `${id}-input`;
  const expandButtonId = `${id}-expand-button`;
  const clearButtonId = `${id}-clear-button`;
  const keydownExpandButton = React.useRef(false);
  const containerRef = core.useForkRef(ref, containerHookRef);
  const textAreaRef = core.useForkRef(textAreaHookRef, textAreaRefProp);
  const showExpandButton = !expanded && firstHiddenIndex != null;
  const hasHelpers = (helpers2) => {
    if (process.env.NODE_ENV !== "production") {
      if (helpers2 == null) {
        console.warn(
          'TokenizedInputNext is used without helpers. You should pass in "helpers" from "useTokenizedInputNext".'
        );
      }
    }
    return helpers2 != null;
  };
  const handleExpandButtonKeyDown = (event) => {
    const singleChar = event.key.length === 1;
    const triggerExpand = [
      "CONTROL",
      "META",
      "ENTER",
      "BACKSPACE",
      "ARROWDOWN",
      "ARROWLEFT",
      "ARROWRIGHT"
    ].indexOf(event.key.toUpperCase()) !== -1;
    if ((singleChar || triggerExpand) && hasHelpers(helpers)) {
      if (event.key === "Enter" || event.key === " ") {
        event.preventDefault();
        event.stopPropagation();
      }
      helpers.updateExpanded(event, true);
      keydownExpandButton.current = true;
    }
  };
  const handleInputKeyUp = (event) => {
    if (keydownExpandButton.current && "Enter" !== event.key) {
      keydownExpandButton.current = false;
      onKeyDown == null ? void 0 : onKeyDown(event);
    }
    onKeyUp == null ? void 0 : onKeyUp(event);
  };
  const handleExpand = (event) => {
    event.stopPropagation();
    if (hasHelpers(helpers)) {
      helpers.updateExpanded(event, true);
    }
  };
  const handleClearButtonFocus = (event) => {
    event.stopPropagation();
  };
  const selectedItemIds = selectedItems.map(
    (_, index) => `${id}-pill-${index}`
  );
  const inputAriaLabelledBy = disabled ? [ariaLabelledBy, inputId, ...selectedItemIds] : [ariaLabelledBy, inputId];
  const expandedWithItems = expanded && !showExpandButton && selectedItems.length > 0;
  const { "aria-label": expandButtonAccessibleText, ...restExpandButtonProps } = ExpandButtonProps;
  return /* @__PURE__ */ jsxRuntime.jsxs("div", {
    className: withBaseName("container"),
    children: [
      /* @__PURE__ */ jsxRuntime.jsx("span", {
        "aria-owns": selectedItemIds.join(" "),
        className: withBaseName("hidden"),
        role: "listbox"
      }),
      /* @__PURE__ */ jsxRuntime.jsxs("div", {
        className: clsx.clsx(
          withBaseName(),
          withBaseName(variant),
          {
            [withBaseName("expanded")]: expanded,
            [withBaseName("focused")]: !disabled && focused,
            [withBaseName("disabled")]: disabled,
            [withBaseName("readOnly")]: readOnly,
            [withBaseName(validationStatus)]: validationStatus
          },
          className
        ),
        ref: containerRef,
        onClick,
        tabIndex: -1,
        ...restProps,
        children: [
          selectedItems.length > 0 && selectedItems.map((item, index) => {
            const label = String(item);
            return /* @__PURE__ */ jsxRuntime.jsx(InputPill.InputPill, {
              disabled,
              hidden: showExpandButton && index >= firstHiddenIndex,
              highlighted: index === highlightedIndex || activeIndices.indexOf(index) !== -1,
              id: `${id}-pill-${index}`,
              index,
              label,
              onClose: expanded && !readOnly ? (event) => onRemoveItem == null ? void 0 : onRemoveItem(event, index) : void 0,
              pillsRef
            }, `${index}-${label}`);
          }),
          /* @__PURE__ */ jsxRuntime.jsx("textarea", {
            "aria-labelledby": clsx.clsx(inputAriaLabelledBy, textAreaLabelledBy),
            "aria-describedby": clsx.clsx(ariaDescribedBy, textAreaDescribedBy),
            "aria-label": clsx.clsx(ariaLabel, getItemsAriaLabel(selectedItems.length)),
            "aria-activedescendant": highlightedIndex && highlightedIndex >= 0 ? `${id}-pill-${highlightedIndex}` : void 0,
            disabled,
            id: inputId,
            readOnly,
            ref: textAreaRef,
            required: textAreaRequired,
            rows: 1,
            tabIndex: disabled ? -1 : 0,
            value,
            className: clsx.clsx(withBaseName("textarea"), textAreaProps == null ? void 0 : textAreaProps.className),
            onChange: onInputChange,
            onBlur: onInputBlur,
            onFocus: !disabled ? onInputFocus : void 0,
            onKeyDown,
            ...restTextAreaProps
          }),
          /* @__PURE__ */ jsxRuntime.jsxs("div", {
            className: withBaseName("endAdornmentContainer"),
            children: [
              !disabled && !readOnly && validationStatus && /* @__PURE__ */ jsxRuntime.jsx(core.StatusAdornment, {
                className: withBaseName("statusAdornment"),
                ref: statusAdornmentRef,
                status: validationStatus
              }),
              expandedWithItems && !readOnly && /* @__PURE__ */ jsxRuntime.jsx(core.Button, {
                className: withBaseName("endAdornment"),
                disabled,
                id: clearButtonId,
                onBlur,
                onClick: onClear,
                onFocus: handleClearButtonFocus,
                ref: clearButtonRef,
                variant: "secondary",
                "data-testid": "clear-button",
                "aria-label": "clear input",
                children: /* @__PURE__ */ jsxRuntime.jsx(icons.CloseIcon, {
                  "aria-hidden": true
                })
              }),
              showExpandButton && /* @__PURE__ */ jsxRuntime.jsx(core.Button, {
                className: withBaseName("endAdornment"),
                "aria-label": expandButtonAccessibleText,
                "aria-labelledby": clsx.clsx(ariaLabelledBy, inputId, expandButtonId),
                disabled,
                id: expandButtonId,
                onBlur,
                onClick: handleExpand,
                onKeyDown: handleExpandButtonKeyDown,
                onKeyUp: handleInputKeyUp,
                ref: expandButtonRef,
                variant: "secondary",
                "data-testid": "expand-button",
                ...restExpandButtonProps,
                children: /* @__PURE__ */ jsxRuntime.jsx(icons.OverflowMenuIcon, {})
              })
            ]
          }),
          /* @__PURE__ */ jsxRuntime.jsx("div", {
            className: withBaseName("activationIndicator")
          })
        ]
      })
    ]
  });
});

exports.TokenizedInputNext = TokenizedInputNext;
//# sourceMappingURL=TokenizedInputNext.js.map
