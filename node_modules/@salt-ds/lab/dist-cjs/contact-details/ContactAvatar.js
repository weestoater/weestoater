'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
var core = require('@salt-ds/core');
require('./internal/FavoriteToggleWithTooltip.js');
var ContactDetailsContext = require('./internal/ContactDetailsContext.js');
var clsx = require('clsx');

const withBaseName = core.makePrefixer("saltContactAvatar");
const ContactAvatar = React.forwardRef(
  function(props, ref) {
    const { className, ...restProps } = props;
    const context = ContactDetailsContext.useContactDetailsContext();
    const { variant, primary, isStacked, setHasAvatar } = context;
    React.useEffect(() => {
      setHasAvatar(true);
      return () => {
        setHasAvatar(false);
      };
    }, [setHasAvatar]);
    if (variant === "mini") {
      return null;
    }
    const avatarSize = variant === "default" ? 3 : 2;
    return /* @__PURE__ */ jsxRuntime.jsx(core.Avatar, {
      ...restProps,
      ref,
      "aria-hidden": true,
      className: clsx.clsx(
        withBaseName(),
        {
          [withBaseName("stacked")]: isStacked
        },
        className
      ),
      size: avatarSize,
      children: primary ? primary.split(" ").map((x) => x.charAt(0)).slice(0, 2) : null
    });
  }
);

exports.ContactAvatar = ContactAvatar;
//# sourceMappingURL=ContactAvatar.js.map
