'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var core = require('@salt-ds/core');
var clsx = require('clsx');
var React = require('react');
require('./internal/FavoriteToggleWithTooltip.js');
var ContactDetailsContext = require('./internal/ContactDetailsContext.js');
var useComponentSize = require('./internal/useComponentSize.js');
var window = require('@salt-ds/window');
var styles = require('@salt-ds/styles');
var ContactDetails$1 = require('./ContactDetails.css.js');

const withBaseName = core.makePrefixer("saltContactDetails");
function getClassName(variant, isStacked) {
  return withBaseName(`${variant}${isStacked ? "-stacked" : ""}`);
}
const ContactDetails = React.forwardRef(
  function ContactDetails2(props, externalRef) {
    const {
      children,
      variant = "default",
      className,
      stackAtBreakpoint = 300,
      embedded,
      ...restProps
    } = props;
    const targetWindow = window.useWindow();
    styles.useComponentCssInjection({
      testId: "salt-contact-details",
      css: ContactDetails$1,
      window: targetWindow
    });
    const [hasAvatar, setHasAvatar] = React.useState(false);
    const [primary, setPrimary] = React.useState();
    const [primaryId, setPrimaryId] = React.useState();
    const [secondary, setSecondary] = React.useState();
    const [secondaryId, setSecondaryId] = React.useState();
    const [tertiary, setTertiary] = React.useState();
    const [tertiaryId, setTertiaryId] = React.useState();
    const [containerRef, componentSize] = useComponentSize.useComponentSize(stackAtBreakpoint);
    const isStacked = componentSize && componentSize.width < stackAtBreakpoint;
    variant === "compact" && isStacked && console.log("componentSize", componentSize.width, containerRef.current);
    const ref = core.useForkRef(externalRef, containerRef);
    const contextValue = {
      variant,
      hasAvatar,
      setHasAvatar,
      isStacked,
      primary,
      setPrimary,
      primaryId,
      setPrimaryId,
      secondary,
      setSecondary,
      secondaryId,
      setSecondaryId,
      tertiary,
      setTertiary,
      tertiaryId,
      setTertiaryId
    };
    const showNoAvatar = !hasAvatar && !embedded && variant !== "mini";
    return /* @__PURE__ */ jsxRuntime.jsx(ContactDetailsContext.ContactDetailsContext.Provider, {
      value: contextValue,
      children: /* @__PURE__ */ jsxRuntime.jsxs("div", {
        ...restProps,
        ref,
        className: clsx.clsx(
          withBaseName(),
          getClassName(variant, isStacked),
          {
            [withBaseName("embedded")]: embedded,
            [withBaseName("noAvatar")]: showNoAvatar
          },
          className
        ),
        role: "article",
        "aria-roledescription": "Contact Card",
        children: [
          children,
          showNoAvatar ? /* @__PURE__ */ jsxRuntime.jsx("div", {
            className: withBaseName("noAvatar-indicator")
          }) : null
        ]
      })
    });
  }
);

exports.ContactDetails = ContactDetails;
//# sourceMappingURL=ContactDetails.js.map
