'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var core = require('@salt-ds/core');
var icons = require('@salt-ds/icons');
var clsx = require('clsx');
var React = require('react');
require('./internal/FavoriteToggleWithTooltip.js');
var ContactDetailsContext = require('./internal/ContactDetailsContext.js');

const withBaseName = core.makePrefixer("saltContactMetadata");
const ContactMetadata = React.forwardRef(
  function ContactMetadata2(props, ref) {
    const { collapsible, children, collapseButtonId, className, ...restProps } = props;
    const { primaryId, variant, isStacked } = ContactDetailsContext.useContactDetailsContext();
    const [showMetadata, setShowMetadata] = React.useState(!collapsible);
    const toggleShowMetadata = () => {
      setShowMetadata(!showMetadata);
    };
    if (variant !== "default") {
      return null;
    }
    const variantClassName = withBaseName(isStacked ? "stacked" : "default");
    const id = core.useId(collapseButtonId);
    return /* @__PURE__ */ jsxRuntime.jsxs(jsxRuntime.Fragment, {
      children: [
        collapsible ? /* @__PURE__ */ jsxRuntime.jsx(core.Button, {
          "aria-expanded": showMetadata,
          "aria-label": showMetadata ? "Collapse" : "Expand",
          "aria-labelledby": `${id} ${primaryId}`,
          id,
          onClick: toggleShowMetadata,
          variant: "secondary",
          className: withBaseName("expander"),
          children: showMetadata ? /* @__PURE__ */ jsxRuntime.jsx(icons.ChevronUpIcon, {}) : /* @__PURE__ */ jsxRuntime.jsx(icons.ChevronDownIcon, {})
        }) : null,
        !collapsible || showMetadata ? /* @__PURE__ */ jsxRuntime.jsxs("div", {
          ...restProps,
          ref,
          className: clsx.clsx(withBaseName(), variantClassName, className),
          children: [
            collapsible ? /* @__PURE__ */ jsxRuntime.jsx("div", {
              className: withBaseName("separator")
            }) : null,
            children
          ]
        }) : null
      ]
    });
  }
);

exports.ContactMetadata = ContactMetadata;
//# sourceMappingURL=ContactMetadata.js.map
